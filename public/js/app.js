/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/***/ (() => {

eval("function _slicedToArray2(arr, i) { return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2(); }\nfunction _nonIterableRest2() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray2(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen); }\nfunction _arrayLikeToArray2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit2(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles2(arr) { if (Array.isArray(arr)) return arr; }\n/******/(function () {\n  // webpackBootstrap\n  /******/\n  var __webpack_modules__ = {\n    /***/\"./resources/js/app.js\":\n    /*!*****************************!*\\\n      !*** ./resources/js/app.js ***!\n      \\*****************************/\n    /***/\n    function resourcesJsAppJs(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_1954__) {\n      __nested_webpack_require_1954__( /*! ./bootstrap */\"./resources/js/bootstrap.js\");\n      $(document).ready();\n      console.log(\"object\");\n\n      /***/\n    },\n\n    /***/\"./resources/js/bootstrap.js\":\n    /*!***********************************!*\\\n      !*** ./resources/js/bootstrap.js ***!\n      \\***********************************/\n    /***/\n    function resourcesJsBootstrapJs(module, exports, __nested_webpack_require_2368__) {\n      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n      function _get() {\n        if (typeof Reflect !== \"undefined\" && Reflect.get) {\n          _get = Reflect.get.bind();\n        } else {\n          _get = function _get(target, property, receiver) {\n            var base = _superPropBase(target, property);\n            if (!base) return;\n            var desc = Object.getOwnPropertyDescriptor(base, property);\n            if (desc.get) {\n              return desc.get.call(arguments.length < 3 ? target : receiver);\n            }\n            return desc.value;\n          };\n        }\n        return _get.apply(this, arguments);\n      }\n      function _superPropBase(object, property) {\n        while (!Object.prototype.hasOwnProperty.call(object, property)) {\n          object = _getPrototypeOf(object);\n          if (object === null) break;\n        }\n        return object;\n      }\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n          }\n        });\n        Object.defineProperty(subClass, \"prototype\", {\n          writable: false\n        });\n        if (superClass) _setPrototypeOf(subClass, superClass);\n      }\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n        return _setPrototypeOf(o, p);\n      }\n      function _createSuper(Derived) {\n        var hasNativeReflectConstruct = _isNativeReflectConstruct();\n        return function _createSuperInternal() {\n          var Super = _getPrototypeOf(Derived),\n            result;\n          if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n          } else {\n            result = Super.apply(this, arguments);\n          }\n          return _possibleConstructorReturn(this, result);\n        };\n      }\n      function _possibleConstructorReturn(self, call) {\n        if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n          return call;\n        } else if (call !== void 0) {\n          throw new TypeError(\"Derived constructors may only return object or undefined\");\n        }\n        return _assertThisInitialized(self);\n      }\n      function _assertThisInitialized(self) {\n        if (self === void 0) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n        return self;\n      }\n      function _isNativeReflectConstruct() {\n        if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n        if (Reflect.construct.sham) return false;\n        if (typeof Proxy === \"function\") return true;\n        try {\n          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n          return true;\n        } catch (e) {\n          return false;\n        }\n      }\n      function _getPrototypeOf(o) {\n        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n          return o.__proto__ || Object.getPrototypeOf(o);\n        };\n        return _getPrototypeOf(o);\n      }\n      function ownKeys(object, enumerableOnly) {\n        var keys = Object.keys(object);\n        if (Object.getOwnPropertySymbols) {\n          var symbols = Object.getOwnPropertySymbols(object);\n          enumerableOnly && (symbols = symbols.filter(function (sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n          })), keys.push.apply(keys, symbols);\n        }\n        return keys;\n      }\n      function _objectSpread(target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = null != arguments[i] ? arguments[i] : {};\n          i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n            _defineProperty(target, key, source[key]);\n          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n          });\n        }\n        return target;\n      }\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n        }\n      }\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        Object.defineProperty(Constructor, \"prototype\", {\n          writable: false\n        });\n        return Constructor;\n      }\n      function _slicedToArray(arr, i) {\n        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n      }\n      function _nonIterableRest() {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }\n      function _iterableToArrayLimit(arr, i) {\n        var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n        if (null != _i) {\n          var _s,\n            _e,\n            _x,\n            _r,\n            _arr = [],\n            _n = !0,\n            _d = !1;\n          try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n              if (Object(_i) !== _i) return;\n              _n = !1;\n            } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n          } catch (err) {\n            _d = !0, _e = err;\n          } finally {\n            try {\n              if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n            } finally {\n              if (_d) throw _e;\n            }\n          }\n          return _arr;\n        }\n      }\n      function _arrayWithHoles(arr) {\n        if (Array.isArray(arr)) return arr;\n      }\n      function _createForOfIteratorHelper(o, allowArrayLike) {\n        var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n        if (!it) {\n          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n              s: F,\n              n: function n() {\n                if (i >= o.length) return {\n                  done: true\n                };\n                return {\n                  done: false,\n                  value: o[i++]\n                };\n              },\n              e: function e(_e2) {\n                throw _e2;\n              },\n              f: F\n            };\n          }\n          throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n        }\n        var normalCompletion = true,\n          didErr = false,\n          err;\n        return {\n          s: function s() {\n            it = it.call(o);\n          },\n          n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n          },\n          e: function e(_e3) {\n            didErr = true;\n            err = _e3;\n          },\n          f: function f() {\n            try {\n              if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n            } finally {\n              if (didErr) throw err;\n            }\n          }\n        };\n      }\n      function _toConsumableArray(arr) {\n        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n      }\n      function _nonIterableSpread() {\n        throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n      }\n      function _unsupportedIterableToArray(o, minLen) {\n        if (!o) return;\n        if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n        var n = Object.prototype.toString.call(o).slice(8, -1);\n        if (n === \"Object\" && o.constructor) n = o.constructor.name;\n        if (n === \"Map\" || n === \"Set\") return Array.from(o);\n        if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n      }\n      function _iterableToArray(iter) {\n        if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n      }\n      function _arrayWithoutHoles(arr) {\n        if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n      }\n      function _arrayLikeToArray(arr, len) {\n        if (len == null || len > arr.length) len = arr.length;\n        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n        return arr2;\n      }\n      function _defineProperty(obj, key, value) {\n        key = _toPropertyKey(key);\n        if (key in obj) {\n          Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n          });\n        } else {\n          obj[key] = value;\n        }\n        return obj;\n      }\n      function _toPropertyKey(arg) {\n        var key = _toPrimitive(arg, \"string\");\n        return _typeof(key) === \"symbol\" ? key : String(key);\n      }\n      function _toPrimitive(input, hint) {\n        if (_typeof(input) !== \"object\" || input === null) return input;\n        var prim = input[Symbol.toPrimitive];\n        if (prim !== undefined) {\n          var res = prim.call(input, hint || \"default\");\n          if (_typeof(res) !== \"object\") return res;\n          throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n        }\n        return (hint === \"string\" ? String : Number)(input);\n      }\n      function _typeof(obj) {\n        \"@babel/helpers - typeof\";\n\n        return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n          return typeof obj;\n        } : function (obj) {\n          return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        }, _typeof(obj);\n      }\n      /*!\n        * Bootstrap v5.3.0-alpha1 (https://getbootstrap.com/)\n        * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n        * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n        */\n      (function (global, factory) {\n        ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory(__nested_webpack_require_2368__(Object(function webpackMissingModule() {\n          var e = new Error(\"Cannot find module '@popperjs/core'\");\n          e.code = 'MODULE_NOT_FOUND';\n          throw e;\n        }()))) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() {\n          var e = new Error(\"Cannot find module '@popperjs/core'\");\n          e.code = 'MODULE_NOT_FOUND';\n          throw e;\n        }())], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n      })(this, function (Popper) {\n        'use strict';\n\n        var _KEY_TO_DIRECTION;\n        function _interopNamespaceDefault(e) {\n          var n = Object.create(null, _defineProperty({}, Symbol.toStringTag, {\n            value: 'Module'\n          }));\n          if (e) {\n            var _loop = function _loop(k) {\n              if (k !== 'default') {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                  enumerable: true,\n                  get: function get() {\n                    return e[k];\n                  }\n                });\n              }\n            };\n            for (var k in e) {\n              _loop(k);\n            }\n          }\n          n[\"default\"] = e;\n          return Object.freeze(n);\n        }\n        var Popper__namespace = /*#__PURE__*/_interopNamespaceDefault(Popper);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/index.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        var MAX_UID = 1000000;\n        var MILLISECONDS_MULTIPLIER = 1000;\n        var TRANSITION_END = 'transitionend';\n\n        /**\n         * Properly escape IDs selectors to handle weird IDs\n         * @param {string} selector\n         * @returns {string}\n         */\n        var parseSelector = function parseSelector(selector) {\n          if (selector && window.CSS && window.CSS.escape) {\n            // document.querySelector needs escaping to handle IDs (html5+) containing for instance /\n            selector = selector.replace(/#([^\\s\"#']+)/g, function (match, id) {\n              return \"#\".concat(CSS.escape(id));\n            });\n          }\n          return selector;\n        };\n\n        // Shout-out Angus Croll (https://goo.gl/pxwQGp)\n        var toType = function toType(object) {\n          if (object === null || object === undefined) {\n            return \"\".concat(object);\n          }\n          return Object.prototype.toString.call(object).match(/\\s([a-z]+)/i)[1].toLowerCase();\n        };\n\n        /**\n         * Public Util API\n         */\n\n        var getUID = function getUID(prefix) {\n          do {\n            prefix += Math.floor(Math.random() * MAX_UID);\n          } while (document.getElementById(prefix));\n          return prefix;\n        };\n        var getTransitionDurationFromElement = function getTransitionDurationFromElement(element) {\n          if (!element) {\n            return 0;\n          }\n\n          // Get transition-duration of the element\n          var _window$getComputedSt = window.getComputedStyle(element),\n            transitionDuration = _window$getComputedSt.transitionDuration,\n            transitionDelay = _window$getComputedSt.transitionDelay;\n          var floatTransitionDuration = Number.parseFloat(transitionDuration);\n          var floatTransitionDelay = Number.parseFloat(transitionDelay);\n\n          // Return 0 if element or transition duration is not found\n          if (!floatTransitionDuration && !floatTransitionDelay) {\n            return 0;\n          }\n\n          // If multiple durations are defined, take the first\n          transitionDuration = transitionDuration.split(',')[0];\n          transitionDelay = transitionDelay.split(',')[0];\n          return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n        };\n        var triggerTransitionEnd = function triggerTransitionEnd(element) {\n          element.dispatchEvent(new Event(TRANSITION_END));\n        };\n        var isElement = function isElement(object) {\n          if (!object || _typeof(object) !== 'object') {\n            return false;\n          }\n          if (typeof object.jquery !== 'undefined') {\n            object = object[0];\n          }\n          return typeof object.nodeType !== 'undefined';\n        };\n        var getElement = function getElement(object) {\n          // it's a jQuery object or a node element\n          if (isElement(object)) {\n            return object.jquery ? object[0] : object;\n          }\n          if (typeof object === 'string' && object.length > 0) {\n            return document.querySelector(parseSelector(object));\n          }\n          return null;\n        };\n        var isVisible = function isVisible(element) {\n          if (!isElement(element) || element.getClientRects().length === 0) {\n            return false;\n          }\n          var elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible';\n          // Handle `details` element as its content may falsie appear visible when it is closed\n          var closedDetails = element.closest('details:not([open])');\n          if (!closedDetails) {\n            return elementIsVisible;\n          }\n          if (closedDetails !== element) {\n            var summary = element.closest('summary');\n            if (summary && summary.parentNode !== closedDetails) {\n              return false;\n            }\n            if (summary === null) {\n              return false;\n            }\n          }\n          return elementIsVisible;\n        };\n        var isDisabled = function isDisabled(element) {\n          if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n            return true;\n          }\n          if (element.classList.contains('disabled')) {\n            return true;\n          }\n          if (typeof element.disabled !== 'undefined') {\n            return element.disabled;\n          }\n          return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false';\n        };\n        var findShadowRoot = function findShadowRoot(element) {\n          if (!document.documentElement.attachShadow) {\n            return null;\n          }\n\n          // Can find the shadow root otherwise it'll return the document\n          if (typeof element.getRootNode === 'function') {\n            var root = element.getRootNode();\n            return root instanceof ShadowRoot ? root : null;\n          }\n          if (element instanceof ShadowRoot) {\n            return element;\n          }\n\n          // when we don't find a shadow root\n          if (!element.parentNode) {\n            return null;\n          }\n          return findShadowRoot(element.parentNode);\n        };\n        var noop = function noop() {};\n\n        /**\n         * Trick to restart an element's animation\n         *\n         * @param {HTMLElement} element\n         * @return void\n         *\n         * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n         */\n        var reflow = function reflow(element) {\n          element.offsetHeight; // eslint-disable-line no-unused-expressions\n        };\n\n        var getjQuery = function getjQuery() {\n          if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n            return window.jQuery;\n          }\n          return null;\n        };\n        var DOMContentLoadedCallbacks = [];\n        var onDOMContentLoaded = function onDOMContentLoaded(callback) {\n          if (document.readyState === 'loading') {\n            // add listener on the first call when the document is in loading state\n            if (!DOMContentLoadedCallbacks.length) {\n              document.addEventListener('DOMContentLoaded', function () {\n                for (var _i = 0, _DOMContentLoadedCall = DOMContentLoadedCallbacks; _i < _DOMContentLoadedCall.length; _i++) {\n                  var _callback = _DOMContentLoadedCall[_i];\n                  _callback();\n                }\n              });\n            }\n            DOMContentLoadedCallbacks.push(callback);\n          } else {\n            callback();\n          }\n        };\n        var isRTL = function isRTL() {\n          return document.documentElement.dir === 'rtl';\n        };\n        var defineJQueryPlugin = function defineJQueryPlugin(plugin) {\n          onDOMContentLoaded(function () {\n            var $ = getjQuery();\n            /* istanbul ignore if */\n            if ($) {\n              var name = plugin.NAME;\n              var JQUERY_NO_CONFLICT = $.fn[name];\n              $.fn[name] = plugin.jQueryInterface;\n              $.fn[name].Constructor = plugin;\n              $.fn[name].noConflict = function () {\n                $.fn[name] = JQUERY_NO_CONFLICT;\n                return plugin.jQueryInterface;\n              };\n            }\n          });\n        };\n        var execute = function execute(possibleCallback) {\n          var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n          var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : possibleCallback;\n          return typeof possibleCallback === 'function' ? possibleCallback.apply(void 0, _toConsumableArray(args)) : defaultValue;\n        };\n        var executeAfterTransition = function executeAfterTransition(callback, transitionElement) {\n          var waitForTransition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n          if (!waitForTransition) {\n            execute(callback);\n            return;\n          }\n          var durationPadding = 5;\n          var emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n          var called = false;\n          var handler = function handler(_ref) {\n            var target = _ref.target;\n            if (target !== transitionElement) {\n              return;\n            }\n            called = true;\n            transitionElement.removeEventListener(TRANSITION_END, handler);\n            execute(callback);\n          };\n          transitionElement.addEventListener(TRANSITION_END, handler);\n          setTimeout(function () {\n            if (!called) {\n              triggerTransitionEnd(transitionElement);\n            }\n          }, emulatedDuration);\n        };\n\n        /**\n         * Return the previous/next element of a list.\n         *\n         * @param {array} list    The list of elements\n         * @param activeElement   The active element\n         * @param shouldGetNext   Choose to get next or previous element\n         * @param isCycleAllowed\n         * @return {Element|elem} The proper element\n         */\n        var getNextActiveElement = function getNextActiveElement(list, activeElement, shouldGetNext, isCycleAllowed) {\n          var listLength = list.length;\n          var index = list.indexOf(activeElement);\n\n          // if the element does not exist in the list return an element\n          // depending on the direction and if cycle is allowed\n          if (index === -1) {\n            return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];\n          }\n          index += shouldGetNext ? 1 : -1;\n          if (isCycleAllowed) {\n            index = (index + listLength) % listLength;\n          }\n          return list[Math.max(0, Math.min(index, listLength - 1))];\n        };\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): dom/event-handler.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n        var stripNameRegex = /\\..*/;\n        var stripUidRegex = /::\\d+$/;\n        var eventRegistry = {}; // Events storage\n        var uidEvent = 1;\n        var customEvents = {\n          mouseenter: 'mouseover',\n          mouseleave: 'mouseout'\n        };\n        var nativeEvents = new Set(['click', 'dblclick', 'mouseup', 'mousedown', 'contextmenu', 'mousewheel', 'DOMMouseScroll', 'mouseover', 'mouseout', 'mousemove', 'selectstart', 'selectend', 'keydown', 'keypress', 'keyup', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'pointerdown', 'pointermove', 'pointerup', 'pointerleave', 'pointercancel', 'gesturestart', 'gesturechange', 'gestureend', 'focus', 'blur', 'change', 'reset', 'select', 'submit', 'focusin', 'focusout', 'load', 'unload', 'beforeunload', 'resize', 'move', 'DOMContentLoaded', 'readystatechange', 'error', 'abort', 'scroll']);\n\n        /**\n         * Private methods\n         */\n\n        function makeEventUid(element, uid) {\n          return uid && \"\".concat(uid, \"::\").concat(uidEvent++) || element.uidEvent || uidEvent++;\n        }\n        function getElementEvents(element) {\n          var uid = makeEventUid(element);\n          element.uidEvent = uid;\n          eventRegistry[uid] = eventRegistry[uid] || {};\n          return eventRegistry[uid];\n        }\n        function bootstrapHandler(element, fn) {\n          return function handler(event) {\n            hydrateObj(event, {\n              delegateTarget: element\n            });\n            if (handler.oneOff) {\n              EventHandler.off(element, event.type, fn);\n            }\n            return fn.apply(element, [event]);\n          };\n        }\n        function bootstrapDelegationHandler(element, selector, fn) {\n          return function handler(event) {\n            var domElements = element.querySelectorAll(selector);\n            for (var target = event.target; target && target !== this; target = target.parentNode) {\n              var _iterator = _createForOfIteratorHelper(domElements),\n                _step;\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var domElement = _step.value;\n                  if (domElement !== target) {\n                    continue;\n                  }\n                  hydrateObj(event, {\n                    delegateTarget: target\n                  });\n                  if (handler.oneOff) {\n                    EventHandler.off(element, event.type, selector, fn);\n                  }\n                  return fn.apply(target, [event]);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            }\n          };\n        }\n        function findHandler(events, callable) {\n          var delegationSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          return Object.values(events).find(function (event) {\n            return event.callable === callable && event.delegationSelector === delegationSelector;\n          });\n        }\n        function normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n          var isDelegated = typeof handler === 'string';\n          // todo: tooltip passes `false` instead of selector, so we need to check\n          var callable = isDelegated ? delegationFunction : handler || delegationFunction;\n          var typeEvent = getTypeEvent(originalTypeEvent);\n          if (!nativeEvents.has(typeEvent)) {\n            typeEvent = originalTypeEvent;\n          }\n          return [isDelegated, callable, typeEvent];\n        }\n        function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n          if (typeof originalTypeEvent !== 'string' || !element) {\n            return;\n          }\n          var _normalizeParameters = normalizeParameters(originalTypeEvent, handler, delegationFunction),\n            _normalizeParameters2 = _slicedToArray(_normalizeParameters, 3),\n            isDelegated = _normalizeParameters2[0],\n            callable = _normalizeParameters2[1],\n            typeEvent = _normalizeParameters2[2];\n\n          // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n          // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n          if (originalTypeEvent in customEvents) {\n            var wrapFunction = function wrapFunction(fn) {\n              return function (event) {\n                if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n                  return fn.call(this, event);\n                }\n              };\n            };\n            callable = wrapFunction(callable);\n          }\n          var events = getElementEvents(element);\n          var handlers = events[typeEvent] || (events[typeEvent] = {});\n          var previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);\n          if (previousFunction) {\n            previousFunction.oneOff = previousFunction.oneOff && oneOff;\n            return;\n          }\n          var uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));\n          var fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);\n          fn.delegationSelector = isDelegated ? handler : null;\n          fn.callable = callable;\n          fn.oneOff = oneOff;\n          fn.uidEvent = uid;\n          handlers[uid] = fn;\n          element.addEventListener(typeEvent, fn, isDelegated);\n        }\n        function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n          var fn = findHandler(events[typeEvent], handler, delegationSelector);\n          if (!fn) {\n            return;\n          }\n          element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n          delete events[typeEvent][fn.uidEvent];\n        }\n        function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n          var storeElementEvent = events[typeEvent] || {};\n          for (var _i2 = 0, _Object$entries = Object.entries(storeElementEvent); _i2 < _Object$entries.length; _i2++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n              handlerKey = _Object$entries$_i[0],\n              event = _Object$entries$_i[1];\n            if (handlerKey.includes(namespace)) {\n              removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n            }\n          }\n        }\n        function getTypeEvent(event) {\n          // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n          event = event.replace(stripNameRegex, '');\n          return customEvents[event] || event;\n        }\n        var EventHandler = {\n          on: function on(element, event, handler, delegationFunction) {\n            addHandler(element, event, handler, delegationFunction, false);\n          },\n          one: function one(element, event, handler, delegationFunction) {\n            addHandler(element, event, handler, delegationFunction, true);\n          },\n          off: function off(element, originalTypeEvent, handler, delegationFunction) {\n            if (typeof originalTypeEvent !== 'string' || !element) {\n              return;\n            }\n            var _normalizeParameters3 = normalizeParameters(originalTypeEvent, handler, delegationFunction),\n              _normalizeParameters4 = _slicedToArray(_normalizeParameters3, 3),\n              isDelegated = _normalizeParameters4[0],\n              callable = _normalizeParameters4[1],\n              typeEvent = _normalizeParameters4[2];\n            var inNamespace = typeEvent !== originalTypeEvent;\n            var events = getElementEvents(element);\n            var storeElementEvent = events[typeEvent] || {};\n            var isNamespace = originalTypeEvent.startsWith('.');\n            if (typeof callable !== 'undefined') {\n              // Simplest case: handler is passed, remove that listener ONLY.\n              if (!Object.keys(storeElementEvent).length) {\n                return;\n              }\n              removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);\n              return;\n            }\n            if (isNamespace) {\n              for (var _i3 = 0, _Object$keys = Object.keys(events); _i3 < _Object$keys.length; _i3++) {\n                var elementEvent = _Object$keys[_i3];\n                removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n              }\n            }\n            for (var _i4 = 0, _Object$entries2 = Object.entries(storeElementEvent); _i4 < _Object$entries2.length; _i4++) {\n              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i4], 2),\n                keyHandlers = _Object$entries2$_i[0],\n                event = _Object$entries2$_i[1];\n              var handlerKey = keyHandlers.replace(stripUidRegex, '');\n              if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n                removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n              }\n            }\n          },\n          trigger: function trigger(element, event, args) {\n            if (typeof event !== 'string' || !element) {\n              return null;\n            }\n            var $ = getjQuery();\n            var typeEvent = getTypeEvent(event);\n            var inNamespace = event !== typeEvent;\n            var jQueryEvent = null;\n            var bubbles = true;\n            var nativeDispatch = true;\n            var defaultPrevented = false;\n            if (inNamespace && $) {\n              jQueryEvent = $.Event(event, args);\n              $(element).trigger(jQueryEvent);\n              bubbles = !jQueryEvent.isPropagationStopped();\n              nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n              defaultPrevented = jQueryEvent.isDefaultPrevented();\n            }\n            var evt = new Event(event, {\n              bubbles: bubbles,\n              cancelable: true\n            });\n            evt = hydrateObj(evt, args);\n            if (defaultPrevented) {\n              evt.preventDefault();\n            }\n            if (nativeDispatch) {\n              element.dispatchEvent(evt);\n            }\n            if (evt.defaultPrevented && jQueryEvent) {\n              jQueryEvent.preventDefault();\n            }\n            return evt;\n          }\n        };\n        function hydrateObj(obj) {\n          var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          var _loop2 = function _loop2() {\n            var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i5], 2),\n              key = _Object$entries3$_i[0],\n              value = _Object$entries3$_i[1];\n            try {\n              obj[key] = value;\n            } catch (_unused) {\n              Object.defineProperty(obj, key, {\n                configurable: true,\n                get: function get() {\n                  return value;\n                }\n              });\n            }\n          };\n          for (var _i5 = 0, _Object$entries3 = Object.entries(meta); _i5 < _Object$entries3.length; _i5++) {\n            _loop2();\n          }\n          return obj;\n        }\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): dom/data.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var elementMap = new Map();\n        var Data = {\n          set: function set(element, key, instance) {\n            if (!elementMap.has(element)) {\n              elementMap.set(element, new Map());\n            }\n            var instanceMap = elementMap.get(element);\n\n            // make it clear we only want one instance per element\n            // can be removed later when multiple key/instances are fine to be used\n            if (!instanceMap.has(key) && instanceMap.size !== 0) {\n              // eslint-disable-next-line no-console\n              console.error(\"Bootstrap doesn't allow more than one instance per element. Bound instance: \".concat(Array.from(instanceMap.keys())[0], \".\"));\n              return;\n            }\n            instanceMap.set(key, instance);\n          },\n          get: function get(element, key) {\n            if (elementMap.has(element)) {\n              return elementMap.get(element).get(key) || null;\n            }\n            return null;\n          },\n          remove: function remove(element, key) {\n            if (!elementMap.has(element)) {\n              return;\n            }\n            var instanceMap = elementMap.get(element);\n            instanceMap[\"delete\"](key);\n\n            // free up element references if there are no instances left for an element\n            if (instanceMap.size === 0) {\n              elementMap[\"delete\"](element);\n            }\n          }\n        };\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): dom/manipulator.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        function normalizeData(value) {\n          if (value === 'true') {\n            return true;\n          }\n          if (value === 'false') {\n            return false;\n          }\n          if (value === Number(value).toString()) {\n            return Number(value);\n          }\n          if (value === '' || value === 'null') {\n            return null;\n          }\n          if (typeof value !== 'string') {\n            return value;\n          }\n          try {\n            return JSON.parse(decodeURIComponent(value));\n          } catch (_unused) {\n            return value;\n          }\n        }\n        function normalizeDataKey(key) {\n          return key.replace(/[A-Z]/g, function (chr) {\n            return \"-\".concat(chr.toLowerCase());\n          });\n        }\n        var Manipulator = {\n          setDataAttribute: function setDataAttribute(element, key, value) {\n            element.setAttribute(\"data-bs-\".concat(normalizeDataKey(key)), value);\n          },\n          removeDataAttribute: function removeDataAttribute(element, key) {\n            element.removeAttribute(\"data-bs-\".concat(normalizeDataKey(key)));\n          },\n          getDataAttributes: function getDataAttributes(element) {\n            if (!element) {\n              return {};\n            }\n            var attributes = {};\n            var bsKeys = Object.keys(element.dataset).filter(function (key) {\n              return key.startsWith('bs') && !key.startsWith('bsConfig');\n            });\n            var _iterator2 = _createForOfIteratorHelper(bsKeys),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var key = _step2.value;\n                var pureKey = key.replace(/^bs/, '');\n                pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n                attributes[pureKey] = normalizeData(element.dataset[key]);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            return attributes;\n          },\n          getDataAttribute: function getDataAttribute(element, key) {\n            return normalizeData(element.getAttribute(\"data-bs-\".concat(normalizeDataKey(key))));\n          }\n        };\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/config.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Class definition\n         */\n        var Config = /*#__PURE__*/function () {\n          function Config() {\n            _classCallCheck(this, Config);\n          }\n          _createClass(Config, [{\n            key: \"_getConfig\",\n            value: function _getConfig(config) {\n              config = this._mergeConfigObj(config);\n              config = this._configAfterMerge(config);\n              this._typeCheckConfig(config);\n              return config;\n            }\n          }, {\n            key: \"_configAfterMerge\",\n            value: function _configAfterMerge(config) {\n              return config;\n            }\n          }, {\n            key: \"_mergeConfigObj\",\n            value: function _mergeConfigObj(config, element) {\n              var jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse\n\n              return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.constructor.Default), _typeof(jsonConfig) === 'object' ? jsonConfig : {}), isElement(element) ? Manipulator.getDataAttributes(element) : {}), _typeof(config) === 'object' ? config : {});\n            }\n          }, {\n            key: \"_typeCheckConfig\",\n            value: function _typeCheckConfig(config) {\n              var configTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.DefaultType;\n              for (var _i6 = 0, _Object$entries4 = Object.entries(configTypes); _i6 < _Object$entries4.length; _i6++) {\n                var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i6], 2),\n                  property = _Object$entries4$_i[0],\n                  expectedTypes = _Object$entries4$_i[1];\n                var value = config[property];\n                var valueType = isElement(value) ? 'element' : toType(value);\n                if (!new RegExp(expectedTypes).test(valueType)) {\n                  throw new TypeError(\"\".concat(this.constructor.NAME.toUpperCase(), \": Option \\\"\").concat(property, \"\\\" provided type \\\"\").concat(valueType, \"\\\" but expected type \\\"\").concat(expectedTypes, \"\\\".\"));\n                }\n              }\n            }\n          }], [{\n            key: \"Default\",\n            get:\n            // Getters\n            function get() {\n              return {};\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return {};\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              throw new Error('You have to implement the static method \"NAME\", for each component!');\n            }\n          }]);\n          return Config;\n        }();\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): base-component.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        /**\n         * Constants\n         */\n        var VERSION = '5.3.0-alpha1';\n\n        /**\n         * Class definition\n         */\n        var BaseComponent = /*#__PURE__*/function (_Config) {\n          _inherits(BaseComponent, _Config);\n          var _super = _createSuper(BaseComponent);\n          function BaseComponent(element, config) {\n            var _this;\n            _classCallCheck(this, BaseComponent);\n            _this = _super.call(this);\n            element = getElement(element);\n            if (!element) {\n              return _possibleConstructorReturn(_this);\n            }\n            _this._element = element;\n            _this._config = _this._getConfig(config);\n            Data.set(_this._element, _this.constructor.DATA_KEY, _assertThisInitialized(_this));\n            return _this;\n          }\n\n          // Public\n          _createClass(BaseComponent, [{\n            key: \"dispose\",\n            value: function dispose() {\n              Data.remove(this._element, this.constructor.DATA_KEY);\n              EventHandler.off(this._element, this.constructor.EVENT_KEY);\n              var _iterator3 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this)),\n                _step3;\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var propertyName = _step3.value;\n                  this[propertyName] = null;\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            }\n          }, {\n            key: \"_queueCallback\",\n            value: function _queueCallback(callback, element) {\n              var isAnimated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n              executeAfterTransition(callback, element, isAnimated);\n            }\n          }, {\n            key: \"_getConfig\",\n            value: function _getConfig(config) {\n              config = this._mergeConfigObj(config, this._element);\n              config = this._configAfterMerge(config);\n              this._typeCheckConfig(config);\n              return config;\n            }\n\n            // Static\n          }], [{\n            key: \"getInstance\",\n            value: function getInstance(element) {\n              return Data.get(getElement(element), this.DATA_KEY);\n            }\n          }, {\n            key: \"getOrCreateInstance\",\n            value: function getOrCreateInstance(element) {\n              var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n              return this.getInstance(element) || new this(element, _typeof(config) === 'object' ? config : null);\n            }\n          }, {\n            key: \"VERSION\",\n            get: function get() {\n              return VERSION;\n            }\n          }, {\n            key: \"DATA_KEY\",\n            get: function get() {\n              return \"bs.\".concat(this.NAME);\n            }\n          }, {\n            key: \"EVENT_KEY\",\n            get: function get() {\n              return \".\".concat(this.DATA_KEY);\n            }\n          }, {\n            key: \"eventName\",\n            value: function eventName(name) {\n              return \"\".concat(name).concat(this.EVENT_KEY);\n            }\n          }]);\n          return BaseComponent;\n        }(Config);\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): dom/selector-engine.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        var getSelector = function getSelector(element) {\n          var selector = element.getAttribute('data-bs-target');\n          if (!selector || selector === '#') {\n            var hrefAttribute = element.getAttribute('href');\n\n            // The only valid content that could double as a selector are IDs or classes,\n            // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n            // `document.querySelector` will rightfully complain it is invalid.\n            // See https://github.com/twbs/bootstrap/issues/32273\n            if (!hrefAttribute || !hrefAttribute.includes('#') && !hrefAttribute.startsWith('.')) {\n              return null;\n            }\n\n            // Just in case some CMS puts out a full URL with the anchor appended\n            if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {\n              hrefAttribute = \"#\".concat(hrefAttribute.split('#')[1]);\n            }\n            selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;\n          }\n          return parseSelector(selector);\n        };\n        var SelectorEngine = {\n          find: function find(selector) {\n            var _ref2;\n            var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;\n            return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(Element.prototype.querySelectorAll.call(element, selector)));\n          },\n          findOne: function findOne(selector) {\n            var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;\n            return Element.prototype.querySelector.call(element, selector);\n          },\n          children: function children(element, selector) {\n            var _ref3;\n            return (_ref3 = []).concat.apply(_ref3, _toConsumableArray(element.children)).filter(function (child) {\n              return child.matches(selector);\n            });\n          },\n          parents: function parents(element, selector) {\n            var parents = [];\n            var ancestor = element.parentNode.closest(selector);\n            while (ancestor) {\n              parents.push(ancestor);\n              ancestor = ancestor.parentNode.closest(selector);\n            }\n            return parents;\n          },\n          prev: function prev(element, selector) {\n            var previous = element.previousElementSibling;\n            while (previous) {\n              if (previous.matches(selector)) {\n                return [previous];\n              }\n              previous = previous.previousElementSibling;\n            }\n            return [];\n          },\n          // TODO: this is now unused; remove later along with prev()\n          next: function next(element, selector) {\n            var next = element.nextElementSibling;\n            while (next) {\n              if (next.matches(selector)) {\n                return [next];\n              }\n              next = next.nextElementSibling;\n            }\n            return [];\n          },\n          focusableChildren: function focusableChildren(element) {\n            var focusables = ['a', 'button', 'input', 'textarea', 'select', 'details', '[tabindex]', '[contenteditable=\"true\"]'].map(function (selector) {\n              return \"\".concat(selector, \":not([tabindex^=\\\"-\\\"])\");\n            }).join(',');\n            return this.find(focusables, element).filter(function (el) {\n              return !isDisabled(el) && isVisible(el);\n            });\n          },\n          getSelectorFromElement: function getSelectorFromElement(element) {\n            var selector = getSelector(element);\n            if (selector) {\n              return SelectorEngine.findOne(selector) ? selector : null;\n            }\n            return null;\n          },\n          getElementFromSelector: function getElementFromSelector(element) {\n            var selector = getSelector(element);\n            return selector ? SelectorEngine.findOne(selector) : null;\n          },\n          getMultipleElementsFromSelector: function getMultipleElementsFromSelector(element) {\n            var selector = getSelector(element);\n            return selector ? SelectorEngine.find(selector) : [];\n          }\n        };\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/component-functions.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        var enableDismissTrigger = function enableDismissTrigger(component) {\n          var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hide';\n          var clickEvent = \"click.dismiss\".concat(component.EVENT_KEY);\n          var name = component.NAME;\n          EventHandler.on(document, clickEvent, \"[data-bs-dismiss=\\\"\".concat(name, \"\\\"]\"), function (event) {\n            if (['A', 'AREA'].includes(this.tagName)) {\n              event.preventDefault();\n            }\n            if (isDisabled(this)) {\n              return;\n            }\n            var target = SelectorEngine.getElementFromSelector(this) || this.closest(\".\".concat(name));\n            var instance = component.getOrCreateInstance(target);\n\n            // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n            instance[method]();\n          });\n        };\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): alert.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$f = 'alert';\n        var DATA_KEY$a = 'bs.alert';\n        var EVENT_KEY$b = \".\".concat(DATA_KEY$a);\n        var EVENT_CLOSE = \"close\".concat(EVENT_KEY$b);\n        var EVENT_CLOSED = \"closed\".concat(EVENT_KEY$b);\n        var CLASS_NAME_FADE$5 = 'fade';\n        var CLASS_NAME_SHOW$8 = 'show';\n\n        /**\n         * Class definition\n         */\n        var Alert = /*#__PURE__*/function (_BaseComponent) {\n          _inherits(Alert, _BaseComponent);\n          var _super2 = _createSuper(Alert);\n          function Alert() {\n            _classCallCheck(this, Alert);\n            return _super2.apply(this, arguments);\n          }\n          _createClass(Alert, [{\n            key: \"close\",\n            value:\n            // Public\n            function close() {\n              var _this2 = this;\n              var closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n              if (closeEvent.defaultPrevented) {\n                return;\n              }\n              this._element.classList.remove(CLASS_NAME_SHOW$8);\n              var isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n              this._queueCallback(function () {\n                return _this2._destroyElement();\n              }, this._element, isAnimated);\n            }\n\n            // Private\n          }, {\n            key: \"_destroyElement\",\n            value: function _destroyElement() {\n              this._element.remove();\n              EventHandler.trigger(this._element, EVENT_CLOSED);\n              this.dispose();\n            }\n\n            // Static\n          }], [{\n            key: \"NAME\",\n            get:\n            // Getters\n            function get() {\n              return NAME$f;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Alert.getOrCreateInstance(this);\n                if (typeof config !== 'string') {\n                  return;\n                }\n                if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n                  throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                }\n                data[config](this);\n              });\n            }\n          }]);\n          return Alert;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        enableDismissTrigger(Alert, 'close');\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Alert);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): button.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$e = 'button';\n        var DATA_KEY$9 = 'bs.button';\n        var EVENT_KEY$a = \".\".concat(DATA_KEY$9);\n        var DATA_API_KEY$6 = '.data-api';\n        var CLASS_NAME_ACTIVE$3 = 'active';\n        var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\n        var EVENT_CLICK_DATA_API$6 = \"click\".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);\n\n        /**\n         * Class definition\n         */\n        var Button = /*#__PURE__*/function (_BaseComponent2) {\n          _inherits(Button, _BaseComponent2);\n          var _super3 = _createSuper(Button);\n          function Button() {\n            _classCallCheck(this, Button);\n            return _super3.apply(this, arguments);\n          }\n          _createClass(Button, [{\n            key: \"toggle\",\n            value:\n            // Public\n            function toggle() {\n              // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n              this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n            }\n\n            // Static\n          }], [{\n            key: \"NAME\",\n            get:\n            // Getters\n            function get() {\n              return NAME$e;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Button.getOrCreateInstance(this);\n                if (config === 'toggle') {\n                  data[config]();\n                }\n              });\n            }\n          }]);\n          return Button;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, function (event) {\n          event.preventDefault();\n          var button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n          var data = Button.getOrCreateInstance(button);\n          data.toggle();\n        });\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Button);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/swipe.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$d = 'swipe';\n        var EVENT_KEY$9 = '.bs.swipe';\n        var EVENT_TOUCHSTART = \"touchstart\".concat(EVENT_KEY$9);\n        var EVENT_TOUCHMOVE = \"touchmove\".concat(EVENT_KEY$9);\n        var EVENT_TOUCHEND = \"touchend\".concat(EVENT_KEY$9);\n        var EVENT_POINTERDOWN = \"pointerdown\".concat(EVENT_KEY$9);\n        var EVENT_POINTERUP = \"pointerup\".concat(EVENT_KEY$9);\n        var POINTER_TYPE_TOUCH = 'touch';\n        var POINTER_TYPE_PEN = 'pen';\n        var CLASS_NAME_POINTER_EVENT = 'pointer-event';\n        var SWIPE_THRESHOLD = 40;\n        var Default$c = {\n          endCallback: null,\n          leftCallback: null,\n          rightCallback: null\n        };\n        var DefaultType$c = {\n          endCallback: '(function|null)',\n          leftCallback: '(function|null)',\n          rightCallback: '(function|null)'\n        };\n\n        /**\n         * Class definition\n         */\n        var Swipe = /*#__PURE__*/function (_Config2) {\n          _inherits(Swipe, _Config2);\n          var _super4 = _createSuper(Swipe);\n          function Swipe(element, config) {\n            var _this3;\n            _classCallCheck(this, Swipe);\n            _this3 = _super4.call(this);\n            _this3._element = element;\n            if (!element || !Swipe.isSupported()) {\n              return _possibleConstructorReturn(_this3);\n            }\n            _this3._config = _this3._getConfig(config);\n            _this3._deltaX = 0;\n            _this3._supportPointerEvents = Boolean(window.PointerEvent);\n            _this3._initEvents();\n            return _this3;\n          }\n\n          // Getters\n          _createClass(Swipe, [{\n            key: \"dispose\",\n            value:\n            // Public\n            function dispose() {\n              EventHandler.off(this._element, EVENT_KEY$9);\n            }\n\n            // Private\n          }, {\n            key: \"_start\",\n            value: function _start(event) {\n              if (!this._supportPointerEvents) {\n                this._deltaX = event.touches[0].clientX;\n                return;\n              }\n              if (this._eventIsPointerPenTouch(event)) {\n                this._deltaX = event.clientX;\n              }\n            }\n          }, {\n            key: \"_end\",\n            value: function _end(event) {\n              if (this._eventIsPointerPenTouch(event)) {\n                this._deltaX = event.clientX - this._deltaX;\n              }\n              this._handleSwipe();\n              execute(this._config.endCallback);\n            }\n          }, {\n            key: \"_move\",\n            value: function _move(event) {\n              this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;\n            }\n          }, {\n            key: \"_handleSwipe\",\n            value: function _handleSwipe() {\n              var absDeltaX = Math.abs(this._deltaX);\n              if (absDeltaX <= SWIPE_THRESHOLD) {\n                return;\n              }\n              var direction = absDeltaX / this._deltaX;\n              this._deltaX = 0;\n              if (!direction) {\n                return;\n              }\n              execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);\n            }\n          }, {\n            key: \"_initEvents\",\n            value: function _initEvents() {\n              var _this4 = this;\n              if (this._supportPointerEvents) {\n                EventHandler.on(this._element, EVENT_POINTERDOWN, function (event) {\n                  return _this4._start(event);\n                });\n                EventHandler.on(this._element, EVENT_POINTERUP, function (event) {\n                  return _this4._end(event);\n                });\n                this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n              } else {\n                EventHandler.on(this._element, EVENT_TOUCHSTART, function (event) {\n                  return _this4._start(event);\n                });\n                EventHandler.on(this._element, EVENT_TOUCHMOVE, function (event) {\n                  return _this4._move(event);\n                });\n                EventHandler.on(this._element, EVENT_TOUCHEND, function (event) {\n                  return _this4._end(event);\n                });\n              }\n            }\n          }, {\n            key: \"_eventIsPointerPenTouch\",\n            value: function _eventIsPointerPenTouch(event) {\n              return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$c;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$c;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$d;\n            }\n          }, {\n            key: \"isSupported\",\n            value: function isSupported() {\n              return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n            }\n          }]);\n          return Swipe;\n        }(Config);\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): carousel.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        /**\n         * Constants\n         */\n        var NAME$c = 'carousel';\n        var DATA_KEY$8 = 'bs.carousel';\n        var EVENT_KEY$8 = \".\".concat(DATA_KEY$8);\n        var DATA_API_KEY$5 = '.data-api';\n        var ARROW_LEFT_KEY$1 = 'ArrowLeft';\n        var ARROW_RIGHT_KEY$1 = 'ArrowRight';\n        var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\n        var ORDER_NEXT = 'next';\n        var ORDER_PREV = 'prev';\n        var DIRECTION_LEFT = 'left';\n        var DIRECTION_RIGHT = 'right';\n        var EVENT_SLIDE = \"slide\".concat(EVENT_KEY$8);\n        var EVENT_SLID = \"slid\".concat(EVENT_KEY$8);\n        var EVENT_KEYDOWN$1 = \"keydown\".concat(EVENT_KEY$8);\n        var EVENT_MOUSEENTER$1 = \"mouseenter\".concat(EVENT_KEY$8);\n        var EVENT_MOUSELEAVE$1 = \"mouseleave\".concat(EVENT_KEY$8);\n        var EVENT_DRAG_START = \"dragstart\".concat(EVENT_KEY$8);\n        var EVENT_LOAD_DATA_API$3 = \"load\".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);\n        var EVENT_CLICK_DATA_API$5 = \"click\".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);\n        var CLASS_NAME_CAROUSEL = 'carousel';\n        var CLASS_NAME_ACTIVE$2 = 'active';\n        var CLASS_NAME_SLIDE = 'slide';\n        var CLASS_NAME_END = 'carousel-item-end';\n        var CLASS_NAME_START = 'carousel-item-start';\n        var CLASS_NAME_NEXT = 'carousel-item-next';\n        var CLASS_NAME_PREV = 'carousel-item-prev';\n        var SELECTOR_ACTIVE = '.active';\n        var SELECTOR_ITEM = '.carousel-item';\n        var SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;\n        var SELECTOR_ITEM_IMG = '.carousel-item img';\n        var SELECTOR_INDICATORS = '.carousel-indicators';\n        var SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]';\n        var SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\n        var KEY_TO_DIRECTION = (_KEY_TO_DIRECTION = {}, _defineProperty(_KEY_TO_DIRECTION, ARROW_LEFT_KEY$1, DIRECTION_RIGHT), _defineProperty(_KEY_TO_DIRECTION, ARROW_RIGHT_KEY$1, DIRECTION_LEFT), _KEY_TO_DIRECTION);\n        var Default$b = {\n          interval: 5000,\n          keyboard: true,\n          pause: 'hover',\n          ride: false,\n          touch: true,\n          wrap: true\n        };\n        var DefaultType$b = {\n          interval: '(number|boolean)',\n          // TODO:v6 remove boolean support\n          keyboard: 'boolean',\n          pause: '(string|boolean)',\n          ride: '(boolean|string)',\n          touch: 'boolean',\n          wrap: 'boolean'\n        };\n\n        /**\n         * Class definition\n         */\n        var Carousel = /*#__PURE__*/function (_BaseComponent3) {\n          _inherits(Carousel, _BaseComponent3);\n          var _super5 = _createSuper(Carousel);\n          function Carousel(element, config) {\n            var _this5;\n            _classCallCheck(this, Carousel);\n            _this5 = _super5.call(this, element, config);\n            _this5._interval = null;\n            _this5._activeElement = null;\n            _this5._isSliding = false;\n            _this5.touchTimeout = null;\n            _this5._swipeHelper = null;\n            _this5._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, _this5._element);\n            _this5._addEventListeners();\n            if (_this5._config.ride === CLASS_NAME_CAROUSEL) {\n              _this5.cycle();\n            }\n            return _this5;\n          }\n\n          // Getters\n          _createClass(Carousel, [{\n            key: \"next\",\n            value:\n            // Public\n            function next() {\n              this._slide(ORDER_NEXT);\n            }\n          }, {\n            key: \"nextWhenVisible\",\n            value: function nextWhenVisible() {\n              // FIXME TODO use `document.visibilityState`\n              // Don't call next when the page isn't visible\n              // or the carousel or its parent isn't visible\n              if (!document.hidden && isVisible(this._element)) {\n                this.next();\n              }\n            }\n          }, {\n            key: \"prev\",\n            value: function prev() {\n              this._slide(ORDER_PREV);\n            }\n          }, {\n            key: \"pause\",\n            value: function pause() {\n              if (this._isSliding) {\n                triggerTransitionEnd(this._element);\n              }\n              this._clearInterval();\n            }\n          }, {\n            key: \"cycle\",\n            value: function cycle() {\n              var _this6 = this;\n              this._clearInterval();\n              this._updateInterval();\n              this._interval = setInterval(function () {\n                return _this6.nextWhenVisible();\n              }, this._config.interval);\n            }\n          }, {\n            key: \"_maybeEnableCycle\",\n            value: function _maybeEnableCycle() {\n              var _this7 = this;\n              if (!this._config.ride) {\n                return;\n              }\n              if (this._isSliding) {\n                EventHandler.one(this._element, EVENT_SLID, function () {\n                  return _this7.cycle();\n                });\n                return;\n              }\n              this.cycle();\n            }\n          }, {\n            key: \"to\",\n            value: function to(index) {\n              var _this8 = this;\n              var items = this._getItems();\n              if (index > items.length - 1 || index < 0) {\n                return;\n              }\n              if (this._isSliding) {\n                EventHandler.one(this._element, EVENT_SLID, function () {\n                  return _this8.to(index);\n                });\n                return;\n              }\n              var activeIndex = this._getItemIndex(this._getActive());\n              if (activeIndex === index) {\n                return;\n              }\n              var order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n              this._slide(order, items[index]);\n            }\n          }, {\n            key: \"dispose\",\n            value: function dispose() {\n              if (this._swipeHelper) {\n                this._swipeHelper.dispose();\n              }\n              _get(_getPrototypeOf(Carousel.prototype), \"dispose\", this).call(this);\n            }\n\n            // Private\n          }, {\n            key: \"_configAfterMerge\",\n            value: function _configAfterMerge(config) {\n              config.defaultInterval = config.interval;\n              return config;\n            }\n          }, {\n            key: \"_addEventListeners\",\n            value: function _addEventListeners() {\n              var _this9 = this;\n              if (this._config.keyboard) {\n                EventHandler.on(this._element, EVENT_KEYDOWN$1, function (event) {\n                  return _this9._keydown(event);\n                });\n              }\n              if (this._config.pause === 'hover') {\n                EventHandler.on(this._element, EVENT_MOUSEENTER$1, function () {\n                  return _this9.pause();\n                });\n                EventHandler.on(this._element, EVENT_MOUSELEAVE$1, function () {\n                  return _this9._maybeEnableCycle();\n                });\n              }\n              if (this._config.touch && Swipe.isSupported()) {\n                this._addTouchEventListeners();\n              }\n            }\n          }, {\n            key: \"_addTouchEventListeners\",\n            value: function _addTouchEventListeners() {\n              var _this10 = this;\n              var _iterator4 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)),\n                _step4;\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var img = _step4.value;\n                  EventHandler.on(img, EVENT_DRAG_START, function (event) {\n                    return event.preventDefault();\n                  });\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              var endCallBack = function endCallBack() {\n                if (_this10._config.pause !== 'hover') {\n                  return;\n                }\n\n                // If it's a touch-enabled device, mouseenter/leave are fired as\n                // part of the mouse compatibility events on first tap - the carousel\n                // would stop cycling until user tapped out of it;\n                // here, we listen for touchend, explicitly pause the carousel\n                // (as if it's the second time we tap on it, mouseenter compat event\n                // is NOT fired) and after a timeout (to allow for mouse compatibility\n                // events to fire) we explicitly restart cycling\n\n                _this10.pause();\n                if (_this10.touchTimeout) {\n                  clearTimeout(_this10.touchTimeout);\n                }\n                _this10.touchTimeout = setTimeout(function () {\n                  return _this10._maybeEnableCycle();\n                }, TOUCHEVENT_COMPAT_WAIT + _this10._config.interval);\n              };\n              var swipeConfig = {\n                leftCallback: function leftCallback() {\n                  return _this10._slide(_this10._directionToOrder(DIRECTION_LEFT));\n                },\n                rightCallback: function rightCallback() {\n                  return _this10._slide(_this10._directionToOrder(DIRECTION_RIGHT));\n                },\n                endCallback: endCallBack\n              };\n              this._swipeHelper = new Swipe(this._element, swipeConfig);\n            }\n          }, {\n            key: \"_keydown\",\n            value: function _keydown(event) {\n              if (/input|textarea/i.test(event.target.tagName)) {\n                return;\n              }\n              var direction = KEY_TO_DIRECTION[event.key];\n              if (direction) {\n                event.preventDefault();\n                this._slide(this._directionToOrder(direction));\n              }\n            }\n          }, {\n            key: \"_getItemIndex\",\n            value: function _getItemIndex(element) {\n              return this._getItems().indexOf(element);\n            }\n          }, {\n            key: \"_setActiveIndicatorElement\",\n            value: function _setActiveIndicatorElement(index) {\n              if (!this._indicatorsElement) {\n                return;\n              }\n              var activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);\n              activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n              activeIndicator.removeAttribute('aria-current');\n              var newActiveIndicator = SelectorEngine.findOne(\"[data-bs-slide-to=\\\"\".concat(index, \"\\\"]\"), this._indicatorsElement);\n              if (newActiveIndicator) {\n                newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);\n                newActiveIndicator.setAttribute('aria-current', 'true');\n              }\n            }\n          }, {\n            key: \"_updateInterval\",\n            value: function _updateInterval() {\n              var element = this._activeElement || this._getActive();\n              if (!element) {\n                return;\n              }\n              var elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10);\n              this._config.interval = elementInterval || this._config.defaultInterval;\n            }\n          }, {\n            key: \"_slide\",\n            value: function _slide(order) {\n              var _this11 = this;\n              var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n              if (this._isSliding) {\n                return;\n              }\n              var activeElement = this._getActive();\n              var isNext = order === ORDER_NEXT;\n              var nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);\n              if (nextElement === activeElement) {\n                return;\n              }\n              var nextElementIndex = this._getItemIndex(nextElement);\n              var triggerEvent = function triggerEvent(eventName) {\n                return EventHandler.trigger(_this11._element, eventName, {\n                  relatedTarget: nextElement,\n                  direction: _this11._orderToDirection(order),\n                  from: _this11._getItemIndex(activeElement),\n                  to: nextElementIndex\n                });\n              };\n              var slideEvent = triggerEvent(EVENT_SLIDE);\n              if (slideEvent.defaultPrevented) {\n                return;\n              }\n              if (!activeElement || !nextElement) {\n                // Some weirdness is happening, so we bail\n                // todo: change tests that use empty divs to avoid this check\n                return;\n              }\n              var isCycling = Boolean(this._interval);\n              this.pause();\n              this._isSliding = true;\n              this._setActiveIndicatorElement(nextElementIndex);\n              this._activeElement = nextElement;\n              var directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n              var orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n              nextElement.classList.add(orderClassName);\n              reflow(nextElement);\n              activeElement.classList.add(directionalClassName);\n              nextElement.classList.add(directionalClassName);\n              var completeCallBack = function completeCallBack() {\n                nextElement.classList.remove(directionalClassName, orderClassName);\n                nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n                activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n                _this11._isSliding = false;\n                triggerEvent(EVENT_SLID);\n              };\n              this._queueCallback(completeCallBack, activeElement, this._isAnimated());\n              if (isCycling) {\n                this.cycle();\n              }\n            }\n          }, {\n            key: \"_isAnimated\",\n            value: function _isAnimated() {\n              return this._element.classList.contains(CLASS_NAME_SLIDE);\n            }\n          }, {\n            key: \"_getActive\",\n            value: function _getActive() {\n              return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n            }\n          }, {\n            key: \"_getItems\",\n            value: function _getItems() {\n              return SelectorEngine.find(SELECTOR_ITEM, this._element);\n            }\n          }, {\n            key: \"_clearInterval\",\n            value: function _clearInterval() {\n              if (this._interval) {\n                clearInterval(this._interval);\n                this._interval = null;\n              }\n            }\n          }, {\n            key: \"_directionToOrder\",\n            value: function _directionToOrder(direction) {\n              if (isRTL()) {\n                return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n              }\n              return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n            }\n          }, {\n            key: \"_orderToDirection\",\n            value: function _orderToDirection(order) {\n              if (isRTL()) {\n                return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n              }\n              return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$b;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$b;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$c;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Carousel.getOrCreateInstance(this, config);\n                if (typeof config === 'number') {\n                  data.to(config);\n                  return;\n                }\n                if (typeof config === 'string') {\n                  if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n                    throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                  }\n                  data[config]();\n                }\n              });\n            }\n          }]);\n          return Carousel;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function (event) {\n          var target = SelectorEngine.getElementFromSelector(this);\n          if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n            return;\n          }\n          event.preventDefault();\n          var carousel = Carousel.getOrCreateInstance(target);\n          var slideIndex = this.getAttribute('data-bs-slide-to');\n          if (slideIndex) {\n            carousel.to(slideIndex);\n            carousel._maybeEnableCycle();\n            return;\n          }\n          if (Manipulator.getDataAttribute(this, 'slide') === 'next') {\n            carousel.next();\n            carousel._maybeEnableCycle();\n            return;\n          }\n          carousel.prev();\n          carousel._maybeEnableCycle();\n        });\n        EventHandler.on(window, EVENT_LOAD_DATA_API$3, function () {\n          var carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n          var _iterator5 = _createForOfIteratorHelper(carousels),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var carousel = _step5.value;\n              Carousel.getOrCreateInstance(carousel);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        });\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Carousel);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): collapse.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$b = 'collapse';\n        var DATA_KEY$7 = 'bs.collapse';\n        var EVENT_KEY$7 = \".\".concat(DATA_KEY$7);\n        var DATA_API_KEY$4 = '.data-api';\n        var EVENT_SHOW$6 = \"show\".concat(EVENT_KEY$7);\n        var EVENT_SHOWN$6 = \"shown\".concat(EVENT_KEY$7);\n        var EVENT_HIDE$6 = \"hide\".concat(EVENT_KEY$7);\n        var EVENT_HIDDEN$6 = \"hidden\".concat(EVENT_KEY$7);\n        var EVENT_CLICK_DATA_API$4 = \"click\".concat(EVENT_KEY$7).concat(DATA_API_KEY$4);\n        var CLASS_NAME_SHOW$7 = 'show';\n        var CLASS_NAME_COLLAPSE = 'collapse';\n        var CLASS_NAME_COLLAPSING = 'collapsing';\n        var CLASS_NAME_COLLAPSED = 'collapsed';\n        var CLASS_NAME_DEEPER_CHILDREN = \":scope .\".concat(CLASS_NAME_COLLAPSE, \" .\").concat(CLASS_NAME_COLLAPSE);\n        var CLASS_NAME_HORIZONTAL = 'collapse-horizontal';\n        var WIDTH = 'width';\n        var HEIGHT = 'height';\n        var SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing';\n        var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n        var Default$a = {\n          parent: null,\n          toggle: true\n        };\n        var DefaultType$a = {\n          parent: '(null|element)',\n          toggle: 'boolean'\n        };\n\n        /**\n         * Class definition\n         */\n        var Collapse = /*#__PURE__*/function (_BaseComponent4) {\n          _inherits(Collapse, _BaseComponent4);\n          var _super6 = _createSuper(Collapse);\n          function Collapse(element, config) {\n            var _this12;\n            _classCallCheck(this, Collapse);\n            _this12 = _super6.call(this, element, config);\n            _this12._isTransitioning = false;\n            _this12._triggerArray = [];\n            var toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n            var _iterator6 = _createForOfIteratorHelper(toggleList),\n              _step6;\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var elem = _step6.value;\n                var selector = SelectorEngine.getSelectorFromElement(elem);\n                var filterElement = SelectorEngine.find(selector).filter(function (foundElement) {\n                  return foundElement === _this12._element;\n                });\n                if (selector !== null && filterElement.length) {\n                  _this12._triggerArray.push(elem);\n                }\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n            _this12._initializeChildren();\n            if (!_this12._config.parent) {\n              _this12._addAriaAndCollapsedClass(_this12._triggerArray, _this12._isShown());\n            }\n            if (_this12._config.toggle) {\n              _this12.toggle();\n            }\n            return _this12;\n          }\n\n          // Getters\n          _createClass(Collapse, [{\n            key: \"toggle\",\n            value:\n            // Public\n            function toggle() {\n              if (this._isShown()) {\n                this.hide();\n              } else {\n                this.show();\n              }\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this13 = this;\n              if (this._isTransitioning || this._isShown()) {\n                return;\n              }\n              var activeChildren = [];\n\n              // find active children\n              if (this._config.parent) {\n                activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter(function (element) {\n                  return element !== _this13._element;\n                }).map(function (element) {\n                  return Collapse.getOrCreateInstance(element, {\n                    toggle: false\n                  });\n                });\n              }\n              if (activeChildren.length && activeChildren[0]._isTransitioning) {\n                return;\n              }\n              var startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);\n              if (startEvent.defaultPrevented) {\n                return;\n              }\n              var _iterator7 = _createForOfIteratorHelper(activeChildren),\n                _step7;\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  var activeInstance = _step7.value;\n                  activeInstance.hide();\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n              var dimension = this._getDimension();\n              this._element.classList.remove(CLASS_NAME_COLLAPSE);\n              this._element.classList.add(CLASS_NAME_COLLAPSING);\n              this._element.style[dimension] = 0;\n              this._addAriaAndCollapsedClass(this._triggerArray, true);\n              this._isTransitioning = true;\n              var complete = function complete() {\n                _this13._isTransitioning = false;\n                _this13._element.classList.remove(CLASS_NAME_COLLAPSING);\n                _this13._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n                _this13._element.style[dimension] = '';\n                EventHandler.trigger(_this13._element, EVENT_SHOWN$6);\n              };\n              var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n              var scrollSize = \"scroll\".concat(capitalizedDimension);\n              this._queueCallback(complete, this._element, true);\n              this._element.style[dimension] = \"\".concat(this._element[scrollSize], \"px\");\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              var _this14 = this;\n              if (this._isTransitioning || !this._isShown()) {\n                return;\n              }\n              var startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);\n              if (startEvent.defaultPrevented) {\n                return;\n              }\n              var dimension = this._getDimension();\n              this._element.style[dimension] = \"\".concat(this._element.getBoundingClientRect()[dimension], \"px\");\n              reflow(this._element);\n              this._element.classList.add(CLASS_NAME_COLLAPSING);\n              this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n              var _iterator8 = _createForOfIteratorHelper(this._triggerArray),\n                _step8;\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  var trigger = _step8.value;\n                  var element = SelectorEngine.getElementFromSelector(trigger);\n                  if (element && !this._isShown(element)) {\n                    this._addAriaAndCollapsedClass([trigger], false);\n                  }\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n              this._isTransitioning = true;\n              var complete = function complete() {\n                _this14._isTransitioning = false;\n                _this14._element.classList.remove(CLASS_NAME_COLLAPSING);\n                _this14._element.classList.add(CLASS_NAME_COLLAPSE);\n                EventHandler.trigger(_this14._element, EVENT_HIDDEN$6);\n              };\n              this._element.style[dimension] = '';\n              this._queueCallback(complete, this._element, true);\n            }\n          }, {\n            key: \"_isShown\",\n            value: function _isShown() {\n              var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._element;\n              return element.classList.contains(CLASS_NAME_SHOW$7);\n            }\n\n            // Private\n          }, {\n            key: \"_configAfterMerge\",\n            value: function _configAfterMerge(config) {\n              config.toggle = Boolean(config.toggle); // Coerce string values\n              config.parent = getElement(config.parent);\n              return config;\n            }\n          }, {\n            key: \"_getDimension\",\n            value: function _getDimension() {\n              return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n            }\n          }, {\n            key: \"_initializeChildren\",\n            value: function _initializeChildren() {\n              if (!this._config.parent) {\n                return;\n              }\n              var children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);\n              var _iterator9 = _createForOfIteratorHelper(children),\n                _step9;\n              try {\n                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                  var element = _step9.value;\n                  var selected = SelectorEngine.getElementFromSelector(element);\n                  if (selected) {\n                    this._addAriaAndCollapsedClass([element], this._isShown(selected));\n                  }\n                }\n              } catch (err) {\n                _iterator9.e(err);\n              } finally {\n                _iterator9.f();\n              }\n            }\n          }, {\n            key: \"_getFirstLevelChildren\",\n            value: function _getFirstLevelChildren(selector) {\n              var children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n              // remove children if greater depth\n              return SelectorEngine.find(selector, this._config.parent).filter(function (element) {\n                return !children.includes(element);\n              });\n            }\n          }, {\n            key: \"_addAriaAndCollapsedClass\",\n            value: function _addAriaAndCollapsedClass(triggerArray, isOpen) {\n              if (!triggerArray.length) {\n                return;\n              }\n              var _iterator10 = _createForOfIteratorHelper(triggerArray),\n                _step10;\n              try {\n                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                  var element = _step10.value;\n                  element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);\n                  element.setAttribute('aria-expanded', isOpen);\n                }\n              } catch (err) {\n                _iterator10.e(err);\n              } finally {\n                _iterator10.f();\n              }\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$a;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$a;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$b;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              var _config = {};\n              if (typeof config === 'string' && /show|hide/.test(config)) {\n                _config.toggle = false;\n              }\n              return this.each(function () {\n                var data = Collapse.getOrCreateInstance(this, _config);\n                if (typeof config === 'string') {\n                  if (typeof data[config] === 'undefined') {\n                    throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                  }\n                  data[config]();\n                }\n              });\n            }\n          }]);\n          return Collapse;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function (event) {\n          // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n          if (event.target.tagName === 'A' || event.delegateTarget && event.delegateTarget.tagName === 'A') {\n            event.preventDefault();\n          }\n          var _iterator11 = _createForOfIteratorHelper(SelectorEngine.getMultipleElementsFromSelector(this)),\n            _step11;\n          try {\n            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n              var element = _step11.value;\n              Collapse.getOrCreateInstance(element, {\n                toggle: false\n              }).toggle();\n            }\n          } catch (err) {\n            _iterator11.e(err);\n          } finally {\n            _iterator11.f();\n          }\n        });\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Collapse);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): dropdown.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$a = 'dropdown';\n        var DATA_KEY$6 = 'bs.dropdown';\n        var EVENT_KEY$6 = \".\".concat(DATA_KEY$6);\n        var DATA_API_KEY$3 = '.data-api';\n        var ESCAPE_KEY$2 = 'Escape';\n        var TAB_KEY$1 = 'Tab';\n        var ARROW_UP_KEY$1 = 'ArrowUp';\n        var ARROW_DOWN_KEY$1 = 'ArrowDown';\n        var RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n\n        var EVENT_HIDE$5 = \"hide\".concat(EVENT_KEY$6);\n        var EVENT_HIDDEN$5 = \"hidden\".concat(EVENT_KEY$6);\n        var EVENT_SHOW$5 = \"show\".concat(EVENT_KEY$6);\n        var EVENT_SHOWN$5 = \"shown\".concat(EVENT_KEY$6);\n        var EVENT_CLICK_DATA_API$3 = \"click\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n        var EVENT_KEYDOWN_DATA_API = \"keydown\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n        var EVENT_KEYUP_DATA_API = \"keyup\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n        var CLASS_NAME_SHOW$6 = 'show';\n        var CLASS_NAME_DROPUP = 'dropup';\n        var CLASS_NAME_DROPEND = 'dropend';\n        var CLASS_NAME_DROPSTART = 'dropstart';\n        var CLASS_NAME_DROPUP_CENTER = 'dropup-center';\n        var CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';\n        var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)';\n        var SELECTOR_DATA_TOGGLE_SHOWN = \"\".concat(SELECTOR_DATA_TOGGLE$3, \".\").concat(CLASS_NAME_SHOW$6);\n        var SELECTOR_MENU = '.dropdown-menu';\n        var SELECTOR_NAVBAR = '.navbar';\n        var SELECTOR_NAVBAR_NAV = '.navbar-nav';\n        var SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';\n        var PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';\n        var PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';\n        var PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';\n        var PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';\n        var PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';\n        var PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';\n        var PLACEMENT_TOPCENTER = 'top';\n        var PLACEMENT_BOTTOMCENTER = 'bottom';\n        var Default$9 = {\n          autoClose: true,\n          boundary: 'clippingParents',\n          display: 'dynamic',\n          offset: [0, 2],\n          popperConfig: null,\n          reference: 'toggle'\n        };\n        var DefaultType$9 = {\n          autoClose: '(boolean|string)',\n          boundary: '(string|element)',\n          display: 'string',\n          offset: '(array|string|function)',\n          popperConfig: '(null|object|function)',\n          reference: '(string|element|object)'\n        };\n\n        /**\n         * Class definition\n         */\n        var Dropdown = /*#__PURE__*/function (_BaseComponent5) {\n          _inherits(Dropdown, _BaseComponent5);\n          var _super7 = _createSuper(Dropdown);\n          function Dropdown(element, config) {\n            var _this15;\n            _classCallCheck(this, Dropdown);\n            _this15 = _super7.call(this, element, config);\n            _this15._popper = null;\n            _this15._parent = _this15._element.parentNode; // dropdown wrapper\n            // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n            _this15._menu = SelectorEngine.next(_this15._element, SELECTOR_MENU)[0] || SelectorEngine.prev(_this15._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, _this15._parent);\n            _this15._inNavbar = _this15._detectNavbar();\n            return _this15;\n          }\n\n          // Getters\n          _createClass(Dropdown, [{\n            key: \"toggle\",\n            value:\n            // Public\n            function toggle() {\n              return this._isShown() ? this.hide() : this.show();\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              if (isDisabled(this._element) || this._isShown()) {\n                return;\n              }\n              var relatedTarget = {\n                relatedTarget: this._element\n              };\n              var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);\n              if (showEvent.defaultPrevented) {\n                return;\n              }\n              this._createPopper();\n\n              // If this is a touch-enabled device we add extra\n              // empty mouseover listeners to the body's immediate children;\n              // only needed because of broken event delegation on iOS\n              // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n              if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {\n                var _ref4;\n                var _iterator12 = _createForOfIteratorHelper((_ref4 = []).concat.apply(_ref4, _toConsumableArray(document.body.children))),\n                  _step12;\n                try {\n                  for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                    var element = _step12.value;\n                    EventHandler.on(element, 'mouseover', noop);\n                  }\n                } catch (err) {\n                  _iterator12.e(err);\n                } finally {\n                  _iterator12.f();\n                }\n              }\n              this._element.focus();\n              this._element.setAttribute('aria-expanded', true);\n              this._menu.classList.add(CLASS_NAME_SHOW$6);\n              this._element.classList.add(CLASS_NAME_SHOW$6);\n              EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              if (isDisabled(this._element) || !this._isShown()) {\n                return;\n              }\n              var relatedTarget = {\n                relatedTarget: this._element\n              };\n              this._completeHide(relatedTarget);\n            }\n          }, {\n            key: \"dispose\",\n            value: function dispose() {\n              if (this._popper) {\n                this._popper.destroy();\n              }\n              _get(_getPrototypeOf(Dropdown.prototype), \"dispose\", this).call(this);\n            }\n          }, {\n            key: \"update\",\n            value: function update() {\n              this._inNavbar = this._detectNavbar();\n              if (this._popper) {\n                this._popper.update();\n              }\n            }\n\n            // Private\n          }, {\n            key: \"_completeHide\",\n            value: function _completeHide(relatedTarget) {\n              var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);\n              if (hideEvent.defaultPrevented) {\n                return;\n              }\n\n              // If this is a touch-enabled device we remove the extra\n              // empty mouseover listeners we added for iOS support\n              if ('ontouchstart' in document.documentElement) {\n                var _ref5;\n                var _iterator13 = _createForOfIteratorHelper((_ref5 = []).concat.apply(_ref5, _toConsumableArray(document.body.children))),\n                  _step13;\n                try {\n                  for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n                    var element = _step13.value;\n                    EventHandler.off(element, 'mouseover', noop);\n                  }\n                } catch (err) {\n                  _iterator13.e(err);\n                } finally {\n                  _iterator13.f();\n                }\n              }\n              if (this._popper) {\n                this._popper.destroy();\n              }\n              this._menu.classList.remove(CLASS_NAME_SHOW$6);\n              this._element.classList.remove(CLASS_NAME_SHOW$6);\n              this._element.setAttribute('aria-expanded', 'false');\n              Manipulator.removeDataAttribute(this._menu, 'popper');\n              EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);\n            }\n          }, {\n            key: \"_getConfig\",\n            value: function _getConfig(config) {\n              config = _get(_getPrototypeOf(Dropdown.prototype), \"_getConfig\", this).call(this, config);\n              if (_typeof(config.reference) === 'object' && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== 'function') {\n                // Popper virtual elements require a getBoundingClientRect method\n                throw new TypeError(\"\".concat(NAME$a.toUpperCase(), \": Option \\\"reference\\\" provided type \\\"object\\\" without a required \\\"getBoundingClientRect\\\" method.\"));\n              }\n              return config;\n            }\n          }, {\n            key: \"_createPopper\",\n            value: function _createPopper() {\n              if (typeof Popper__namespace === 'undefined') {\n                throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)');\n              }\n              var referenceElement = this._element;\n              if (this._config.reference === 'parent') {\n                referenceElement = this._parent;\n              } else if (isElement(this._config.reference)) {\n                referenceElement = getElement(this._config.reference);\n              } else if (_typeof(this._config.reference) === 'object') {\n                referenceElement = this._config.reference;\n              }\n              var popperConfig = this._getPopperConfig();\n              this._popper = Popper__namespace.createPopper(referenceElement, this._menu, popperConfig);\n            }\n          }, {\n            key: \"_isShown\",\n            value: function _isShown() {\n              return this._menu.classList.contains(CLASS_NAME_SHOW$6);\n            }\n          }, {\n            key: \"_getPlacement\",\n            value: function _getPlacement() {\n              var parentDropdown = this._parent;\n              if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n                return PLACEMENT_RIGHT;\n              }\n              if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n                return PLACEMENT_LEFT;\n              }\n              if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {\n                return PLACEMENT_TOPCENTER;\n              }\n              if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {\n                return PLACEMENT_BOTTOMCENTER;\n              }\n\n              // We need to trim the value because custom properties can also include spaces\n              var isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';\n              if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n                return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n              }\n              return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n            }\n          }, {\n            key: \"_detectNavbar\",\n            value: function _detectNavbar() {\n              return this._element.closest(SELECTOR_NAVBAR) !== null;\n            }\n          }, {\n            key: \"_getOffset\",\n            value: function _getOffset() {\n              var _this16 = this;\n              var offset = this._config.offset;\n              if (typeof offset === 'string') {\n                return offset.split(',').map(function (value) {\n                  return Number.parseInt(value, 10);\n                });\n              }\n              if (typeof offset === 'function') {\n                return function (popperData) {\n                  return offset(popperData, _this16._element);\n                };\n              }\n              return offset;\n            }\n          }, {\n            key: \"_getPopperConfig\",\n            value: function _getPopperConfig() {\n              var defaultBsPopperConfig = {\n                placement: this._getPlacement(),\n                modifiers: [{\n                  name: 'preventOverflow',\n                  options: {\n                    boundary: this._config.boundary\n                  }\n                }, {\n                  name: 'offset',\n                  options: {\n                    offset: this._getOffset()\n                  }\n                }]\n              };\n\n              // Disable Popper if we have a static display or Dropdown is in Navbar\n              if (this._inNavbar || this._config.display === 'static') {\n                Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // todo:v6 remove\n                defaultBsPopperConfig.modifiers = [{\n                  name: 'applyStyles',\n                  enabled: false\n                }];\n              }\n              return _objectSpread(_objectSpread({}, defaultBsPopperConfig), execute(this._config.popperConfig, [defaultBsPopperConfig]));\n            }\n          }, {\n            key: \"_selectMenuItem\",\n            value: function _selectMenuItem(_ref6) {\n              var key = _ref6.key,\n                target = _ref6.target;\n              var items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(function (element) {\n                return isVisible(element);\n              });\n              if (!items.length) {\n                return;\n              }\n\n              // if target isn't included in items (e.g. when expanding the dropdown)\n              // allow cycling to get the last item in case key equals ARROW_UP_KEY\n              getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$9;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$9;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$a;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Dropdown.getOrCreateInstance(this, config);\n                if (typeof config !== 'string') {\n                  return;\n                }\n                if (typeof data[config] === 'undefined') {\n                  throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                }\n                data[config]();\n              });\n            }\n          }, {\n            key: \"clearMenus\",\n            value: function clearMenus(event) {\n              if (event.button === RIGHT_MOUSE_BUTTON || event.type === 'keyup' && event.key !== TAB_KEY$1) {\n                return;\n              }\n              var openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);\n              var _iterator14 = _createForOfIteratorHelper(openToggles),\n                _step14;\n              try {\n                for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                  var toggle = _step14.value;\n                  var context = Dropdown.getInstance(toggle);\n                  if (!context || context._config.autoClose === false) {\n                    continue;\n                  }\n                  var composedPath = event.composedPath();\n                  var isMenuTarget = composedPath.includes(context._menu);\n                  if (composedPath.includes(context._element) || context._config.autoClose === 'inside' && !isMenuTarget || context._config.autoClose === 'outside' && isMenuTarget) {\n                    continue;\n                  }\n\n                  // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n                  if (context._menu.contains(event.target) && (event.type === 'keyup' && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n                    continue;\n                  }\n                  var relatedTarget = {\n                    relatedTarget: context._element\n                  };\n                  if (event.type === 'click') {\n                    relatedTarget.clickEvent = event;\n                  }\n                  context._completeHide(relatedTarget);\n                }\n              } catch (err) {\n                _iterator14.e(err);\n              } finally {\n                _iterator14.f();\n              }\n            }\n          }, {\n            key: \"dataApiKeydownHandler\",\n            value: function dataApiKeydownHandler(event) {\n              // If not an UP | DOWN | ESCAPE key => not a dropdown command\n              // If input/textarea && if key is other than ESCAPE => not a dropdown command\n\n              var isInput = /input|textarea/i.test(event.target.tagName);\n              var isEscapeEvent = event.key === ESCAPE_KEY$2;\n              var isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);\n              if (!isUpOrDownEvent && !isEscapeEvent) {\n                return;\n              }\n              if (isInput && !isEscapeEvent) {\n                return;\n              }\n              event.preventDefault();\n\n              // todo: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n              var getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);\n              var instance = Dropdown.getOrCreateInstance(getToggleButton);\n              if (isUpOrDownEvent) {\n                event.stopPropagation();\n                instance.show();\n                instance._selectMenuItem(event);\n                return;\n              }\n              if (instance._isShown()) {\n                // else is escape and we check if it is shown\n                event.stopPropagation();\n                instance.hide();\n                getToggleButton.focus();\n              }\n            }\n          }]);\n          return Dropdown;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\n        EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n        EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\n        EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n        EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function (event) {\n          event.preventDefault();\n          Dropdown.getOrCreateInstance(this).toggle();\n        });\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Dropdown);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/scrollBar.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top';\n        var SELECTOR_STICKY_CONTENT = '.sticky-top';\n        var PROPERTY_PADDING = 'padding-right';\n        var PROPERTY_MARGIN = 'margin-right';\n\n        /**\n         * Class definition\n         */\n        var ScrollBarHelper = /*#__PURE__*/function () {\n          function ScrollBarHelper() {\n            _classCallCheck(this, ScrollBarHelper);\n            this._element = document.body;\n          }\n\n          // Public\n          _createClass(ScrollBarHelper, [{\n            key: \"getWidth\",\n            value: function getWidth() {\n              // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n              var documentWidth = document.documentElement.clientWidth;\n              return Math.abs(window.innerWidth - documentWidth);\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              var width = this.getWidth();\n              this._disableOverFlow();\n              // give padding to element to balance the hidden scrollbar width\n              this._setElementAttributes(this._element, PROPERTY_PADDING, function (calculatedValue) {\n                return calculatedValue + width;\n              });\n              // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n              this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, function (calculatedValue) {\n                return calculatedValue + width;\n              });\n              this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, function (calculatedValue) {\n                return calculatedValue - width;\n              });\n            }\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              this._resetElementAttributes(this._element, 'overflow');\n              this._resetElementAttributes(this._element, PROPERTY_PADDING);\n              this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);\n              this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);\n            }\n          }, {\n            key: \"isOverflowing\",\n            value: function isOverflowing() {\n              return this.getWidth() > 0;\n            }\n\n            // Private\n          }, {\n            key: \"_disableOverFlow\",\n            value: function _disableOverFlow() {\n              this._saveInitialAttribute(this._element, 'overflow');\n              this._element.style.overflow = 'hidden';\n            }\n          }, {\n            key: \"_setElementAttributes\",\n            value: function _setElementAttributes(selector, styleProperty, callback) {\n              var _this17 = this;\n              var scrollbarWidth = this.getWidth();\n              var manipulationCallBack = function manipulationCallBack(element) {\n                if (element !== _this17._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n                  return;\n                }\n                _this17._saveInitialAttribute(element, styleProperty);\n                var calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);\n                element.style.setProperty(styleProperty, \"\".concat(callback(Number.parseFloat(calculatedValue)), \"px\"));\n              };\n              this._applyManipulationCallback(selector, manipulationCallBack);\n            }\n          }, {\n            key: \"_saveInitialAttribute\",\n            value: function _saveInitialAttribute(element, styleProperty) {\n              var actualValue = element.style.getPropertyValue(styleProperty);\n              if (actualValue) {\n                Manipulator.setDataAttribute(element, styleProperty, actualValue);\n              }\n            }\n          }, {\n            key: \"_resetElementAttributes\",\n            value: function _resetElementAttributes(selector, styleProperty) {\n              var manipulationCallBack = function manipulationCallBack(element) {\n                var value = Manipulator.getDataAttribute(element, styleProperty);\n                // We only want to remove the property if the value is `null`; the value can also be zero\n                if (value === null) {\n                  element.style.removeProperty(styleProperty);\n                  return;\n                }\n                Manipulator.removeDataAttribute(element, styleProperty);\n                element.style.setProperty(styleProperty, value);\n              };\n              this._applyManipulationCallback(selector, manipulationCallBack);\n            }\n          }, {\n            key: \"_applyManipulationCallback\",\n            value: function _applyManipulationCallback(selector, callBack) {\n              if (isElement(selector)) {\n                callBack(selector);\n                return;\n              }\n              var _iterator15 = _createForOfIteratorHelper(SelectorEngine.find(selector, this._element)),\n                _step15;\n              try {\n                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                  var sel = _step15.value;\n                  callBack(sel);\n                }\n              } catch (err) {\n                _iterator15.e(err);\n              } finally {\n                _iterator15.f();\n              }\n            }\n          }]);\n          return ScrollBarHelper;\n        }();\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/backdrop.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        /**\n         * Constants\n         */\n        var NAME$9 = 'backdrop';\n        var CLASS_NAME_FADE$4 = 'fade';\n        var CLASS_NAME_SHOW$5 = 'show';\n        var EVENT_MOUSEDOWN = \"mousedown.bs.\".concat(NAME$9);\n        var Default$8 = {\n          className: 'modal-backdrop',\n          clickCallback: null,\n          isAnimated: false,\n          isVisible: true,\n          // if false, we use the backdrop helper without adding any element to the dom\n          rootElement: 'body' // give the choice to place backdrop under different elements\n        };\n\n        var DefaultType$8 = {\n          className: 'string',\n          clickCallback: '(function|null)',\n          isAnimated: 'boolean',\n          isVisible: 'boolean',\n          rootElement: '(element|string)'\n        };\n\n        /**\n         * Class definition\n         */\n        var Backdrop = /*#__PURE__*/function (_Config3) {\n          _inherits(Backdrop, _Config3);\n          var _super8 = _createSuper(Backdrop);\n          function Backdrop(config) {\n            var _this18;\n            _classCallCheck(this, Backdrop);\n            _this18 = _super8.call(this);\n            _this18._config = _this18._getConfig(config);\n            _this18._isAppended = false;\n            _this18._element = null;\n            return _this18;\n          }\n\n          // Getters\n          _createClass(Backdrop, [{\n            key: \"show\",\n            value:\n            // Public\n            function show(callback) {\n              if (!this._config.isVisible) {\n                execute(callback);\n                return;\n              }\n              this._append();\n              var element = this._getElement();\n              if (this._config.isAnimated) {\n                reflow(element);\n              }\n              element.classList.add(CLASS_NAME_SHOW$5);\n              this._emulateAnimation(function () {\n                execute(callback);\n              });\n            }\n          }, {\n            key: \"hide\",\n            value: function hide(callback) {\n              var _this19 = this;\n              if (!this._config.isVisible) {\n                execute(callback);\n                return;\n              }\n              this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n              this._emulateAnimation(function () {\n                _this19.dispose();\n                execute(callback);\n              });\n            }\n          }, {\n            key: \"dispose\",\n            value: function dispose() {\n              if (!this._isAppended) {\n                return;\n              }\n              EventHandler.off(this._element, EVENT_MOUSEDOWN);\n              this._element.remove();\n              this._isAppended = false;\n            }\n\n            // Private\n          }, {\n            key: \"_getElement\",\n            value: function _getElement() {\n              if (!this._element) {\n                var backdrop = document.createElement('div');\n                backdrop.className = this._config.className;\n                if (this._config.isAnimated) {\n                  backdrop.classList.add(CLASS_NAME_FADE$4);\n                }\n                this._element = backdrop;\n              }\n              return this._element;\n            }\n          }, {\n            key: \"_configAfterMerge\",\n            value: function _configAfterMerge(config) {\n              // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n              config.rootElement = getElement(config.rootElement);\n              return config;\n            }\n          }, {\n            key: \"_append\",\n            value: function _append() {\n              var _this20 = this;\n              if (this._isAppended) {\n                return;\n              }\n              var element = this._getElement();\n              this._config.rootElement.append(element);\n              EventHandler.on(element, EVENT_MOUSEDOWN, function () {\n                execute(_this20._config.clickCallback);\n              });\n              this._isAppended = true;\n            }\n          }, {\n            key: \"_emulateAnimation\",\n            value: function _emulateAnimation(callback) {\n              executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n            }\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$8;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$8;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$9;\n            }\n          }]);\n          return Backdrop;\n        }(Config);\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/focustrap.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        /**\n         * Constants\n         */\n        var NAME$8 = 'focustrap';\n        var DATA_KEY$5 = 'bs.focustrap';\n        var EVENT_KEY$5 = \".\".concat(DATA_KEY$5);\n        var EVENT_FOCUSIN$2 = \"focusin\".concat(EVENT_KEY$5);\n        var EVENT_KEYDOWN_TAB = \"keydown.tab\".concat(EVENT_KEY$5);\n        var TAB_KEY = 'Tab';\n        var TAB_NAV_FORWARD = 'forward';\n        var TAB_NAV_BACKWARD = 'backward';\n        var Default$7 = {\n          autofocus: true,\n          trapElement: null // The element to trap focus inside of\n        };\n\n        var DefaultType$7 = {\n          autofocus: 'boolean',\n          trapElement: 'element'\n        };\n\n        /**\n         * Class definition\n         */\n        var FocusTrap = /*#__PURE__*/function (_Config4) {\n          _inherits(FocusTrap, _Config4);\n          var _super9 = _createSuper(FocusTrap);\n          function FocusTrap(config) {\n            var _this21;\n            _classCallCheck(this, FocusTrap);\n            _this21 = _super9.call(this);\n            _this21._config = _this21._getConfig(config);\n            _this21._isActive = false;\n            _this21._lastTabNavDirection = null;\n            return _this21;\n          }\n\n          // Getters\n          _createClass(FocusTrap, [{\n            key: \"activate\",\n            value:\n            // Public\n            function activate() {\n              var _this22 = this;\n              if (this._isActive) {\n                return;\n              }\n              if (this._config.autofocus) {\n                this._config.trapElement.focus();\n              }\n              EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop\n              EventHandler.on(document, EVENT_FOCUSIN$2, function (event) {\n                return _this22._handleFocusin(event);\n              });\n              EventHandler.on(document, EVENT_KEYDOWN_TAB, function (event) {\n                return _this22._handleKeydown(event);\n              });\n              this._isActive = true;\n            }\n          }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n              if (!this._isActive) {\n                return;\n              }\n              this._isActive = false;\n              EventHandler.off(document, EVENT_KEY$5);\n            }\n\n            // Private\n          }, {\n            key: \"_handleFocusin\",\n            value: function _handleFocusin(event) {\n              var trapElement = this._config.trapElement;\n              if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n                return;\n              }\n              var elements = SelectorEngine.focusableChildren(trapElement);\n              if (elements.length === 0) {\n                trapElement.focus();\n              } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n                elements[elements.length - 1].focus();\n              } else {\n                elements[0].focus();\n              }\n            }\n          }, {\n            key: \"_handleKeydown\",\n            value: function _handleKeydown(event) {\n              if (event.key !== TAB_KEY) {\n                return;\n              }\n              this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n            }\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$7;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$7;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$8;\n            }\n          }]);\n          return FocusTrap;\n        }(Config);\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): modal.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        /**\n         * Constants\n         */\n        var NAME$7 = 'modal';\n        var DATA_KEY$4 = 'bs.modal';\n        var EVENT_KEY$4 = \".\".concat(DATA_KEY$4);\n        var DATA_API_KEY$2 = '.data-api';\n        var ESCAPE_KEY$1 = 'Escape';\n        var EVENT_HIDE$4 = \"hide\".concat(EVENT_KEY$4);\n        var EVENT_HIDE_PREVENTED$1 = \"hidePrevented\".concat(EVENT_KEY$4);\n        var EVENT_HIDDEN$4 = \"hidden\".concat(EVENT_KEY$4);\n        var EVENT_SHOW$4 = \"show\".concat(EVENT_KEY$4);\n        var EVENT_SHOWN$4 = \"shown\".concat(EVENT_KEY$4);\n        var EVENT_RESIZE$1 = \"resize\".concat(EVENT_KEY$4);\n        var EVENT_CLICK_DISMISS = \"click.dismiss\".concat(EVENT_KEY$4);\n        var EVENT_MOUSEDOWN_DISMISS = \"mousedown.dismiss\".concat(EVENT_KEY$4);\n        var EVENT_KEYDOWN_DISMISS$1 = \"keydown.dismiss\".concat(EVENT_KEY$4);\n        var EVENT_CLICK_DATA_API$2 = \"click\".concat(EVENT_KEY$4).concat(DATA_API_KEY$2);\n        var CLASS_NAME_OPEN = 'modal-open';\n        var CLASS_NAME_FADE$3 = 'fade';\n        var CLASS_NAME_SHOW$4 = 'show';\n        var CLASS_NAME_STATIC = 'modal-static';\n        var OPEN_SELECTOR$1 = '.modal.show';\n        var SELECTOR_DIALOG = '.modal-dialog';\n        var SELECTOR_MODAL_BODY = '.modal-body';\n        var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n        var Default$6 = {\n          backdrop: true,\n          focus: true,\n          keyboard: true\n        };\n        var DefaultType$6 = {\n          backdrop: '(boolean|string)',\n          focus: 'boolean',\n          keyboard: 'boolean'\n        };\n\n        /**\n         * Class definition\n         */\n        var Modal = /*#__PURE__*/function (_BaseComponent6) {\n          _inherits(Modal, _BaseComponent6);\n          var _super10 = _createSuper(Modal);\n          function Modal(element, config) {\n            var _this23;\n            _classCallCheck(this, Modal);\n            _this23 = _super10.call(this, element, config);\n            _this23._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, _this23._element);\n            _this23._backdrop = _this23._initializeBackDrop();\n            _this23._focustrap = _this23._initializeFocusTrap();\n            _this23._isShown = false;\n            _this23._isTransitioning = false;\n            _this23._scrollBar = new ScrollBarHelper();\n            _this23._addEventListeners();\n            return _this23;\n          }\n\n          // Getters\n          _createClass(Modal, [{\n            key: \"toggle\",\n            value:\n            // Public\n            function toggle(relatedTarget) {\n              return this._isShown ? this.hide() : this.show(relatedTarget);\n            }\n          }, {\n            key: \"show\",\n            value: function show(relatedTarget) {\n              var _this24 = this;\n              if (this._isShown || this._isTransitioning) {\n                return;\n              }\n              var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {\n                relatedTarget: relatedTarget\n              });\n              if (showEvent.defaultPrevented) {\n                return;\n              }\n              this._isShown = true;\n              this._isTransitioning = true;\n              this._scrollBar.hide();\n              document.body.classList.add(CLASS_NAME_OPEN);\n              this._adjustDialog();\n              this._backdrop.show(function () {\n                return _this24._showElement(relatedTarget);\n              });\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              var _this25 = this;\n              if (!this._isShown || this._isTransitioning) {\n                return;\n              }\n              var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);\n              if (hideEvent.defaultPrevented) {\n                return;\n              }\n              this._isShown = false;\n              this._isTransitioning = true;\n              this._focustrap.deactivate();\n              this._element.classList.remove(CLASS_NAME_SHOW$4);\n              this._queueCallback(function () {\n                return _this25._hideModal();\n              }, this._element, this._isAnimated());\n            }\n          }, {\n            key: \"dispose\",\n            value: function dispose() {\n              for (var _i7 = 0, _arr2 = [window, this._dialog]; _i7 < _arr2.length; _i7++) {\n                var htmlElement = _arr2[_i7];\n                EventHandler.off(htmlElement, EVENT_KEY$4);\n              }\n              this._backdrop.dispose();\n              this._focustrap.deactivate();\n              _get(_getPrototypeOf(Modal.prototype), \"dispose\", this).call(this);\n            }\n          }, {\n            key: \"handleUpdate\",\n            value: function handleUpdate() {\n              this._adjustDialog();\n            }\n\n            // Private\n          }, {\n            key: \"_initializeBackDrop\",\n            value: function _initializeBackDrop() {\n              return new Backdrop({\n                isVisible: Boolean(this._config.backdrop),\n                // 'static' option will be translated to true, and booleans will keep their value,\n                isAnimated: this._isAnimated()\n              });\n            }\n          }, {\n            key: \"_initializeFocusTrap\",\n            value: function _initializeFocusTrap() {\n              return new FocusTrap({\n                trapElement: this._element\n              });\n            }\n          }, {\n            key: \"_showElement\",\n            value: function _showElement(relatedTarget) {\n              var _this26 = this;\n              // try to append dynamic modal\n              if (!document.body.contains(this._element)) {\n                document.body.append(this._element);\n              }\n              this._element.style.display = 'block';\n              this._element.removeAttribute('aria-hidden');\n              this._element.setAttribute('aria-modal', true);\n              this._element.setAttribute('role', 'dialog');\n              this._element.scrollTop = 0;\n              var modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n              if (modalBody) {\n                modalBody.scrollTop = 0;\n              }\n              reflow(this._element);\n              this._element.classList.add(CLASS_NAME_SHOW$4);\n              var transitionComplete = function transitionComplete() {\n                if (_this26._config.focus) {\n                  _this26._focustrap.activate();\n                }\n                _this26._isTransitioning = false;\n                EventHandler.trigger(_this26._element, EVENT_SHOWN$4, {\n                  relatedTarget: relatedTarget\n                });\n              };\n              this._queueCallback(transitionComplete, this._dialog, this._isAnimated());\n            }\n          }, {\n            key: \"_addEventListeners\",\n            value: function _addEventListeners() {\n              var _this27 = this;\n              EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, function (event) {\n                if (event.key !== ESCAPE_KEY$1) {\n                  return;\n                }\n                if (_this27._config.keyboard) {\n                  event.preventDefault();\n                  _this27.hide();\n                  return;\n                }\n                _this27._triggerBackdropTransition();\n              });\n              EventHandler.on(window, EVENT_RESIZE$1, function () {\n                if (_this27._isShown && !_this27._isTransitioning) {\n                  _this27._adjustDialog();\n                }\n              });\n              EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, function (event) {\n                // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks\n                EventHandler.one(_this27._element, EVENT_CLICK_DISMISS, function (event2) {\n                  if (_this27._element !== event.target || _this27._element !== event2.target) {\n                    return;\n                  }\n                  if (_this27._config.backdrop === 'static') {\n                    _this27._triggerBackdropTransition();\n                    return;\n                  }\n                  if (_this27._config.backdrop) {\n                    _this27.hide();\n                  }\n                });\n              });\n            }\n          }, {\n            key: \"_hideModal\",\n            value: function _hideModal() {\n              var _this28 = this;\n              this._element.style.display = 'none';\n              this._element.setAttribute('aria-hidden', true);\n              this._element.removeAttribute('aria-modal');\n              this._element.removeAttribute('role');\n              this._isTransitioning = false;\n              this._backdrop.hide(function () {\n                document.body.classList.remove(CLASS_NAME_OPEN);\n                _this28._resetAdjustments();\n                _this28._scrollBar.reset();\n                EventHandler.trigger(_this28._element, EVENT_HIDDEN$4);\n              });\n            }\n          }, {\n            key: \"_isAnimated\",\n            value: function _isAnimated() {\n              return this._element.classList.contains(CLASS_NAME_FADE$3);\n            }\n          }, {\n            key: \"_triggerBackdropTransition\",\n            value: function _triggerBackdropTransition() {\n              var _this29 = this;\n              var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);\n              if (hideEvent.defaultPrevented) {\n                return;\n              }\n              var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n              var initialOverflowY = this._element.style.overflowY;\n              // return if the following background transition hasn't yet completed\n              if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {\n                return;\n              }\n              if (!isModalOverflowing) {\n                this._element.style.overflowY = 'hidden';\n              }\n              this._element.classList.add(CLASS_NAME_STATIC);\n              this._queueCallback(function () {\n                _this29._element.classList.remove(CLASS_NAME_STATIC);\n                _this29._queueCallback(function () {\n                  _this29._element.style.overflowY = initialOverflowY;\n                }, _this29._dialog);\n              }, this._dialog);\n              this._element.focus();\n            }\n\n            /**\n             * The following methods are used to handle overflowing modals\n             */\n          }, {\n            key: \"_adjustDialog\",\n            value: function _adjustDialog() {\n              var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n              var scrollbarWidth = this._scrollBar.getWidth();\n              var isBodyOverflowing = scrollbarWidth > 0;\n              if (isBodyOverflowing && !isModalOverflowing) {\n                var property = isRTL() ? 'paddingLeft' : 'paddingRight';\n                this._element.style[property] = \"\".concat(scrollbarWidth, \"px\");\n              }\n              if (!isBodyOverflowing && isModalOverflowing) {\n                var _property = isRTL() ? 'paddingRight' : 'paddingLeft';\n                this._element.style[_property] = \"\".concat(scrollbarWidth, \"px\");\n              }\n            }\n          }, {\n            key: \"_resetAdjustments\",\n            value: function _resetAdjustments() {\n              this._element.style.paddingLeft = '';\n              this._element.style.paddingRight = '';\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$6;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$6;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$7;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config, relatedTarget) {\n              return this.each(function () {\n                var data = Modal.getOrCreateInstance(this, config);\n                if (typeof config !== 'string') {\n                  return;\n                }\n                if (typeof data[config] === 'undefined') {\n                  throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                }\n                data[config](relatedTarget);\n              });\n            }\n          }]);\n          return Modal;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function (event) {\n          var _this30 = this;\n          var target = SelectorEngine.getElementFromSelector(this);\n          if (['A', 'AREA'].includes(this.tagName)) {\n            event.preventDefault();\n          }\n          EventHandler.one(target, EVENT_SHOW$4, function (showEvent) {\n            if (showEvent.defaultPrevented) {\n              // only register focus restorer if modal will actually get shown\n              return;\n            }\n            EventHandler.one(target, EVENT_HIDDEN$4, function () {\n              if (isVisible(_this30)) {\n                _this30.focus();\n              }\n            });\n          });\n\n          // avoid conflict when clicking modal toggler while another one is open\n          var alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n          if (alreadyOpen) {\n            Modal.getInstance(alreadyOpen).hide();\n          }\n          var data = Modal.getOrCreateInstance(target);\n          data.toggle(this);\n        });\n        enableDismissTrigger(Modal);\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Modal);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): offcanvas.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$6 = 'offcanvas';\n        var DATA_KEY$3 = 'bs.offcanvas';\n        var EVENT_KEY$3 = \".\".concat(DATA_KEY$3);\n        var DATA_API_KEY$1 = '.data-api';\n        var EVENT_LOAD_DATA_API$2 = \"load\".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);\n        var ESCAPE_KEY = 'Escape';\n        var CLASS_NAME_SHOW$3 = 'show';\n        var CLASS_NAME_SHOWING$1 = 'showing';\n        var CLASS_NAME_HIDING = 'hiding';\n        var CLASS_NAME_BACKDROP = 'offcanvas-backdrop';\n        var OPEN_SELECTOR = '.offcanvas.show';\n        var EVENT_SHOW$3 = \"show\".concat(EVENT_KEY$3);\n        var EVENT_SHOWN$3 = \"shown\".concat(EVENT_KEY$3);\n        var EVENT_HIDE$3 = \"hide\".concat(EVENT_KEY$3);\n        var EVENT_HIDE_PREVENTED = \"hidePrevented\".concat(EVENT_KEY$3);\n        var EVENT_HIDDEN$3 = \"hidden\".concat(EVENT_KEY$3);\n        var EVENT_RESIZE = \"resize\".concat(EVENT_KEY$3);\n        var EVENT_CLICK_DATA_API$1 = \"click\".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);\n        var EVENT_KEYDOWN_DISMISS = \"keydown.dismiss\".concat(EVENT_KEY$3);\n        var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n        var Default$5 = {\n          backdrop: true,\n          keyboard: true,\n          scroll: false\n        };\n        var DefaultType$5 = {\n          backdrop: '(boolean|string)',\n          keyboard: 'boolean',\n          scroll: 'boolean'\n        };\n\n        /**\n         * Class definition\n         */\n        var Offcanvas = /*#__PURE__*/function (_BaseComponent7) {\n          _inherits(Offcanvas, _BaseComponent7);\n          var _super11 = _createSuper(Offcanvas);\n          function Offcanvas(element, config) {\n            var _this31;\n            _classCallCheck(this, Offcanvas);\n            _this31 = _super11.call(this, element, config);\n            _this31._isShown = false;\n            _this31._backdrop = _this31._initializeBackDrop();\n            _this31._focustrap = _this31._initializeFocusTrap();\n            _this31._addEventListeners();\n            return _this31;\n          }\n\n          // Getters\n          _createClass(Offcanvas, [{\n            key: \"toggle\",\n            value:\n            // Public\n            function toggle(relatedTarget) {\n              return this._isShown ? this.hide() : this.show(relatedTarget);\n            }\n          }, {\n            key: \"show\",\n            value: function show(relatedTarget) {\n              var _this32 = this;\n              if (this._isShown) {\n                return;\n              }\n              var showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n                relatedTarget: relatedTarget\n              });\n              if (showEvent.defaultPrevented) {\n                return;\n              }\n              this._isShown = true;\n              this._backdrop.show();\n              if (!this._config.scroll) {\n                new ScrollBarHelper().hide();\n              }\n              this._element.setAttribute('aria-modal', true);\n              this._element.setAttribute('role', 'dialog');\n              this._element.classList.add(CLASS_NAME_SHOWING$1);\n              var completeCallBack = function completeCallBack() {\n                if (!_this32._config.scroll || _this32._config.backdrop) {\n                  _this32._focustrap.activate();\n                }\n                _this32._element.classList.add(CLASS_NAME_SHOW$3);\n                _this32._element.classList.remove(CLASS_NAME_SHOWING$1);\n                EventHandler.trigger(_this32._element, EVENT_SHOWN$3, {\n                  relatedTarget: relatedTarget\n                });\n              };\n              this._queueCallback(completeCallBack, this._element, true);\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              var _this33 = this;\n              if (!this._isShown) {\n                return;\n              }\n              var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n              if (hideEvent.defaultPrevented) {\n                return;\n              }\n              this._focustrap.deactivate();\n              this._element.blur();\n              this._isShown = false;\n              this._element.classList.add(CLASS_NAME_HIDING);\n              this._backdrop.hide();\n              var completeCallback = function completeCallback() {\n                _this33._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);\n                _this33._element.removeAttribute('aria-modal');\n                _this33._element.removeAttribute('role');\n                if (!_this33._config.scroll) {\n                  new ScrollBarHelper().reset();\n                }\n                EventHandler.trigger(_this33._element, EVENT_HIDDEN$3);\n              };\n              this._queueCallback(completeCallback, this._element, true);\n            }\n          }, {\n            key: \"dispose\",\n            value: function dispose() {\n              this._backdrop.dispose();\n              this._focustrap.deactivate();\n              _get(_getPrototypeOf(Offcanvas.prototype), \"dispose\", this).call(this);\n            }\n\n            // Private\n          }, {\n            key: \"_initializeBackDrop\",\n            value: function _initializeBackDrop() {\n              var _this34 = this;\n              var clickCallback = function clickCallback() {\n                if (_this34._config.backdrop === 'static') {\n                  EventHandler.trigger(_this34._element, EVENT_HIDE_PREVENTED);\n                  return;\n                }\n                _this34.hide();\n              };\n\n              // 'static' option will be translated to true, and booleans will keep their value\n              var isVisible = Boolean(this._config.backdrop);\n              return new Backdrop({\n                className: CLASS_NAME_BACKDROP,\n                isVisible: isVisible,\n                isAnimated: true,\n                rootElement: this._element.parentNode,\n                clickCallback: isVisible ? clickCallback : null\n              });\n            }\n          }, {\n            key: \"_initializeFocusTrap\",\n            value: function _initializeFocusTrap() {\n              return new FocusTrap({\n                trapElement: this._element\n              });\n            }\n          }, {\n            key: \"_addEventListeners\",\n            value: function _addEventListeners() {\n              var _this35 = this;\n              EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, function (event) {\n                if (event.key !== ESCAPE_KEY) {\n                  return;\n                }\n                if (!_this35._config.keyboard) {\n                  EventHandler.trigger(_this35._element, EVENT_HIDE_PREVENTED);\n                  return;\n                }\n                _this35.hide();\n              });\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$5;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$5;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$6;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Offcanvas.getOrCreateInstance(this, config);\n                if (typeof config !== 'string') {\n                  return;\n                }\n                if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n                  throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                }\n                data[config](this);\n              });\n            }\n          }]);\n          return Offcanvas;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function (event) {\n          var _this36 = this;\n          var target = SelectorEngine.getElementFromSelector(this);\n          if (['A', 'AREA'].includes(this.tagName)) {\n            event.preventDefault();\n          }\n          if (isDisabled(this)) {\n            return;\n          }\n          EventHandler.one(target, EVENT_HIDDEN$3, function () {\n            // focus on trigger when it is closed\n            if (isVisible(_this36)) {\n              _this36.focus();\n            }\n          });\n\n          // avoid conflict when clicking a toggler of an offcanvas, while another is open\n          var alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n          if (alreadyOpen && alreadyOpen !== target) {\n            Offcanvas.getInstance(alreadyOpen).hide();\n          }\n          var data = Offcanvas.getOrCreateInstance(target);\n          data.toggle(this);\n        });\n        EventHandler.on(window, EVENT_LOAD_DATA_API$2, function () {\n          var _iterator16 = _createForOfIteratorHelper(SelectorEngine.find(OPEN_SELECTOR)),\n            _step16;\n          try {\n            for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n              var selector = _step16.value;\n              Offcanvas.getOrCreateInstance(selector).show();\n            }\n          } catch (err) {\n            _iterator16.e(err);\n          } finally {\n            _iterator16.f();\n          }\n        });\n        EventHandler.on(window, EVENT_RESIZE, function () {\n          var _iterator17 = _createForOfIteratorHelper(SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')),\n            _step17;\n          try {\n            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n              var element = _step17.value;\n              if (getComputedStyle(element).position !== 'fixed') {\n                Offcanvas.getOrCreateInstance(element).hide();\n              }\n            }\n          } catch (err) {\n            _iterator17.e(err);\n          } finally {\n            _iterator17.f();\n          }\n        });\n        enableDismissTrigger(Offcanvas);\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Offcanvas);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/sanitizer.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        var uriAttributes = new Set(['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href']);\n        var ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n\n        /**\n         * A pattern that recognizes a commonly useful subset of URLs that are safe.\n         *\n         * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n         */\n        var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;\n\n        /**\n         * A pattern that matches safe data URLs. Only matches image, video and audio types.\n         *\n         * Shout-out to Angular https://github.com/angular/angular/blob/12.2.x/packages/core/src/sanitization/url_sanitizer.ts\n         */\n        var DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i;\n        var allowedAttribute = function allowedAttribute(attribute, allowedAttributeList) {\n          var attributeName = attribute.nodeName.toLowerCase();\n          if (allowedAttributeList.includes(attributeName)) {\n            if (uriAttributes.has(attributeName)) {\n              return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));\n            }\n            return true;\n          }\n\n          // Check if a regular expression validates the attribute.\n          return allowedAttributeList.filter(function (attributeRegex) {\n            return attributeRegex instanceof RegExp;\n          }).some(function (regex) {\n            return regex.test(attributeName);\n          });\n        };\n        var DefaultAllowlist = {\n          // Global attributes allowed on any supplied element below.\n          '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n          a: ['target', 'href', 'title', 'rel'],\n          area: [],\n          b: [],\n          br: [],\n          col: [],\n          code: [],\n          div: [],\n          em: [],\n          hr: [],\n          h1: [],\n          h2: [],\n          h3: [],\n          h4: [],\n          h5: [],\n          h6: [],\n          i: [],\n          img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n          li: [],\n          ol: [],\n          p: [],\n          pre: [],\n          s: [],\n          small: [],\n          span: [],\n          sub: [],\n          sup: [],\n          strong: [],\n          u: [],\n          ul: []\n        };\n        function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n          var _ref7;\n          if (!unsafeHtml.length) {\n            return unsafeHtml;\n          }\n          if (sanitizeFunction && typeof sanitizeFunction === 'function') {\n            return sanitizeFunction(unsafeHtml);\n          }\n          var domParser = new window.DOMParser();\n          var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');\n          var elements = (_ref7 = []).concat.apply(_ref7, _toConsumableArray(createdDocument.body.querySelectorAll('*')));\n          var _iterator18 = _createForOfIteratorHelper(elements),\n            _step18;\n          try {\n            for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n              var _ref8;\n              var element = _step18.value;\n              var elementName = element.nodeName.toLowerCase();\n              if (!Object.keys(allowList).includes(elementName)) {\n                element.remove();\n                continue;\n              }\n              var attributeList = (_ref8 = []).concat.apply(_ref8, _toConsumableArray(element.attributes));\n              var allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);\n              var _iterator19 = _createForOfIteratorHelper(attributeList),\n                _step19;\n              try {\n                for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n                  var attribute = _step19.value;\n                  if (!allowedAttribute(attribute, allowedAttributes)) {\n                    element.removeAttribute(attribute.nodeName);\n                  }\n                }\n              } catch (err) {\n                _iterator19.e(err);\n              } finally {\n                _iterator19.f();\n              }\n            }\n          } catch (err) {\n            _iterator18.e(err);\n          } finally {\n            _iterator18.f();\n          }\n          return createdDocument.body.innerHTML;\n        }\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): util/template-factory.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$5 = 'TemplateFactory';\n        var Default$4 = {\n          allowList: DefaultAllowlist,\n          content: {},\n          // { selector : text ,  selector2 : text2 , }\n          extraClass: '',\n          html: false,\n          sanitize: true,\n          sanitizeFn: null,\n          template: '<div></div>'\n        };\n        var DefaultType$4 = {\n          allowList: 'object',\n          content: 'object',\n          extraClass: '(string|function)',\n          html: 'boolean',\n          sanitize: 'boolean',\n          sanitizeFn: '(null|function)',\n          template: 'string'\n        };\n        var DefaultContentType = {\n          entry: '(string|element|function|null)',\n          selector: '(string|element)'\n        };\n\n        /**\n         * Class definition\n         */\n        var TemplateFactory = /*#__PURE__*/function (_Config5) {\n          _inherits(TemplateFactory, _Config5);\n          var _super12 = _createSuper(TemplateFactory);\n          function TemplateFactory(config) {\n            var _this37;\n            _classCallCheck(this, TemplateFactory);\n            _this37 = _super12.call(this);\n            _this37._config = _this37._getConfig(config);\n            return _this37;\n          }\n\n          // Getters\n          _createClass(TemplateFactory, [{\n            key: \"getContent\",\n            value:\n            // Public\n            function getContent() {\n              var _this38 = this;\n              return Object.values(this._config.content).map(function (config) {\n                return _this38._resolvePossibleFunction(config);\n              }).filter(Boolean);\n            }\n          }, {\n            key: \"hasContent\",\n            value: function hasContent() {\n              return this.getContent().length > 0;\n            }\n          }, {\n            key: \"changeContent\",\n            value: function changeContent(content) {\n              this._checkContent(content);\n              this._config.content = _objectSpread(_objectSpread({}, this._config.content), content);\n              return this;\n            }\n          }, {\n            key: \"toHtml\",\n            value: function toHtml() {\n              var templateWrapper = document.createElement('div');\n              templateWrapper.innerHTML = this._maybeSanitize(this._config.template);\n              for (var _i8 = 0, _Object$entries5 = Object.entries(this._config.content); _i8 < _Object$entries5.length; _i8++) {\n                var _Object$entries5$_i = _slicedToArray(_Object$entries5[_i8], 2),\n                  selector = _Object$entries5$_i[0],\n                  text = _Object$entries5$_i[1];\n                this._setContent(templateWrapper, text, selector);\n              }\n              var template = templateWrapper.children[0];\n              var extraClass = this._resolvePossibleFunction(this._config.extraClass);\n              if (extraClass) {\n                var _template$classList;\n                (_template$classList = template.classList).add.apply(_template$classList, _toConsumableArray(extraClass.split(' ')));\n              }\n              return template;\n            }\n\n            // Private\n          }, {\n            key: \"_typeCheckConfig\",\n            value: function _typeCheckConfig(config) {\n              _get(_getPrototypeOf(TemplateFactory.prototype), \"_typeCheckConfig\", this).call(this, config);\n              this._checkContent(config.content);\n            }\n          }, {\n            key: \"_checkContent\",\n            value: function _checkContent(arg) {\n              for (var _i9 = 0, _Object$entries6 = Object.entries(arg); _i9 < _Object$entries6.length; _i9++) {\n                var _Object$entries6$_i = _slicedToArray(_Object$entries6[_i9], 2),\n                  selector = _Object$entries6$_i[0],\n                  content = _Object$entries6$_i[1];\n                _get(_getPrototypeOf(TemplateFactory.prototype), \"_typeCheckConfig\", this).call(this, {\n                  selector: selector,\n                  entry: content\n                }, DefaultContentType);\n              }\n            }\n          }, {\n            key: \"_setContent\",\n            value: function _setContent(template, content, selector) {\n              var templateElement = SelectorEngine.findOne(selector, template);\n              if (!templateElement) {\n                return;\n              }\n              content = this._resolvePossibleFunction(content);\n              if (!content) {\n                templateElement.remove();\n                return;\n              }\n              if (isElement(content)) {\n                this._putElementInTemplate(getElement(content), templateElement);\n                return;\n              }\n              if (this._config.html) {\n                templateElement.innerHTML = this._maybeSanitize(content);\n                return;\n              }\n              templateElement.textContent = content;\n            }\n          }, {\n            key: \"_maybeSanitize\",\n            value: function _maybeSanitize(arg) {\n              return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;\n            }\n          }, {\n            key: \"_resolvePossibleFunction\",\n            value: function _resolvePossibleFunction(arg) {\n              return execute(arg, [this]);\n            }\n          }, {\n            key: \"_putElementInTemplate\",\n            value: function _putElementInTemplate(element, templateElement) {\n              if (this._config.html) {\n                templateElement.innerHTML = '';\n                templateElement.append(element);\n                return;\n              }\n              templateElement.textContent = element.textContent;\n            }\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$4;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$4;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$5;\n            }\n          }]);\n          return TemplateFactory;\n        }(Config);\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): tooltip.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        /**\n         * Constants\n         */\n        var NAME$4 = 'tooltip';\n        var DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);\n        var CLASS_NAME_FADE$2 = 'fade';\n        var CLASS_NAME_MODAL = 'modal';\n        var CLASS_NAME_SHOW$2 = 'show';\n        var SELECTOR_TOOLTIP_INNER = '.tooltip-inner';\n        var SELECTOR_MODAL = \".\".concat(CLASS_NAME_MODAL);\n        var EVENT_MODAL_HIDE = 'hide.bs.modal';\n        var TRIGGER_HOVER = 'hover';\n        var TRIGGER_FOCUS = 'focus';\n        var TRIGGER_CLICK = 'click';\n        var TRIGGER_MANUAL = 'manual';\n        var EVENT_HIDE$2 = 'hide';\n        var EVENT_HIDDEN$2 = 'hidden';\n        var EVENT_SHOW$2 = 'show';\n        var EVENT_SHOWN$2 = 'shown';\n        var EVENT_INSERTED = 'inserted';\n        var EVENT_CLICK$1 = 'click';\n        var EVENT_FOCUSIN$1 = 'focusin';\n        var EVENT_FOCUSOUT$1 = 'focusout';\n        var EVENT_MOUSEENTER = 'mouseenter';\n        var EVENT_MOUSELEAVE = 'mouseleave';\n        var AttachmentMap = {\n          AUTO: 'auto',\n          TOP: 'top',\n          RIGHT: isRTL() ? 'left' : 'right',\n          BOTTOM: 'bottom',\n          LEFT: isRTL() ? 'right' : 'left'\n        };\n        var Default$3 = {\n          allowList: DefaultAllowlist,\n          animation: true,\n          boundary: 'clippingParents',\n          container: false,\n          customClass: '',\n          delay: 0,\n          fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n          html: false,\n          offset: [0, 0],\n          placement: 'top',\n          popperConfig: null,\n          sanitize: true,\n          sanitizeFn: null,\n          selector: false,\n          template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + '</div>',\n          title: '',\n          trigger: 'hover focus'\n        };\n        var DefaultType$3 = {\n          allowList: 'object',\n          animation: 'boolean',\n          boundary: '(string|element)',\n          container: '(string|element|boolean)',\n          customClass: '(string|function)',\n          delay: '(number|object)',\n          fallbackPlacements: 'array',\n          html: 'boolean',\n          offset: '(array|string|function)',\n          placement: '(string|function)',\n          popperConfig: '(null|object|function)',\n          sanitize: 'boolean',\n          sanitizeFn: '(null|function)',\n          selector: '(string|boolean)',\n          template: 'string',\n          title: '(string|element|function)',\n          trigger: 'string'\n        };\n\n        /**\n         * Class definition\n         */\n        var Tooltip = /*#__PURE__*/function (_BaseComponent8) {\n          _inherits(Tooltip, _BaseComponent8);\n          var _super13 = _createSuper(Tooltip);\n          function Tooltip(element, config) {\n            var _this39;\n            _classCallCheck(this, Tooltip);\n            if (typeof Popper__namespace === 'undefined') {\n              throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)');\n            }\n            _this39 = _super13.call(this, element, config);\n\n            // Private\n            _this39._isEnabled = true;\n            _this39._timeout = 0;\n            _this39._isHovered = null;\n            _this39._activeTrigger = {};\n            _this39._popper = null;\n            _this39._templateFactory = null;\n            _this39._newContent = null;\n\n            // Protected\n            _this39.tip = null;\n            _this39._setListeners();\n            if (!_this39._config.selector) {\n              _this39._fixTitle();\n            }\n            return _this39;\n          }\n\n          // Getters\n          _createClass(Tooltip, [{\n            key: \"enable\",\n            value:\n            // Public\n            function enable() {\n              this._isEnabled = true;\n            }\n          }, {\n            key: \"disable\",\n            value: function disable() {\n              this._isEnabled = false;\n            }\n          }, {\n            key: \"toggleEnabled\",\n            value: function toggleEnabled() {\n              this._isEnabled = !this._isEnabled;\n            }\n          }, {\n            key: \"toggle\",\n            value: function toggle() {\n              if (!this._isEnabled) {\n                return;\n              }\n              this._activeTrigger.click = !this._activeTrigger.click;\n              if (this._isShown()) {\n                this._leave();\n                return;\n              }\n              this._enter();\n            }\n          }, {\n            key: \"dispose\",\n            value: function dispose() {\n              clearTimeout(this._timeout);\n              EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n              if (this._element.getAttribute('data-bs-original-title')) {\n                this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'));\n              }\n              this._disposePopper();\n              _get(_getPrototypeOf(Tooltip.prototype), \"dispose\", this).call(this);\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this40 = this;\n              if (this._element.style.display === 'none') {\n                throw new Error('Please use show on visible elements');\n              }\n              if (!(this._isWithContent() && this._isEnabled)) {\n                return;\n              }\n              var showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));\n              var shadowRoot = findShadowRoot(this._element);\n              var isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);\n              if (showEvent.defaultPrevented || !isInTheDom) {\n                return;\n              }\n\n              // todo v6 remove this OR make it optional\n              this._disposePopper();\n              var tip = this._getTipElement();\n              this._element.setAttribute('aria-describedby', tip.getAttribute('id'));\n              var container = this._config.container;\n              if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n                container.append(tip);\n                EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));\n              }\n              this._popper = this._createPopper(tip);\n              tip.classList.add(CLASS_NAME_SHOW$2);\n\n              // If this is a touch-enabled device we add extra\n              // empty mouseover listeners to the body's immediate children;\n              // only needed because of broken event delegation on iOS\n              // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n              if ('ontouchstart' in document.documentElement) {\n                var _ref9;\n                var _iterator20 = _createForOfIteratorHelper((_ref9 = []).concat.apply(_ref9, _toConsumableArray(document.body.children))),\n                  _step20;\n                try {\n                  for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n                    var element = _step20.value;\n                    EventHandler.on(element, 'mouseover', noop);\n                  }\n                } catch (err) {\n                  _iterator20.e(err);\n                } finally {\n                  _iterator20.f();\n                }\n              }\n              var complete = function complete() {\n                EventHandler.trigger(_this40._element, _this40.constructor.eventName(EVENT_SHOWN$2));\n                if (_this40._isHovered === false) {\n                  _this40._leave();\n                }\n                _this40._isHovered = false;\n              };\n              this._queueCallback(complete, this.tip, this._isAnimated());\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              var _this41 = this;\n              if (!this._isShown()) {\n                return;\n              }\n              var hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));\n              if (hideEvent.defaultPrevented) {\n                return;\n              }\n              var tip = this._getTipElement();\n              tip.classList.remove(CLASS_NAME_SHOW$2);\n\n              // If this is a touch-enabled device we remove the extra\n              // empty mouseover listeners we added for iOS support\n              if ('ontouchstart' in document.documentElement) {\n                var _ref10;\n                var _iterator21 = _createForOfIteratorHelper((_ref10 = []).concat.apply(_ref10, _toConsumableArray(document.body.children))),\n                  _step21;\n                try {\n                  for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                    var element = _step21.value;\n                    EventHandler.off(element, 'mouseover', noop);\n                  }\n                } catch (err) {\n                  _iterator21.e(err);\n                } finally {\n                  _iterator21.f();\n                }\n              }\n              this._activeTrigger[TRIGGER_CLICK] = false;\n              this._activeTrigger[TRIGGER_FOCUS] = false;\n              this._activeTrigger[TRIGGER_HOVER] = false;\n              this._isHovered = null; // it is a trick to support manual triggering\n\n              var complete = function complete() {\n                if (_this41._isWithActiveTrigger()) {\n                  return;\n                }\n                if (!_this41._isHovered) {\n                  _this41._disposePopper();\n                }\n                _this41._element.removeAttribute('aria-describedby');\n                EventHandler.trigger(_this41._element, _this41.constructor.eventName(EVENT_HIDDEN$2));\n              };\n              this._queueCallback(complete, this.tip, this._isAnimated());\n            }\n          }, {\n            key: \"update\",\n            value: function update() {\n              if (this._popper) {\n                this._popper.update();\n              }\n            }\n\n            // Protected\n          }, {\n            key: \"_isWithContent\",\n            value: function _isWithContent() {\n              return Boolean(this._getTitle());\n            }\n          }, {\n            key: \"_getTipElement\",\n            value: function _getTipElement() {\n              if (!this.tip) {\n                this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());\n              }\n              return this.tip;\n            }\n          }, {\n            key: \"_createTipElement\",\n            value: function _createTipElement(content) {\n              var tip = this._getTemplateFactory(content).toHtml();\n\n              // todo: remove this check on v6\n              if (!tip) {\n                return null;\n              }\n              tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);\n              // todo: on v6 the following can be achieved with CSS only\n              tip.classList.add(\"bs-\".concat(this.constructor.NAME, \"-auto\"));\n              var tipId = getUID(this.constructor.NAME).toString();\n              tip.setAttribute('id', tipId);\n              if (this._isAnimated()) {\n                tip.classList.add(CLASS_NAME_FADE$2);\n              }\n              return tip;\n            }\n          }, {\n            key: \"setContent\",\n            value: function setContent(content) {\n              this._newContent = content;\n              if (this._isShown()) {\n                this._disposePopper();\n                this.show();\n              }\n            }\n          }, {\n            key: \"_getTemplateFactory\",\n            value: function _getTemplateFactory(content) {\n              if (this._templateFactory) {\n                this._templateFactory.changeContent(content);\n              } else {\n                this._templateFactory = new TemplateFactory(_objectSpread(_objectSpread({}, this._config), {}, {\n                  // the `content` var has to be after `this._config`\n                  // to override config.content in case of popover\n                  content: content,\n                  extraClass: this._resolvePossibleFunction(this._config.customClass)\n                }));\n              }\n              return this._templateFactory;\n            }\n          }, {\n            key: \"_getContentForTemplate\",\n            value: function _getContentForTemplate() {\n              return _defineProperty({}, SELECTOR_TOOLTIP_INNER, this._getTitle());\n            }\n          }, {\n            key: \"_getTitle\",\n            value: function _getTitle() {\n              return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title');\n            }\n\n            // Private\n          }, {\n            key: \"_initializeOnDelegatedTarget\",\n            value: function _initializeOnDelegatedTarget(event) {\n              return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n            }\n          }, {\n            key: \"_isAnimated\",\n            value: function _isAnimated() {\n              return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);\n            }\n          }, {\n            key: \"_isShown\",\n            value: function _isShown() {\n              return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);\n            }\n          }, {\n            key: \"_createPopper\",\n            value: function _createPopper(tip) {\n              var placement = execute(this._config.placement, [this, tip, this._element]);\n              var attachment = AttachmentMap[placement.toUpperCase()];\n              return Popper__namespace.createPopper(this._element, tip, this._getPopperConfig(attachment));\n            }\n          }, {\n            key: \"_getOffset\",\n            value: function _getOffset() {\n              var _this42 = this;\n              var offset = this._config.offset;\n              if (typeof offset === 'string') {\n                return offset.split(',').map(function (value) {\n                  return Number.parseInt(value, 10);\n                });\n              }\n              if (typeof offset === 'function') {\n                return function (popperData) {\n                  return offset(popperData, _this42._element);\n                };\n              }\n              return offset;\n            }\n          }, {\n            key: \"_resolvePossibleFunction\",\n            value: function _resolvePossibleFunction(arg) {\n              return execute(arg, [this._element]);\n            }\n          }, {\n            key: \"_getPopperConfig\",\n            value: function _getPopperConfig(attachment) {\n              var _this43 = this;\n              var defaultBsPopperConfig = {\n                placement: attachment,\n                modifiers: [{\n                  name: 'flip',\n                  options: {\n                    fallbackPlacements: this._config.fallbackPlacements\n                  }\n                }, {\n                  name: 'offset',\n                  options: {\n                    offset: this._getOffset()\n                  }\n                }, {\n                  name: 'preventOverflow',\n                  options: {\n                    boundary: this._config.boundary\n                  }\n                }, {\n                  name: 'arrow',\n                  options: {\n                    element: \".\".concat(this.constructor.NAME, \"-arrow\")\n                  }\n                }, {\n                  name: 'preSetPlacement',\n                  enabled: true,\n                  phase: 'beforeMain',\n                  fn: function fn(data) {\n                    // Pre-set Popper's placement attribute in order to read the arrow sizes properly.\n                    // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement\n                    _this43._getTipElement().setAttribute('data-popper-placement', data.state.placement);\n                  }\n                }]\n              };\n              return _objectSpread(_objectSpread({}, defaultBsPopperConfig), execute(this._config.popperConfig, [defaultBsPopperConfig]));\n            }\n          }, {\n            key: \"_setListeners\",\n            value: function _setListeners() {\n              var _this44 = this;\n              var triggers = this._config.trigger.split(' ');\n              var _iterator22 = _createForOfIteratorHelper(triggers),\n                _step22;\n              try {\n                for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n                  var trigger = _step22.value;\n                  if (trigger === 'click') {\n                    EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, function (event) {\n                      var context = _this44._initializeOnDelegatedTarget(event);\n                      context.toggle();\n                    });\n                  } else if (trigger !== TRIGGER_MANUAL) {\n                    var eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);\n                    var eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);\n                    EventHandler.on(this._element, eventIn, this._config.selector, function (event) {\n                      var context = _this44._initializeOnDelegatedTarget(event);\n                      context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n                      context._enter();\n                    });\n                    EventHandler.on(this._element, eventOut, this._config.selector, function (event) {\n                      var context = _this44._initializeOnDelegatedTarget(event);\n                      context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n                      context._leave();\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator22.e(err);\n              } finally {\n                _iterator22.f();\n              }\n              this._hideModalHandler = function () {\n                if (_this44._element) {\n                  _this44.hide();\n                }\n              };\n              EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n            }\n          }, {\n            key: \"_fixTitle\",\n            value: function _fixTitle() {\n              var title = this._element.getAttribute('title');\n              if (!title) {\n                return;\n              }\n              if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {\n                this._element.setAttribute('aria-label', title);\n              }\n              this._element.setAttribute('data-bs-original-title', title); // DO NOT USE IT. Is only for backwards compatibility\n              this._element.removeAttribute('title');\n            }\n          }, {\n            key: \"_enter\",\n            value: function _enter() {\n              var _this45 = this;\n              if (this._isShown() || this._isHovered) {\n                this._isHovered = true;\n                return;\n              }\n              this._isHovered = true;\n              this._setTimeout(function () {\n                if (_this45._isHovered) {\n                  _this45.show();\n                }\n              }, this._config.delay.show);\n            }\n          }, {\n            key: \"_leave\",\n            value: function _leave() {\n              var _this46 = this;\n              if (this._isWithActiveTrigger()) {\n                return;\n              }\n              this._isHovered = false;\n              this._setTimeout(function () {\n                if (!_this46._isHovered) {\n                  _this46.hide();\n                }\n              }, this._config.delay.hide);\n            }\n          }, {\n            key: \"_setTimeout\",\n            value: function _setTimeout(handler, timeout) {\n              clearTimeout(this._timeout);\n              this._timeout = setTimeout(handler, timeout);\n            }\n          }, {\n            key: \"_isWithActiveTrigger\",\n            value: function _isWithActiveTrigger() {\n              return Object.values(this._activeTrigger).includes(true);\n            }\n          }, {\n            key: \"_getConfig\",\n            value: function _getConfig(config) {\n              var dataAttributes = Manipulator.getDataAttributes(this._element);\n              for (var _i10 = 0, _Object$keys2 = Object.keys(dataAttributes); _i10 < _Object$keys2.length; _i10++) {\n                var dataAttribute = _Object$keys2[_i10];\n                if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {\n                  delete dataAttributes[dataAttribute];\n                }\n              }\n              config = _objectSpread(_objectSpread({}, dataAttributes), _typeof(config) === 'object' && config ? config : {});\n              config = this._mergeConfigObj(config);\n              config = this._configAfterMerge(config);\n              this._typeCheckConfig(config);\n              return config;\n            }\n          }, {\n            key: \"_configAfterMerge\",\n            value: function _configAfterMerge(config) {\n              config.container = config.container === false ? document.body : getElement(config.container);\n              if (typeof config.delay === 'number') {\n                config.delay = {\n                  show: config.delay,\n                  hide: config.delay\n                };\n              }\n              if (typeof config.title === 'number') {\n                config.title = config.title.toString();\n              }\n              if (typeof config.content === 'number') {\n                config.content = config.content.toString();\n              }\n              return config;\n            }\n          }, {\n            key: \"_getDelegateConfig\",\n            value: function _getDelegateConfig() {\n              var config = {};\n              for (var _i11 = 0, _Object$entries7 = Object.entries(this._config); _i11 < _Object$entries7.length; _i11++) {\n                var _Object$entries7$_i = _slicedToArray(_Object$entries7[_i11], 2),\n                  key = _Object$entries7$_i[0],\n                  value = _Object$entries7$_i[1];\n                if (this.constructor.Default[key] !== value) {\n                  config[key] = value;\n                }\n              }\n              config.selector = false;\n              config.trigger = 'manual';\n\n              // In the future can be replaced with:\n              // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n              // `Object.fromEntries(keysWithDifferentValues)`\n              return config;\n            }\n          }, {\n            key: \"_disposePopper\",\n            value: function _disposePopper() {\n              if (this._popper) {\n                this._popper.destroy();\n                this._popper = null;\n              }\n              if (this.tip) {\n                this.tip.remove();\n                this.tip = null;\n              }\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$3;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$3;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$4;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Tooltip.getOrCreateInstance(this, config);\n                if (typeof config !== 'string') {\n                  return;\n                }\n                if (typeof data[config] === 'undefined') {\n                  throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                }\n                data[config]();\n              });\n            }\n          }]);\n          return Tooltip;\n        }(BaseComponent);\n        /**\n         * jQuery\n         */\n        defineJQueryPlugin(Tooltip);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): popover.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$3 = 'popover';\n        var SELECTOR_TITLE = '.popover-header';\n        var SELECTOR_CONTENT = '.popover-body';\n        var Default$2 = _objectSpread(_objectSpread({}, Tooltip.Default), {}, {\n          content: '',\n          offset: [0, 8],\n          placement: 'right',\n          template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + '</div>',\n          trigger: 'click'\n        });\n        var DefaultType$2 = _objectSpread(_objectSpread({}, Tooltip.DefaultType), {}, {\n          content: '(null|string|element|function)'\n        });\n\n        /**\n         * Class definition\n         */\n        var Popover = /*#__PURE__*/function (_Tooltip) {\n          _inherits(Popover, _Tooltip);\n          var _super14 = _createSuper(Popover);\n          function Popover() {\n            _classCallCheck(this, Popover);\n            return _super14.apply(this, arguments);\n          }\n          _createClass(Popover, [{\n            key: \"_isWithContent\",\n            value:\n            // Overrides\n            function _isWithContent() {\n              return this._getTitle() || this._getContent();\n            }\n\n            // Private\n          }, {\n            key: \"_getContentForTemplate\",\n            value: function _getContentForTemplate() {\n              var _ref12;\n              return _ref12 = {}, _defineProperty(_ref12, SELECTOR_TITLE, this._getTitle()), _defineProperty(_ref12, SELECTOR_CONTENT, this._getContent()), _ref12;\n            }\n          }, {\n            key: \"_getContent\",\n            value: function _getContent() {\n              return this._resolvePossibleFunction(this._config.content);\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get:\n            // Getters\n            function get() {\n              return Default$2;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$2;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$3;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Popover.getOrCreateInstance(this, config);\n                if (typeof config !== 'string') {\n                  return;\n                }\n                if (typeof data[config] === 'undefined') {\n                  throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                }\n                data[config]();\n              });\n            }\n          }]);\n          return Popover;\n        }(Tooltip);\n        /**\n         * jQuery\n         */\n        defineJQueryPlugin(Popover);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): scrollspy.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$2 = 'scrollspy';\n        var DATA_KEY$2 = 'bs.scrollspy';\n        var EVENT_KEY$2 = \".\".concat(DATA_KEY$2);\n        var DATA_API_KEY = '.data-api';\n        var EVENT_ACTIVATE = \"activate\".concat(EVENT_KEY$2);\n        var EVENT_CLICK = \"click\".concat(EVENT_KEY$2);\n        var EVENT_LOAD_DATA_API$1 = \"load\".concat(EVENT_KEY$2).concat(DATA_API_KEY);\n        var CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item';\n        var CLASS_NAME_ACTIVE$1 = 'active';\n        var SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\n        var SELECTOR_TARGET_LINKS = '[href]';\n        var SELECTOR_NAV_LIST_GROUP = '.nav, .list-group';\n        var SELECTOR_NAV_LINKS = '.nav-link';\n        var SELECTOR_NAV_ITEMS = '.nav-item';\n        var SELECTOR_LIST_ITEMS = '.list-group-item';\n        var SELECTOR_LINK_ITEMS = \"\".concat(SELECTOR_NAV_LINKS, \", \").concat(SELECTOR_NAV_ITEMS, \" > \").concat(SELECTOR_NAV_LINKS, \", \").concat(SELECTOR_LIST_ITEMS);\n        var SELECTOR_DROPDOWN = '.dropdown';\n        var SELECTOR_DROPDOWN_TOGGLE$1 = '.dropdown-toggle';\n        var Default$1 = {\n          offset: null,\n          // TODO: v6 @deprecated, keep it for backwards compatibility reasons\n          rootMargin: '0px 0px -25%',\n          smoothScroll: false,\n          target: null,\n          threshold: [0.1, 0.5, 1]\n        };\n        var DefaultType$1 = {\n          offset: '(number|null)',\n          // TODO v6 @deprecated, keep it for backwards compatibility reasons\n          rootMargin: 'string',\n          smoothScroll: 'boolean',\n          target: 'element',\n          threshold: 'array'\n        };\n\n        /**\n         * Class definition\n         */\n        var ScrollSpy = /*#__PURE__*/function (_BaseComponent9) {\n          _inherits(ScrollSpy, _BaseComponent9);\n          var _super15 = _createSuper(ScrollSpy);\n          function ScrollSpy(element, config) {\n            var _this47;\n            _classCallCheck(this, ScrollSpy);\n            _this47 = _super15.call(this, element, config);\n\n            // this._element is the observablesContainer and config.target the menu links wrapper\n            _this47._targetLinks = new Map();\n            _this47._observableSections = new Map();\n            _this47._rootElement = getComputedStyle(_this47._element).overflowY === 'visible' ? null : _this47._element;\n            _this47._activeTarget = null;\n            _this47._observer = null;\n            _this47._previousScrollData = {\n              visibleEntryTop: 0,\n              parentScrollTop: 0\n            };\n            _this47.refresh(); // initialize\n            return _this47;\n          }\n\n          // Getters\n          _createClass(ScrollSpy, [{\n            key: \"refresh\",\n            value:\n            // Public\n            function refresh() {\n              this._initializeTargetsAndObservables();\n              this._maybeEnableSmoothScroll();\n              if (this._observer) {\n                this._observer.disconnect();\n              } else {\n                this._observer = this._getNewObserver();\n              }\n              var _iterator23 = _createForOfIteratorHelper(this._observableSections.values()),\n                _step23;\n              try {\n                for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n                  var section = _step23.value;\n                  this._observer.observe(section);\n                }\n              } catch (err) {\n                _iterator23.e(err);\n              } finally {\n                _iterator23.f();\n              }\n            }\n          }, {\n            key: \"dispose\",\n            value: function dispose() {\n              this._observer.disconnect();\n              _get(_getPrototypeOf(ScrollSpy.prototype), \"dispose\", this).call(this);\n            }\n\n            // Private\n          }, {\n            key: \"_configAfterMerge\",\n            value: function _configAfterMerge(config) {\n              // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case\n              config.target = getElement(config.target) || document.body;\n\n              // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only\n              config.rootMargin = config.offset ? \"\".concat(config.offset, \"px 0px -30%\") : config.rootMargin;\n              if (typeof config.threshold === 'string') {\n                config.threshold = config.threshold.split(',').map(function (value) {\n                  return Number.parseFloat(value);\n                });\n              }\n              return config;\n            }\n          }, {\n            key: \"_maybeEnableSmoothScroll\",\n            value: function _maybeEnableSmoothScroll() {\n              var _this48 = this;\n              if (!this._config.smoothScroll) {\n                return;\n              }\n\n              // unregister any previous listeners\n              EventHandler.off(this._config.target, EVENT_CLICK);\n              EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, function (event) {\n                var observableSection = _this48._observableSections.get(event.target.hash);\n                if (observableSection) {\n                  event.preventDefault();\n                  var root = _this48._rootElement || window;\n                  var height = observableSection.offsetTop - _this48._element.offsetTop;\n                  if (root.scrollTo) {\n                    root.scrollTo({\n                      top: height,\n                      behavior: 'smooth'\n                    });\n                    return;\n                  }\n\n                  // Chrome 60 doesn't support `scrollTo`\n                  root.scrollTop = height;\n                }\n              });\n            }\n          }, {\n            key: \"_getNewObserver\",\n            value: function _getNewObserver() {\n              var _this49 = this;\n              var options = {\n                root: this._rootElement,\n                threshold: this._config.threshold,\n                rootMargin: this._config.rootMargin\n              };\n              return new IntersectionObserver(function (entries) {\n                return _this49._observerCallback(entries);\n              }, options);\n            }\n\n            // The logic of selection\n          }, {\n            key: \"_observerCallback\",\n            value: function _observerCallback(entries) {\n              var _this50 = this;\n              var targetElement = function targetElement(entry) {\n                return _this50._targetLinks.get(\"#\".concat(entry.target.id));\n              };\n              var activate = function activate(entry) {\n                _this50._previousScrollData.visibleEntryTop = entry.target.offsetTop;\n                _this50._process(targetElement(entry));\n              };\n              var parentScrollTop = (this._rootElement || document.documentElement).scrollTop;\n              var userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;\n              this._previousScrollData.parentScrollTop = parentScrollTop;\n              var _iterator24 = _createForOfIteratorHelper(entries),\n                _step24;\n              try {\n                for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n                  var entry = _step24.value;\n                  if (!entry.isIntersecting) {\n                    this._activeTarget = null;\n                    this._clearActiveClass(targetElement(entry));\n                    continue;\n                  }\n                  var entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;\n                  // if we are scrolling down, pick the bigger offsetTop\n                  if (userScrollsDown && entryIsLowerThanPrevious) {\n                    activate(entry);\n                    // if parent isn't scrolled, let's keep the first visible item, breaking the iteration\n                    if (!parentScrollTop) {\n                      return;\n                    }\n                    continue;\n                  }\n\n                  // if we are scrolling up, pick the smallest offsetTop\n                  if (!userScrollsDown && !entryIsLowerThanPrevious) {\n                    activate(entry);\n                  }\n                }\n              } catch (err) {\n                _iterator24.e(err);\n              } finally {\n                _iterator24.f();\n              }\n            }\n          }, {\n            key: \"_initializeTargetsAndObservables\",\n            value: function _initializeTargetsAndObservables() {\n              this._targetLinks = new Map();\n              this._observableSections = new Map();\n              var targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);\n              var _iterator25 = _createForOfIteratorHelper(targetLinks),\n                _step25;\n              try {\n                for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n                  var anchor = _step25.value;\n                  // ensure that the anchor has an id and is not disabled\n                  if (!anchor.hash || isDisabled(anchor)) {\n                    continue;\n                  }\n                  var observableSection = SelectorEngine.findOne(anchor.hash, this._element);\n\n                  // ensure that the observableSection exists & is visible\n                  if (isVisible(observableSection)) {\n                    this._targetLinks.set(anchor.hash, anchor);\n                    this._observableSections.set(anchor.hash, observableSection);\n                  }\n                }\n              } catch (err) {\n                _iterator25.e(err);\n              } finally {\n                _iterator25.f();\n              }\n            }\n          }, {\n            key: \"_process\",\n            value: function _process(target) {\n              if (this._activeTarget === target) {\n                return;\n              }\n              this._clearActiveClass(this._config.target);\n              this._activeTarget = target;\n              target.classList.add(CLASS_NAME_ACTIVE$1);\n              this._activateParents(target);\n              EventHandler.trigger(this._element, EVENT_ACTIVATE, {\n                relatedTarget: target\n              });\n            }\n          }, {\n            key: \"_activateParents\",\n            value: function _activateParents(target) {\n              // Activate dropdown parents\n              if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n                SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);\n                return;\n              }\n              var _iterator26 = _createForOfIteratorHelper(SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)),\n                _step26;\n              try {\n                for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n                  var listGroup = _step26.value;\n                  // Set triggered links parents as active\n                  // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n                  var _iterator27 = _createForOfIteratorHelper(SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)),\n                    _step27;\n                  try {\n                    for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n                      var item = _step27.value;\n                      item.classList.add(CLASS_NAME_ACTIVE$1);\n                    }\n                  } catch (err) {\n                    _iterator27.e(err);\n                  } finally {\n                    _iterator27.f();\n                  }\n                }\n              } catch (err) {\n                _iterator26.e(err);\n              } finally {\n                _iterator26.f();\n              }\n            }\n          }, {\n            key: \"_clearActiveClass\",\n            value: function _clearActiveClass(parent) {\n              parent.classList.remove(CLASS_NAME_ACTIVE$1);\n              var activeNodes = SelectorEngine.find(\"\".concat(SELECTOR_TARGET_LINKS, \".\").concat(CLASS_NAME_ACTIVE$1), parent);\n              var _iterator28 = _createForOfIteratorHelper(activeNodes),\n                _step28;\n              try {\n                for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n                  var node = _step28.value;\n                  node.classList.remove(CLASS_NAME_ACTIVE$1);\n                }\n              } catch (err) {\n                _iterator28.e(err);\n              } finally {\n                _iterator28.f();\n              }\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default$1;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType$1;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME$2;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = ScrollSpy.getOrCreateInstance(this, config);\n                if (typeof config !== 'string') {\n                  return;\n                }\n                if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n                  throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                }\n                data[config]();\n              });\n            }\n          }]);\n          return ScrollSpy;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        EventHandler.on(window, EVENT_LOAD_DATA_API$1, function () {\n          var _iterator29 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_DATA_SPY)),\n            _step29;\n          try {\n            for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n              var spy = _step29.value;\n              ScrollSpy.getOrCreateInstance(spy);\n            }\n          } catch (err) {\n            _iterator29.e(err);\n          } finally {\n            _iterator29.f();\n          }\n        });\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(ScrollSpy);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): tab.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME$1 = 'tab';\n        var DATA_KEY$1 = 'bs.tab';\n        var EVENT_KEY$1 = \".\".concat(DATA_KEY$1);\n        var EVENT_HIDE$1 = \"hide\".concat(EVENT_KEY$1);\n        var EVENT_HIDDEN$1 = \"hidden\".concat(EVENT_KEY$1);\n        var EVENT_SHOW$1 = \"show\".concat(EVENT_KEY$1);\n        var EVENT_SHOWN$1 = \"shown\".concat(EVENT_KEY$1);\n        var EVENT_CLICK_DATA_API = \"click\".concat(EVENT_KEY$1);\n        var EVENT_KEYDOWN = \"keydown\".concat(EVENT_KEY$1);\n        var EVENT_LOAD_DATA_API = \"load\".concat(EVENT_KEY$1);\n        var ARROW_LEFT_KEY = 'ArrowLeft';\n        var ARROW_RIGHT_KEY = 'ArrowRight';\n        var ARROW_UP_KEY = 'ArrowUp';\n        var ARROW_DOWN_KEY = 'ArrowDown';\n        var CLASS_NAME_ACTIVE = 'active';\n        var CLASS_NAME_FADE$1 = 'fade';\n        var CLASS_NAME_SHOW$1 = 'show';\n        var CLASS_DROPDOWN = 'dropdown';\n        var SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle';\n        var SELECTOR_DROPDOWN_MENU = '.dropdown-menu';\n        var NOT_SELECTOR_DROPDOWN_TOGGLE = ':not(.dropdown-toggle)';\n        var SELECTOR_TAB_PANEL = '.list-group, .nav, [role=\"tablist\"]';\n        var SELECTOR_OUTER = '.nav-item, .list-group-item';\n        var SELECTOR_INNER = \".nav-link\".concat(NOT_SELECTOR_DROPDOWN_TOGGLE, \", .list-group-item\").concat(NOT_SELECTOR_DROPDOWN_TOGGLE, \", [role=\\\"tab\\\"]\").concat(NOT_SELECTOR_DROPDOWN_TOGGLE);\n        var SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]'; // todo:v6: could be only `tab`\n        var SELECTOR_INNER_ELEM = \"\".concat(SELECTOR_INNER, \", \").concat(SELECTOR_DATA_TOGGLE);\n        var SELECTOR_DATA_TOGGLE_ACTIVE = \".\".concat(CLASS_NAME_ACTIVE, \"[data-bs-toggle=\\\"tab\\\"], .\").concat(CLASS_NAME_ACTIVE, \"[data-bs-toggle=\\\"pill\\\"], .\").concat(CLASS_NAME_ACTIVE, \"[data-bs-toggle=\\\"list\\\"]\");\n\n        /**\n         * Class definition\n         */\n        var Tab = /*#__PURE__*/function (_BaseComponent10) {\n          _inherits(Tab, _BaseComponent10);\n          var _super16 = _createSuper(Tab);\n          function Tab(element) {\n            var _this51;\n            _classCallCheck(this, Tab);\n            _this51 = _super16.call(this, element);\n            _this51._parent = _this51._element.closest(SELECTOR_TAB_PANEL);\n            if (!_this51._parent) {\n              return _possibleConstructorReturn(_this51);\n              // todo: should Throw exception on v6\n              // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)\n            }\n\n            // Set up initial aria attributes\n            _this51._setInitialAttributes(_this51._parent, _this51._getChildren());\n            EventHandler.on(_this51._element, EVENT_KEYDOWN, function (event) {\n              return _this51._keydown(event);\n            });\n            return _this51;\n          }\n\n          // Getters\n          _createClass(Tab, [{\n            key: \"show\",\n            value:\n            // Public\n            function show() {\n              // Shows this elem and deactivate the active sibling if exists\n              var innerElem = this._element;\n              if (this._elemIsActive(innerElem)) {\n                return;\n              }\n\n              // Search for active tab on same parent to deactivate it\n              var active = this._getActiveElem();\n              var hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {\n                relatedTarget: innerElem\n              }) : null;\n              var showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {\n                relatedTarget: active\n              });\n              if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {\n                return;\n              }\n              this._deactivate(active, innerElem);\n              this._activate(innerElem, active);\n            }\n\n            // Private\n          }, {\n            key: \"_activate\",\n            value: function _activate(element, relatedElem) {\n              var _this52 = this;\n              if (!element) {\n                return;\n              }\n              element.classList.add(CLASS_NAME_ACTIVE);\n              this._activate(SelectorEngine.getElementFromSelector(element)); // Search and activate/show the proper section\n\n              var complete = function complete() {\n                if (element.getAttribute('role') !== 'tab') {\n                  element.classList.add(CLASS_NAME_SHOW$1);\n                  return;\n                }\n                element.removeAttribute('tabindex');\n                element.setAttribute('aria-selected', true);\n                _this52._toggleDropDown(element, true);\n                EventHandler.trigger(element, EVENT_SHOWN$1, {\n                  relatedTarget: relatedElem\n                });\n              };\n              this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n            }\n          }, {\n            key: \"_deactivate\",\n            value: function _deactivate(element, relatedElem) {\n              var _this53 = this;\n              if (!element) {\n                return;\n              }\n              element.classList.remove(CLASS_NAME_ACTIVE);\n              element.blur();\n              this._deactivate(SelectorEngine.getElementFromSelector(element)); // Search and deactivate the shown section too\n\n              var complete = function complete() {\n                if (element.getAttribute('role') !== 'tab') {\n                  element.classList.remove(CLASS_NAME_SHOW$1);\n                  return;\n                }\n                element.setAttribute('aria-selected', false);\n                element.setAttribute('tabindex', '-1');\n                _this53._toggleDropDown(element, false);\n                EventHandler.trigger(element, EVENT_HIDDEN$1, {\n                  relatedTarget: relatedElem\n                });\n              };\n              this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n            }\n          }, {\n            key: \"_keydown\",\n            value: function _keydown(event) {\n              if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)) {\n                return;\n              }\n              event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page\n              event.preventDefault();\n              var isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);\n              var nextActiveElement = getNextActiveElement(this._getChildren().filter(function (element) {\n                return !isDisabled(element);\n              }), event.target, isNext, true);\n              if (nextActiveElement) {\n                nextActiveElement.focus({\n                  preventScroll: true\n                });\n                Tab.getOrCreateInstance(nextActiveElement).show();\n              }\n            }\n          }, {\n            key: \"_getChildren\",\n            value: function _getChildren() {\n              // collection of inner elements\n              return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);\n            }\n          }, {\n            key: \"_getActiveElem\",\n            value: function _getActiveElem() {\n              var _this54 = this;\n              return this._getChildren().find(function (child) {\n                return _this54._elemIsActive(child);\n              }) || null;\n            }\n          }, {\n            key: \"_setInitialAttributes\",\n            value: function _setInitialAttributes(parent, children) {\n              this._setAttributeIfNotExists(parent, 'role', 'tablist');\n              var _iterator30 = _createForOfIteratorHelper(children),\n                _step30;\n              try {\n                for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n                  var child = _step30.value;\n                  this._setInitialAttributesOnChild(child);\n                }\n              } catch (err) {\n                _iterator30.e(err);\n              } finally {\n                _iterator30.f();\n              }\n            }\n          }, {\n            key: \"_setInitialAttributesOnChild\",\n            value: function _setInitialAttributesOnChild(child) {\n              child = this._getInnerElement(child);\n              var isActive = this._elemIsActive(child);\n              var outerElem = this._getOuterElement(child);\n              child.setAttribute('aria-selected', isActive);\n              if (outerElem !== child) {\n                this._setAttributeIfNotExists(outerElem, 'role', 'presentation');\n              }\n              if (!isActive) {\n                child.setAttribute('tabindex', '-1');\n              }\n              this._setAttributeIfNotExists(child, 'role', 'tab');\n\n              // set attributes to the related panel too\n              this._setInitialAttributesOnTargetPanel(child);\n            }\n          }, {\n            key: \"_setInitialAttributesOnTargetPanel\",\n            value: function _setInitialAttributesOnTargetPanel(child) {\n              var target = SelectorEngine.getElementFromSelector(child);\n              if (!target) {\n                return;\n              }\n              this._setAttributeIfNotExists(target, 'role', 'tabpanel');\n              if (child.id) {\n                this._setAttributeIfNotExists(target, 'aria-labelledby', \"#\".concat(child.id));\n              }\n            }\n          }, {\n            key: \"_toggleDropDown\",\n            value: function _toggleDropDown(element, open) {\n              var outerElem = this._getOuterElement(element);\n              if (!outerElem.classList.contains(CLASS_DROPDOWN)) {\n                return;\n              }\n              var toggle = function toggle(selector, className) {\n                var element = SelectorEngine.findOne(selector, outerElem);\n                if (element) {\n                  element.classList.toggle(className, open);\n                }\n              };\n              toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);\n              toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);\n              outerElem.setAttribute('aria-expanded', open);\n            }\n          }, {\n            key: \"_setAttributeIfNotExists\",\n            value: function _setAttributeIfNotExists(element, attribute, value) {\n              if (!element.hasAttribute(attribute)) {\n                element.setAttribute(attribute, value);\n              }\n            }\n          }, {\n            key: \"_elemIsActive\",\n            value: function _elemIsActive(elem) {\n              return elem.classList.contains(CLASS_NAME_ACTIVE);\n            }\n\n            // Try to get the inner element (usually the .nav-link)\n          }, {\n            key: \"_getInnerElement\",\n            value: function _getInnerElement(elem) {\n              return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);\n            }\n\n            // Try to get the outer element (usually the .nav-item)\n          }, {\n            key: \"_getOuterElement\",\n            value: function _getOuterElement(elem) {\n              return elem.closest(SELECTOR_OUTER) || elem;\n            }\n\n            // Static\n          }], [{\n            key: \"NAME\",\n            get: function get() {\n              return NAME$1;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Tab.getOrCreateInstance(this);\n                if (typeof config !== 'string') {\n                  return;\n                }\n                if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n                  throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                }\n                data[config]();\n              });\n            }\n          }]);\n          return Tab;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n          if (['A', 'AREA'].includes(this.tagName)) {\n            event.preventDefault();\n          }\n          if (isDisabled(this)) {\n            return;\n          }\n          Tab.getOrCreateInstance(this).show();\n        });\n\n        /**\n         * Initialize on focus\n         */\n        EventHandler.on(window, EVENT_LOAD_DATA_API, function () {\n          var _iterator31 = _createForOfIteratorHelper(SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)),\n            _step31;\n          try {\n            for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n              var element = _step31.value;\n              Tab.getOrCreateInstance(element);\n            }\n          } catch (err) {\n            _iterator31.e(err);\n          } finally {\n            _iterator31.f();\n          }\n        });\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Tab);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): toast.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n\n        /**\n         * Constants\n         */\n\n        var NAME = 'toast';\n        var DATA_KEY = 'bs.toast';\n        var EVENT_KEY = \".\".concat(DATA_KEY);\n        var EVENT_MOUSEOVER = \"mouseover\".concat(EVENT_KEY);\n        var EVENT_MOUSEOUT = \"mouseout\".concat(EVENT_KEY);\n        var EVENT_FOCUSIN = \"focusin\".concat(EVENT_KEY);\n        var EVENT_FOCUSOUT = \"focusout\".concat(EVENT_KEY);\n        var EVENT_HIDE = \"hide\".concat(EVENT_KEY);\n        var EVENT_HIDDEN = \"hidden\".concat(EVENT_KEY);\n        var EVENT_SHOW = \"show\".concat(EVENT_KEY);\n        var EVENT_SHOWN = \"shown\".concat(EVENT_KEY);\n        var CLASS_NAME_FADE = 'fade';\n        var CLASS_NAME_HIDE = 'hide'; // @deprecated - kept here only for backwards compatibility\n        var CLASS_NAME_SHOW = 'show';\n        var CLASS_NAME_SHOWING = 'showing';\n        var DefaultType = {\n          animation: 'boolean',\n          autohide: 'boolean',\n          delay: 'number'\n        };\n        var Default = {\n          animation: true,\n          autohide: true,\n          delay: 5000\n        };\n\n        /**\n         * Class definition\n         */\n        var Toast = /*#__PURE__*/function (_BaseComponent11) {\n          _inherits(Toast, _BaseComponent11);\n          var _super17 = _createSuper(Toast);\n          function Toast(element, config) {\n            var _this55;\n            _classCallCheck(this, Toast);\n            _this55 = _super17.call(this, element, config);\n            _this55._timeout = null;\n            _this55._hasMouseInteraction = false;\n            _this55._hasKeyboardInteraction = false;\n            _this55._setListeners();\n            return _this55;\n          }\n\n          // Getters\n          _createClass(Toast, [{\n            key: \"show\",\n            value:\n            // Public\n            function show() {\n              var _this56 = this;\n              var showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n              if (showEvent.defaultPrevented) {\n                return;\n              }\n              this._clearTimeout();\n              if (this._config.animation) {\n                this._element.classList.add(CLASS_NAME_FADE);\n              }\n              var complete = function complete() {\n                _this56._element.classList.remove(CLASS_NAME_SHOWING);\n                EventHandler.trigger(_this56._element, EVENT_SHOWN);\n                _this56._maybeScheduleHide();\n              };\n              this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n              reflow(this._element);\n              this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);\n              this._queueCallback(complete, this._element, this._config.animation);\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              var _this57 = this;\n              if (!this.isShown()) {\n                return;\n              }\n              var hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n              if (hideEvent.defaultPrevented) {\n                return;\n              }\n              var complete = function complete() {\n                _this57._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n                _this57._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);\n                EventHandler.trigger(_this57._element, EVENT_HIDDEN);\n              };\n              this._element.classList.add(CLASS_NAME_SHOWING);\n              this._queueCallback(complete, this._element, this._config.animation);\n            }\n          }, {\n            key: \"dispose\",\n            value: function dispose() {\n              this._clearTimeout();\n              if (this.isShown()) {\n                this._element.classList.remove(CLASS_NAME_SHOW);\n              }\n              _get(_getPrototypeOf(Toast.prototype), \"dispose\", this).call(this);\n            }\n          }, {\n            key: \"isShown\",\n            value: function isShown() {\n              return this._element.classList.contains(CLASS_NAME_SHOW);\n            }\n\n            // Private\n          }, {\n            key: \"_maybeScheduleHide\",\n            value: function _maybeScheduleHide() {\n              var _this58 = this;\n              if (!this._config.autohide) {\n                return;\n              }\n              if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n                return;\n              }\n              this._timeout = setTimeout(function () {\n                _this58.hide();\n              }, this._config.delay);\n            }\n          }, {\n            key: \"_onInteraction\",\n            value: function _onInteraction(event, isInteracting) {\n              switch (event.type) {\n                case 'mouseover':\n                case 'mouseout':\n                  {\n                    this._hasMouseInteraction = isInteracting;\n                    break;\n                  }\n                case 'focusin':\n                case 'focusout':\n                  {\n                    this._hasKeyboardInteraction = isInteracting;\n                    break;\n                  }\n              }\n              if (isInteracting) {\n                this._clearTimeout();\n                return;\n              }\n              var nextElement = event.relatedTarget;\n              if (this._element === nextElement || this._element.contains(nextElement)) {\n                return;\n              }\n              this._maybeScheduleHide();\n            }\n          }, {\n            key: \"_setListeners\",\n            value: function _setListeners() {\n              var _this59 = this;\n              EventHandler.on(this._element, EVENT_MOUSEOVER, function (event) {\n                return _this59._onInteraction(event, true);\n              });\n              EventHandler.on(this._element, EVENT_MOUSEOUT, function (event) {\n                return _this59._onInteraction(event, false);\n              });\n              EventHandler.on(this._element, EVENT_FOCUSIN, function (event) {\n                return _this59._onInteraction(event, true);\n              });\n              EventHandler.on(this._element, EVENT_FOCUSOUT, function (event) {\n                return _this59._onInteraction(event, false);\n              });\n            }\n          }, {\n            key: \"_clearTimeout\",\n            value: function _clearTimeout() {\n              clearTimeout(this._timeout);\n              this._timeout = null;\n            }\n\n            // Static\n          }], [{\n            key: \"Default\",\n            get: function get() {\n              return Default;\n            }\n          }, {\n            key: \"DefaultType\",\n            get: function get() {\n              return DefaultType;\n            }\n          }, {\n            key: \"NAME\",\n            get: function get() {\n              return NAME;\n            }\n          }, {\n            key: \"jQueryInterface\",\n            value: function jQueryInterface(config) {\n              return this.each(function () {\n                var data = Toast.getOrCreateInstance(this, config);\n                if (typeof config === 'string') {\n                  if (typeof data[config] === 'undefined') {\n                    throw new TypeError(\"No method named \\\"\".concat(config, \"\\\"\"));\n                  }\n                  data[config](this);\n                }\n              });\n            }\n          }]);\n          return Toast;\n        }(BaseComponent);\n        /**\n         * Data API implementation\n         */\n        enableDismissTrigger(Toast);\n\n        /**\n         * jQuery\n         */\n\n        defineJQueryPlugin(Toast);\n\n        /**\n         * --------------------------------------------------------------------------\n         * Bootstrap (v5.3.0-alpha1): index.umd.js\n         * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n         * --------------------------------------------------------------------------\n         */\n        var index_umd = {\n          Alert: Alert,\n          Button: Button,\n          Carousel: Carousel,\n          Collapse: Collapse,\n          Dropdown: Dropdown,\n          Modal: Modal,\n          Offcanvas: Offcanvas,\n          Popover: Popover,\n          ScrollSpy: ScrollSpy,\n          Tab: Tab,\n          Toast: Toast,\n          Tooltip: Tooltip\n        };\n        return index_umd;\n      });\n\n      /***/\n    },\n\n    /***/\"./resources/css/app.css\":\n    /*!*******************************!*\\\n      !*** ./resources/css/app.css ***!\n      \\*******************************/\n    /***/\n    function resourcesCssAppCss(__unused_webpack_module, __webpack_exports__, __nested_webpack_require_232671__) {\n      \"use strict\";\n\n      __nested_webpack_require_232671__.r(__webpack_exports__);\n      // extracted by mini-css-extract-plugin\n\n      /***/\n    },\n\n    /***/\"./resources/css/bootstrap.css\":\n    /*!*************************************!*\\\n      !*** ./resources/css/bootstrap.css ***!\n      \\*************************************/\n    /***/\n    function resourcesCssBootstrapCss(__unused_webpack_module, __webpack_exports__, __nested_webpack_require_233108__) {\n      \"use strict\";\n\n      __nested_webpack_require_233108__.r(__webpack_exports__);\n      // extracted by mini-css-extract-plugin\n\n      /***/\n    },\n\n    /***/\"./resources/css/custom.css\":\n    /*!**********************************!*\\\n      !*** ./resources/css/custom.css ***!\n      \\**********************************/\n    /***/\n    function resourcesCssCustomCss(__unused_webpack_module, __webpack_exports__, __nested_webpack_require_233530__) {\n      \"use strict\";\n\n      __nested_webpack_require_233530__.r(__webpack_exports__);\n      // extracted by mini-css-extract-plugin\n\n      /***/\n    }\n\n    /******/\n  };\n  /************************************************************************/\n  /******/ // The module cache\n  /******/\n  var __webpack_module_cache__ = {};\n  /******/\n  /******/ // The require function\n  /******/\n  function __nested_webpack_require_233923__(moduleId) {\n    /******/ // Check if module is in cache\n    /******/var cachedModule = __webpack_module_cache__[moduleId];\n    /******/\n    if (cachedModule !== undefined) {\n      /******/return cachedModule.exports;\n      /******/\n    }\n    /******/ // Create a new module (and put it into the cache)\n    /******/\n    var module = __webpack_module_cache__[moduleId] = {\n      /******/ // no module.id needed\n      /******/ // no module.loaded needed\n      /******/exports: {}\n      /******/\n    };\n    /******/\n    /******/ // Execute the module function\n    /******/\n    __webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_233923__);\n    /******/\n    /******/ // Return the exports of the module\n    /******/\n    return module.exports;\n    /******/\n  }\n  /******/\n  /******/ // expose the modules object (__webpack_modules__)\n  /******/\n  __nested_webpack_require_233923__.m = __webpack_modules__;\n  /******/\n  /************************************************************************/\n  /******/ /* webpack/runtime/chunk loaded */\n  /******/\n  (function () {\n    /******/var deferred = [];\n    /******/\n    __nested_webpack_require_233923__.O = function (result, chunkIds, fn, priority) {\n      /******/if (chunkIds) {\n        /******/priority = priority || 0;\n        /******/\n        for (var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n        /******/\n        deferred[i] = [chunkIds, fn, priority];\n        /******/\n        return;\n        /******/\n      }\n      /******/\n      var notFulfilled = Infinity;\n      /******/\n      for (var i = 0; i < deferred.length; i++) {\n        /******/var _deferred$i = _slicedToArray2(deferred[i], 3),\n          chunkIds = _deferred$i[0],\n          fn = _deferred$i[1],\n          priority = _deferred$i[2];\n        /******/\n        var fulfilled = true;\n        /******/\n        for (var j = 0; j < chunkIds.length; j++) {\n          /******/if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__nested_webpack_require_233923__.O).every(function (key) {\n            return __nested_webpack_require_233923__.O[key](chunkIds[j]);\n          })) {\n            /******/chunkIds.splice(j--, 1);\n            /******/\n          } else {\n            /******/fulfilled = false;\n            /******/\n            if (priority < notFulfilled) notFulfilled = priority;\n            /******/\n          }\n          /******/\n        }\n        /******/\n        if (fulfilled) {\n          /******/deferred.splice(i--, 1);\n          /******/\n          var r = fn();\n          /******/\n          if (r !== undefined) result = r;\n          /******/\n        }\n        /******/\n      }\n      /******/\n      return result;\n      /******/\n    };\n    /******/\n  })();\n  /******/\n  /******/ /* webpack/runtime/hasOwnProperty shorthand */\n  /******/\n  (function () {\n    /******/__nested_webpack_require_233923__.o = function (obj, prop) {\n      return Object.prototype.hasOwnProperty.call(obj, prop);\n    };\n    /******/\n  })();\n  /******/\n  /******/ /* webpack/runtime/make namespace object */\n  /******/\n  (function () {\n    /******/ // define __esModule on exports\n    /******/__nested_webpack_require_233923__.r = function (exports) {\n      /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n        /******/Object.defineProperty(exports, Symbol.toStringTag, {\n          value: 'Module'\n        });\n        /******/\n      }\n      /******/\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      /******/\n    };\n    /******/\n  })();\n  /******/\n  /******/ /* webpack/runtime/jsonp chunk loading */\n  /******/\n  (function () {\n    /******/ // no baseURI\n    /******/\n    /******/ // object to store loaded and loading chunks\n    /******/ // undefined = chunk not loaded, null = chunk preloaded/prefetched\n    /******/ // [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n    /******/var installedChunks = {\n      /******/\"/js/app\": 0,\n      /******/\"css/custom\": 0,\n      /******/\"css/bootstrap\": 0,\n      /******/\"css/app\": 0\n      /******/\n    };\n    /******/\n    /******/ // no chunk on demand loading\n    /******/\n    /******/ // no prefetching\n    /******/\n    /******/ // no preloaded\n    /******/\n    /******/ // no HMR\n    /******/\n    /******/ // no HMR manifest\n    /******/\n    /******/\n    __nested_webpack_require_233923__.O.j = function (chunkId) {\n      return installedChunks[chunkId] === 0;\n    };\n    /******/\n    /******/ // install a JSONP callback for chunk loading\n    /******/\n    var webpackJsonpCallback = function webpackJsonpCallback(parentChunkLoadingFunction, data) {\n      /******/var _data = _slicedToArray2(data, 3),\n        chunkIds = _data[0],\n        moreModules = _data[1],\n        runtime = _data[2];\n      /******/ // add \"moreModules\" to the modules object,\n      /******/ // then flag all \"chunkIds\" as loaded and fire callback\n      /******/\n      var moduleId,\n        chunkId,\n        i = 0;\n      /******/\n      if (chunkIds.some(function (id) {\n        return installedChunks[id] !== 0;\n      })) {\n        /******/for (moduleId in moreModules) {\n          /******/if (__nested_webpack_require_233923__.o(moreModules, moduleId)) {\n            /******/__nested_webpack_require_233923__.m[moduleId] = moreModules[moduleId];\n            /******/\n          }\n          /******/\n        }\n        /******/\n        if (runtime) var result = runtime(__nested_webpack_require_233923__);\n        /******/\n      }\n      /******/\n      if (parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n      /******/\n      for (; i < chunkIds.length; i++) {\n        /******/chunkId = chunkIds[i];\n        /******/\n        if (__nested_webpack_require_233923__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n          /******/installedChunks[chunkId][0]();\n          /******/\n        }\n        /******/\n        installedChunks[chunkId] = 0;\n        /******/\n      }\n      /******/\n      return __nested_webpack_require_233923__.O(result);\n      /******/\n    };\n    /******/\n    /******/\n    var chunkLoadingGlobal = self[\"webpackChunk\"] = self[\"webpackChunk\"] || [];\n    /******/\n    chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n    /******/\n    chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n    /******/\n  })();\n  /******/\n  /************************************************************************/\n  /******/\n  /******/ // startup\n  /******/ // Load entry module and return exports\n  /******/ // This entry module depends on other loaded chunks and execution need to be delayed\n  /******/\n  __nested_webpack_require_233923__.O(undefined, [\"css/custom\", \"css/bootstrap\", \"css/app\"], function () {\n    return __nested_webpack_require_233923__(\"./resources/js/app.js\");\n  });\n  /******/\n  __nested_webpack_require_233923__.O(undefined, [\"css/custom\", \"css/bootstrap\", \"css/app\"], function () {\n    return __nested_webpack_require_233923__(\"./resources/css/app.css\");\n  });\n  /******/\n  __nested_webpack_require_233923__.O(undefined, [\"css/custom\", \"css/bootstrap\", \"css/app\"], function () {\n    return __nested_webpack_require_233923__(\"./resources/css/bootstrap.css\");\n  });\n  /******/\n  var __webpack_exports__ = __nested_webpack_require_233923__.O(undefined, [\"css/custom\", \"css/bootstrap\", \"css/app\"], function () {\n    return __nested_webpack_require_233923__(\"./resources/css/custom.css\");\n  });\n  /******/\n  __webpack_exports__ = __nested_webpack_require_233923__.O(__webpack_exports__);\n  /******/\n  /******/\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLENBQUNULG1CQUFtQixDQUFDO0VBQzFFO0VBQ0E7QUFBUyxDQUFDLEdBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwLmpzP2NlZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIFwiLi9yZXNvdXJjZXMvanMvYXBwLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3Jlc291cmNlcy9qcy9hcHAuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYm9vdHN0cmFwICovIFwiLi9yZXNvdXJjZXMvanMvYm9vdHN0cmFwLmpzXCIpO1xuJChkb2N1bWVudCkucmVhZHkoKTtcbmNvbnNvbGUubG9nKFwib2JqZWN0XCIpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3Jlc291cmNlcy9qcy9ib290c3RyYXAuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcmVzb3VyY2VzL2pzL2Jvb3RzdHJhcC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fO2Z1bmN0aW9uIF9nZXQoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0LmdldCkgeyBfZ2V0ID0gUmVmbGVjdC5nZXQuYmluZCgpOyB9IGVsc2UgeyBfZ2V0ID0gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyB2YXIgYmFzZSA9IF9zdXBlclByb3BCYXNlKHRhcmdldCwgcHJvcGVydHkpOyBpZiAoIWJhc2UpIHJldHVybjsgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTsgaWYgKGRlc2MuZ2V0KSB7IHJldHVybiBkZXNjLmdldC5jYWxsKGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogcmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBfZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHsgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH1cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gZWxzZSBpZiAoY2FsbCAhPT0gdm9pZCAwKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfVxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IG51bGwgPT0gYXJyID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAobnVsbCAhPSBfaSkgeyB2YXIgX3MsIF9lLCBfeCwgX3IsIF9hcnIgPSBbXSwgX24gPSAhMCwgX2QgPSAhMTsgdHJ5IHsgaWYgKF94ID0gKF9pID0gX2kuY2FsbChhcnIpKS5uZXh0LCAwID09PSBpKSB7IGlmIChPYmplY3QoX2kpICE9PSBfaSkgcmV0dXJuOyBfbiA9ICExOyB9IGVsc2UgZm9yICg7ICEoX24gPSAoX3MgPSBfeC5jYWxsKF9pKSkuZG9uZSkgJiYgKF9hcnIucHVzaChfcy52YWx1ZSksIF9hcnIubGVuZ3RoICE9PSBpKTsgX24gPSAhMCk7IH0gY2F0Y2ggKGVycikgeyBfZCA9ICEwLCBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBudWxsICE9IF9pW1wicmV0dXJuXCJdICYmIChfciA9IF9pW1wicmV0dXJuXCJdKCksIE9iamVjdChfcikgIT09IF9yKSkgcmV0dXJuOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gfVxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKCFpdCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyB0aHJvdyBfZTI7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IGl0LmNhbGwobyk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTMpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UzOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBpdGVyW1N5bWJvbC5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyW1wiQEBpdGVyYXRvclwiXSAhPSBudWxsKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTsgfVxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsgcmV0dXJuIGFycjI7IH1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpOyByZXR1cm4gX3R5cGVvZihrZXkpID09PSBcInN5bWJvbFwiID8ga2V5IDogU3RyaW5nKGtleSk7IH1cbmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgXCJkZWZhdWx0XCIpOyBpZiAoX3R5cGVvZihyZXMpICE9PSBcIm9iamVjdFwiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7IH0gcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH1cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbi8qIVxuICAqIEJvb3RzdHJhcCB2NS4zLjAtYWxwaGExIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxuICAqIENvcHlyaWdodCAyMDExLTIwMjIgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICggZmFsc2UgPyAwIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnICYmIFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KF9fd2VicGFja19yZXF1aXJlX18oT2JqZWN0KGZ1bmN0aW9uIHdlYnBhY2tNaXNzaW5nTW9kdWxlKCkgeyB2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnQHBvcHBlcmpzL2NvcmUnXCIpOyBlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7IHRocm93IGU7IH0oKSkpKSA6ICB0cnVlID8gIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW09iamVjdChmdW5jdGlvbiB3ZWJwYWNrTWlzc2luZ01vZHVsZSgpIHsgdmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ0Bwb3BwZXJqcy9jb3JlJ1wiKTsgZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnOyB0aHJvdyBlOyB9KCkpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLFxuXHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgP1xuXHRcdChfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSxcblx0XHRfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSkgOiAoMCk7XG59KSh0aGlzLCBmdW5jdGlvbiAoUG9wcGVyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgX0tFWV9UT19ESVJFQ1RJT047XG4gIGZ1bmN0aW9uIF9pbnRlcm9wTmFtZXNwYWNlRGVmYXVsdChlKSB7XG4gICAgdmFyIG4gPSBPYmplY3QuY3JlYXRlKG51bGwsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG4gICAgICB2YWx1ZTogJ01vZHVsZSdcbiAgICB9KSk7XG4gICAgaWYgKGUpIHtcbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGspIHtcbiAgICAgICAgaWYgKGsgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgIHZhciBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBrKTtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgaywgZC5nZXQgPyBkIDoge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICByZXR1cm4gZVtrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGZvciAodmFyIGsgaW4gZSkge1xuICAgICAgICBfbG9vcChrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbltcImRlZmF1bHRcIl0gPSBlO1xuICAgIHJldHVybiBPYmplY3QuZnJlZXplKG4pO1xuICB9XG4gIHZhciBQb3BwZXJfX25hbWVzcGFjZSA9IC8qI19fUFVSRV9fKi9faW50ZXJvcE5hbWVzcGFjZURlZmF1bHQoUG9wcGVyKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogdXRpbC9pbmRleC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE1BWF9VSUQgPSAxMDAwMDAwO1xuICB2YXIgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwO1xuICB2YXIgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCc7XG5cbiAgLyoqXG4gICAqIFByb3Blcmx5IGVzY2FwZSBJRHMgc2VsZWN0b3JzIHRvIGhhbmRsZSB3ZWlyZCBJRHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICB2YXIgcGFyc2VTZWxlY3RvciA9IGZ1bmN0aW9uIHBhcnNlU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICBpZiAoc2VsZWN0b3IgJiYgd2luZG93LkNTUyAmJiB3aW5kb3cuQ1NTLmVzY2FwZSkge1xuICAgICAgLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvciBuZWVkcyBlc2NhcGluZyB0byBoYW5kbGUgSURzIChodG1sNSspIGNvbnRhaW5pbmcgZm9yIGluc3RhbmNlIC9cbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZSgvIyhbXlxcc1wiIyddKykvZywgZnVuY3Rpb24gKG1hdGNoLCBpZCkge1xuICAgICAgICByZXR1cm4gXCIjXCIuY29uY2F0KENTUy5lc2NhcGUoaWQpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0b3I7XG4gIH07XG5cbiAgLy8gU2hvdXQtb3V0IEFuZ3VzIENyb2xsIChodHRwczovL2dvby5nbC9weHdRR3ApXG4gIHZhciB0b1R5cGUgPSBmdW5jdGlvbiB0b1R5cGUob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KG9iamVjdCk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKTtcbiAgfTtcblxuICAvKipcbiAgICogUHVibGljIFV0aWwgQVBJXG4gICAqL1xuXG4gIHZhciBnZXRVSUQgPSBmdW5jdGlvbiBnZXRVSUQocHJlZml4KSB7XG4gICAgZG8ge1xuICAgICAgcHJlZml4ICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BWF9VSUQpO1xuICAgIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpO1xuICAgIHJldHVybiBwcmVmaXg7XG4gIH07XG4gIHZhciBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8vIEdldCB0cmFuc2l0aW9uLWR1cmF0aW9uIG9mIHRoZSBlbGVtZW50XG4gICAgdmFyIF93aW5kb3ckZ2V0Q29tcHV0ZWRTdCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3dpbmRvdyRnZXRDb21wdXRlZFN0LnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHRyYW5zaXRpb25EZWxheSA9IF93aW5kb3ckZ2V0Q29tcHV0ZWRTdC50cmFuc2l0aW9uRGVsYXk7XG4gICAgdmFyIGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB2YXIgZmxvYXRUcmFuc2l0aW9uRGVsYXkgPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpO1xuXG4gICAgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZFxuICAgIGlmICghZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gJiYgIWZsb2F0VHJhbnNpdGlvbkRlbGF5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvLyBJZiBtdWx0aXBsZSBkdXJhdGlvbnMgYXJlIGRlZmluZWQsIHRha2UgdGhlIGZpcnN0XG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uLnNwbGl0KCcsJylbMF07XG4gICAgdHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5LnNwbGl0KCcsJylbMF07XG4gICAgcmV0dXJuIChOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pICsgTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KSkgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUjtcbiAgfTtcbiAgdmFyIHRyaWdnZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJpZ2dlclRyYW5zaXRpb25FbmQoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoVFJBTlNJVElPTl9FTkQpKTtcbiAgfTtcbiAgdmFyIGlzRWxlbWVudCA9IGZ1bmN0aW9uIGlzRWxlbWVudChvYmplY3QpIHtcbiAgICBpZiAoIW9iamVjdCB8fCBfdHlwZW9mKG9iamVjdCkgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqZWN0LmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9iamVjdCA9IG9iamVjdFswXTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgIT09ICd1bmRlZmluZWQnO1xuICB9O1xuICB2YXIgZ2V0RWxlbWVudCA9IGZ1bmN0aW9uIGdldEVsZW1lbnQob2JqZWN0KSB7XG4gICAgLy8gaXQncyBhIGpRdWVyeSBvYmplY3Qgb3IgYSBub2RlIGVsZW1lbnRcbiAgICBpZiAoaXNFbGVtZW50KG9iamVjdCkpIHtcbiAgICAgIHJldHVybiBvYmplY3QuanF1ZXJ5ID8gb2JqZWN0WzBdIDogb2JqZWN0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ3N0cmluZycgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBhcnNlU2VsZWN0b3Iob2JqZWN0KSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuICB2YXIgaXNWaXNpYmxlID0gZnVuY3Rpb24gaXNWaXNpYmxlKGVsZW1lbnQpIHtcbiAgICBpZiAoIWlzRWxlbWVudChlbGVtZW50KSB8fCBlbGVtZW50LmdldENsaWVudFJlY3RzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBlbGVtZW50SXNWaXNpYmxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKCd2aXNpYmlsaXR5JykgPT09ICd2aXNpYmxlJztcbiAgICAvLyBIYW5kbGUgYGRldGFpbHNgIGVsZW1lbnQgYXMgaXRzIGNvbnRlbnQgbWF5IGZhbHNpZSBhcHBlYXIgdmlzaWJsZSB3aGVuIGl0IGlzIGNsb3NlZFxuICAgIHZhciBjbG9zZWREZXRhaWxzID0gZWxlbWVudC5jbG9zZXN0KCdkZXRhaWxzOm5vdChbb3Blbl0pJyk7XG4gICAgaWYgKCFjbG9zZWREZXRhaWxzKSB7XG4gICAgICByZXR1cm4gZWxlbWVudElzVmlzaWJsZTtcbiAgICB9XG4gICAgaWYgKGNsb3NlZERldGFpbHMgIT09IGVsZW1lbnQpIHtcbiAgICAgIHZhciBzdW1tYXJ5ID0gZWxlbWVudC5jbG9zZXN0KCdzdW1tYXJ5Jyk7XG4gICAgICBpZiAoc3VtbWFyeSAmJiBzdW1tYXJ5LnBhcmVudE5vZGUgIT09IGNsb3NlZERldGFpbHMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHN1bW1hcnkgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudElzVmlzaWJsZTtcbiAgfTtcbiAgdmFyIGlzRGlzYWJsZWQgPSBmdW5jdGlvbiBpc0Rpc2FibGVkKGVsZW1lbnQpIHtcbiAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudC5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVsZW1lbnQuZGlzYWJsZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5kaXNhYmxlZDtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpICE9PSAnZmFsc2UnO1xuICB9O1xuICB2YXIgZmluZFNoYWRvd1Jvb3QgPSBmdW5jdGlvbiBmaW5kU2hhZG93Um9vdChlbGVtZW50KSB7XG4gICAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Um9vdE5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciByb290ID0gZWxlbWVudC5nZXRSb290Tm9kZSgpO1xuICAgICAgcmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ID8gcm9vdCA6IG51bGw7XG4gICAgfVxuICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLy8gd2hlbiB3ZSBkb24ndCBmaW5kIGEgc2hhZG93IHJvb3RcbiAgICBpZiAoIWVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmaW5kU2hhZG93Um9vdChlbGVtZW50LnBhcmVudE5vZGUpO1xuICB9O1xuICB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuICAvKipcbiAgICogVHJpY2sgdG8gcmVzdGFydCBhbiBlbGVtZW50J3MgYW5pbWF0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHJldHVybiB2b2lkXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly93d3cuY2hhcmlzdGhlby5pby9ibG9nLzIwMjEvMDIvcmVzdGFydC1hLWNzcy1hbmltYXRpb24td2l0aC1qYXZhc2NyaXB0LyNyZXN0YXJ0aW5nLWEtY3NzLWFuaW1hdGlvblxuICAgKi9cbiAgdmFyIHJlZmxvdyA9IGZ1bmN0aW9uIHJlZmxvdyhlbGVtZW50KSB7XG4gICAgZWxlbWVudC5vZmZzZXRIZWlnaHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gIH07XG5cbiAgdmFyIGdldGpRdWVyeSA9IGZ1bmN0aW9uIGdldGpRdWVyeSgpIHtcbiAgICBpZiAod2luZG93LmpRdWVyeSAmJiAhZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtYnMtbm8tanF1ZXJ5JykpIHtcbiAgICAgIHJldHVybiB3aW5kb3cualF1ZXJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgdmFyIERPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MgPSBbXTtcbiAgdmFyIG9uRE9NQ29udGVudExvYWRlZCA9IGZ1bmN0aW9uIG9uRE9NQ29udGVudExvYWRlZChjYWxsYmFjaykge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgIC8vIGFkZCBsaXN0ZW5lciBvbiB0aGUgZmlyc3QgY2FsbCB3aGVuIHRoZSBkb2N1bWVudCBpcyBpbiBsb2FkaW5nIHN0YXRlXG4gICAgICBpZiAoIURPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfRE9NQ29udGVudExvYWRlZENhbGwgPSBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzOyBfaSA8IF9ET01Db250ZW50TG9hZGVkQ2FsbC5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBfY2FsbGJhY2sgPSBfRE9NQ29udGVudExvYWRlZENhbGxbX2ldO1xuICAgICAgICAgICAgX2NhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIERPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9O1xuICB2YXIgaXNSVEwgPSBmdW5jdGlvbiBpc1JUTCgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRpciA9PT0gJ3J0bCc7XG4gIH07XG4gIHZhciBkZWZpbmVKUXVlcnlQbHVnaW4gPSBmdW5jdGlvbiBkZWZpbmVKUXVlcnlQbHVnaW4ocGx1Z2luKSB7XG4gICAgb25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkID0gZ2V0alF1ZXJ5KCk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgkKSB7XG4gICAgICAgIHZhciBuYW1lID0gcGx1Z2luLk5BTUU7XG4gICAgICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW25hbWVdO1xuICAgICAgICAkLmZuW25hbWVdID0gcGx1Z2luLmpRdWVyeUludGVyZmFjZTtcbiAgICAgICAgJC5mbltuYW1lXS5Db25zdHJ1Y3RvciA9IHBsdWdpbjtcbiAgICAgICAgJC5mbltuYW1lXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQuZm5bbmFtZV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICAgICAgcmV0dXJuIHBsdWdpbi5qUXVlcnlJbnRlcmZhY2U7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIHZhciBleGVjdXRlID0gZnVuY3Rpb24gZXhlY3V0ZShwb3NzaWJsZUNhbGxiYWNrKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFtdO1xuICAgIHZhciBkZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHBvc3NpYmxlQ2FsbGJhY2s7XG4gICAgcmV0dXJuIHR5cGVvZiBwb3NzaWJsZUNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gcG9zc2libGVDYWxsYmFjay5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShhcmdzKSkgOiBkZWZhdWx0VmFsdWU7XG4gIH07XG4gIHZhciBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uID0gZnVuY3Rpb24gZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbihjYWxsYmFjaywgdHJhbnNpdGlvbkVsZW1lbnQpIHtcbiAgICB2YXIgd2FpdEZvclRyYW5zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHRydWU7XG4gICAgaWYgKCF3YWl0Rm9yVHJhbnNpdGlvbikge1xuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBkdXJhdGlvblBhZGRpbmcgPSA1O1xuICAgIHZhciBlbXVsYXRlZER1cmF0aW9uID0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodHJhbnNpdGlvbkVsZW1lbnQpICsgZHVyYXRpb25QYWRkaW5nO1xuICAgIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZikge1xuICAgICAgdmFyIHRhcmdldCA9IF9yZWYudGFyZ2V0O1xuICAgICAgaWYgKHRhcmdldCAhPT0gdHJhbnNpdGlvbkVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIHRyYW5zaXRpb25FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVFJBTlNJVElPTl9FTkQsIGhhbmRsZXIpO1xuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgfTtcbiAgICB0cmFuc2l0aW9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBoYW5kbGVyKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25FbGVtZW50KTtcbiAgICAgIH1cbiAgICB9LCBlbXVsYXRlZER1cmF0aW9uKTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBwcmV2aW91cy9uZXh0IGVsZW1lbnQgb2YgYSBsaXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSBsaXN0ICAgIFRoZSBsaXN0IG9mIGVsZW1lbnRzXG4gICAqIEBwYXJhbSBhY3RpdmVFbGVtZW50ICAgVGhlIGFjdGl2ZSBlbGVtZW50XG4gICAqIEBwYXJhbSBzaG91bGRHZXROZXh0ICAgQ2hvb3NlIHRvIGdldCBuZXh0IG9yIHByZXZpb3VzIGVsZW1lbnRcbiAgICogQHBhcmFtIGlzQ3ljbGVBbGxvd2VkXG4gICAqIEByZXR1cm4ge0VsZW1lbnR8ZWxlbX0gVGhlIHByb3BlciBlbGVtZW50XG4gICAqL1xuICB2YXIgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQgPSBmdW5jdGlvbiBnZXROZXh0QWN0aXZlRWxlbWVudChsaXN0LCBhY3RpdmVFbGVtZW50LCBzaG91bGRHZXROZXh0LCBpc0N5Y2xlQWxsb3dlZCkge1xuICAgIHZhciBsaXN0TGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIGluZGV4ID0gbGlzdC5pbmRleE9mKGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgLy8gaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGxpc3QgcmV0dXJuIGFuIGVsZW1lbnRcbiAgICAvLyBkZXBlbmRpbmcgb24gdGhlIGRpcmVjdGlvbiBhbmQgaWYgY3ljbGUgaXMgYWxsb3dlZFxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiAhc2hvdWxkR2V0TmV4dCAmJiBpc0N5Y2xlQWxsb3dlZCA/IGxpc3RbbGlzdExlbmd0aCAtIDFdIDogbGlzdFswXTtcbiAgICB9XG4gICAgaW5kZXggKz0gc2hvdWxkR2V0TmV4dCA/IDEgOiAtMTtcbiAgICBpZiAoaXNDeWNsZUFsbG93ZWQpIHtcbiAgICAgIGluZGV4ID0gKGluZGV4ICsgbGlzdExlbmd0aCkgJSBsaXN0TGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdFtNYXRoLm1heCgwLCBNYXRoLm1pbihpbmRleCwgbGlzdExlbmd0aCAtIDEpKV07XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjUuMy4wLWFscGhhMSk6IGRvbS9ldmVudC1oYW5kbGVyLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBuYW1lc3BhY2VSZWdleCA9IC9bXi5dKig/PVxcLi4qKVxcLnwuKi87XG4gIHZhciBzdHJpcE5hbWVSZWdleCA9IC9cXC4uKi87XG4gIHZhciBzdHJpcFVpZFJlZ2V4ID0gLzo6XFxkKyQvO1xuICB2YXIgZXZlbnRSZWdpc3RyeSA9IHt9OyAvLyBFdmVudHMgc3RvcmFnZVxuICB2YXIgdWlkRXZlbnQgPSAxO1xuICB2YXIgY3VzdG9tRXZlbnRzID0ge1xuICAgIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInLFxuICAgIG1vdXNlbGVhdmU6ICdtb3VzZW91dCdcbiAgfTtcbiAgdmFyIG5hdGl2ZUV2ZW50cyA9IG5ldyBTZXQoWydjbGljaycsICdkYmxjbGljaycsICdtb3VzZXVwJywgJ21vdXNlZG93bicsICdjb250ZXh0bWVudScsICdtb3VzZXdoZWVsJywgJ0RPTU1vdXNlU2Nyb2xsJywgJ21vdXNlb3ZlcicsICdtb3VzZW91dCcsICdtb3VzZW1vdmUnLCAnc2VsZWN0c3RhcnQnLCAnc2VsZWN0ZW5kJywgJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnLCAnb3JpZW50YXRpb25jaGFuZ2UnLCAndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnLCAncG9pbnRlcmRvd24nLCAncG9pbnRlcm1vdmUnLCAncG9pbnRlcnVwJywgJ3BvaW50ZXJsZWF2ZScsICdwb2ludGVyY2FuY2VsJywgJ2dlc3R1cmVzdGFydCcsICdnZXN0dXJlY2hhbmdlJywgJ2dlc3R1cmVlbmQnLCAnZm9jdXMnLCAnYmx1cicsICdjaGFuZ2UnLCAncmVzZXQnLCAnc2VsZWN0JywgJ3N1Ym1pdCcsICdmb2N1c2luJywgJ2ZvY3Vzb3V0JywgJ2xvYWQnLCAndW5sb2FkJywgJ2JlZm9yZXVubG9hZCcsICdyZXNpemUnLCAnbW92ZScsICdET01Db250ZW50TG9hZGVkJywgJ3JlYWR5c3RhdGVjaGFuZ2UnLCAnZXJyb3InLCAnYWJvcnQnLCAnc2Nyb2xsJ10pO1xuXG4gIC8qKlxuICAgKiBQcml2YXRlIG1ldGhvZHNcbiAgICovXG5cbiAgZnVuY3Rpb24gbWFrZUV2ZW50VWlkKGVsZW1lbnQsIHVpZCkge1xuICAgIHJldHVybiB1aWQgJiYgXCJcIi5jb25jYXQodWlkLCBcIjo6XCIpLmNvbmNhdCh1aWRFdmVudCsrKSB8fCBlbGVtZW50LnVpZEV2ZW50IHx8IHVpZEV2ZW50Kys7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RWxlbWVudEV2ZW50cyhlbGVtZW50KSB7XG4gICAgdmFyIHVpZCA9IG1ha2VFdmVudFVpZChlbGVtZW50KTtcbiAgICBlbGVtZW50LnVpZEV2ZW50ID0gdWlkO1xuICAgIGV2ZW50UmVnaXN0cnlbdWlkXSA9IGV2ZW50UmVnaXN0cnlbdWlkXSB8fCB7fTtcbiAgICByZXR1cm4gZXZlbnRSZWdpc3RyeVt1aWRdO1xuICB9XG4gIGZ1bmN0aW9uIGJvb3RzdHJhcEhhbmRsZXIoZWxlbWVudCwgZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgICAgaHlkcmF0ZU9iaihldmVudCwge1xuICAgICAgICBkZWxlZ2F0ZVRhcmdldDogZWxlbWVudFxuICAgICAgfSk7XG4gICAgICBpZiAoaGFuZGxlci5vbmVPZmYpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCBldmVudC50eXBlLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gZm4uYXBwbHkoZWxlbWVudCwgW2V2ZW50XSk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlcihlbGVtZW50LCBzZWxlY3RvciwgZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgICAgdmFyIGRvbUVsZW1lbnRzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgIGZvciAodmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDsgdGFyZ2V0ICYmIHRhcmdldCAhPT0gdGhpczsgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGUpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRvbUVsZW1lbnRzKSxcbiAgICAgICAgICBfc3RlcDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGRvbUVsZW1lbnQgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChkb21FbGVtZW50ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoeWRyYXRlT2JqKGV2ZW50LCB7XG4gICAgICAgICAgICAgIGRlbGVnYXRlVGFyZ2V0OiB0YXJnZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIub25lT2ZmKSB7XG4gICAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgc2VsZWN0b3IsIGZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0YXJnZXQsIFtldmVudF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBmaW5kSGFuZGxlcihldmVudHMsIGNhbGxhYmxlKSB7XG4gICAgdmFyIGRlbGVnYXRpb25TZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbnVsbDtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhldmVudHMpLmZpbmQoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gZXZlbnQuY2FsbGFibGUgPT09IGNhbGxhYmxlICYmIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvciA9PT0gZGVsZWdhdGlvblNlbGVjdG9yO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVBhcmFtZXRlcnMob3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GdW5jdGlvbikge1xuICAgIHZhciBpc0RlbGVnYXRlZCA9IHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJztcbiAgICAvLyB0b2RvOiB0b29sdGlwIHBhc3NlcyBgZmFsc2VgIGluc3RlYWQgb2Ygc2VsZWN0b3IsIHNvIHdlIG5lZWQgdG8gY2hlY2tcbiAgICB2YXIgY2FsbGFibGUgPSBpc0RlbGVnYXRlZCA/IGRlbGVnYXRpb25GdW5jdGlvbiA6IGhhbmRsZXIgfHwgZGVsZWdhdGlvbkZ1bmN0aW9uO1xuICAgIHZhciB0eXBlRXZlbnQgPSBnZXRUeXBlRXZlbnQob3JpZ2luYWxUeXBlRXZlbnQpO1xuICAgIGlmICghbmF0aXZlRXZlbnRzLmhhcyh0eXBlRXZlbnQpKSB7XG4gICAgICB0eXBlRXZlbnQgPSBvcmlnaW5hbFR5cGVFdmVudDtcbiAgICB9XG4gICAgcmV0dXJuIFtpc0RlbGVnYXRlZCwgY2FsbGFibGUsIHR5cGVFdmVudF07XG4gIH1cbiAgZnVuY3Rpb24gYWRkSGFuZGxlcihlbGVtZW50LCBvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uLCBvbmVPZmYpIHtcbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsVHlwZUV2ZW50ICE9PSAnc3RyaW5nJyB8fCAhZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgX25vcm1hbGl6ZVBhcmFtZXRlcnMgPSBub3JtYWxpemVQYXJhbWV0ZXJzKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pLFxuICAgICAgX25vcm1hbGl6ZVBhcmFtZXRlcnMyID0gX3NsaWNlZFRvQXJyYXkoX25vcm1hbGl6ZVBhcmFtZXRlcnMsIDMpLFxuICAgICAgaXNEZWxlZ2F0ZWQgPSBfbm9ybWFsaXplUGFyYW1ldGVyczJbMF0sXG4gICAgICBjYWxsYWJsZSA9IF9ub3JtYWxpemVQYXJhbWV0ZXJzMlsxXSxcbiAgICAgIHR5cGVFdmVudCA9IF9ub3JtYWxpemVQYXJhbWV0ZXJzMlsyXTtcblxuICAgIC8vIGluIGNhc2Ugb2YgbW91c2VlbnRlciBvciBtb3VzZWxlYXZlIHdyYXAgdGhlIGhhbmRsZXIgd2l0aGluIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgZm9yIGl0cyBET00gcG9zaXRpb25cbiAgICAvLyB0aGlzIHByZXZlbnRzIHRoZSBoYW5kbGVyIGZyb20gYmVpbmcgZGlzcGF0Y2hlZCB0aGUgc2FtZSB3YXkgYXMgbW91c2VvdmVyIG9yIG1vdXNlb3V0IGRvZXNcbiAgICBpZiAob3JpZ2luYWxUeXBlRXZlbnQgaW4gY3VzdG9tRXZlbnRzKSB7XG4gICAgICB2YXIgd3JhcEZ1bmN0aW9uID0gZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoIWV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgZXZlbnQucmVsYXRlZFRhcmdldCAhPT0gZXZlbnQuZGVsZWdhdGVUYXJnZXQgJiYgIWV2ZW50LmRlbGVnYXRlVGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIGNhbGxhYmxlID0gd3JhcEZ1bmN0aW9uKGNhbGxhYmxlKTtcbiAgICB9XG4gICAgdmFyIGV2ZW50cyA9IGdldEVsZW1lbnRFdmVudHMoZWxlbWVudCk7XG4gICAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW3R5cGVFdmVudF0gfHwgKGV2ZW50c1t0eXBlRXZlbnRdID0ge30pO1xuICAgIHZhciBwcmV2aW91c0Z1bmN0aW9uID0gZmluZEhhbmRsZXIoaGFuZGxlcnMsIGNhbGxhYmxlLCBpc0RlbGVnYXRlZCA/IGhhbmRsZXIgOiBudWxsKTtcbiAgICBpZiAocHJldmlvdXNGdW5jdGlvbikge1xuICAgICAgcHJldmlvdXNGdW5jdGlvbi5vbmVPZmYgPSBwcmV2aW91c0Z1bmN0aW9uLm9uZU9mZiAmJiBvbmVPZmY7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB1aWQgPSBtYWtlRXZlbnRVaWQoY2FsbGFibGUsIG9yaWdpbmFsVHlwZUV2ZW50LnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsICcnKSk7XG4gICAgdmFyIGZuID0gaXNEZWxlZ2F0ZWQgPyBib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlcihlbGVtZW50LCBoYW5kbGVyLCBjYWxsYWJsZSkgOiBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGNhbGxhYmxlKTtcbiAgICBmbi5kZWxlZ2F0aW9uU2VsZWN0b3IgPSBpc0RlbGVnYXRlZCA/IGhhbmRsZXIgOiBudWxsO1xuICAgIGZuLmNhbGxhYmxlID0gY2FsbGFibGU7XG4gICAgZm4ub25lT2ZmID0gb25lT2ZmO1xuICAgIGZuLnVpZEV2ZW50ID0gdWlkO1xuICAgIGhhbmRsZXJzW3VpZF0gPSBmbjtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZUV2ZW50LCBmbiwgaXNEZWxlZ2F0ZWQpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZUhhbmRsZXIoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25TZWxlY3Rvcikge1xuICAgIHZhciBmbiA9IGZpbmRIYW5kbGVyKGV2ZW50c1t0eXBlRXZlbnRdLCBoYW5kbGVyLCBkZWxlZ2F0aW9uU2VsZWN0b3IpO1xuICAgIGlmICghZm4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGVFdmVudCwgZm4sIEJvb2xlYW4oZGVsZWdhdGlvblNlbGVjdG9yKSk7XG4gICAgZGVsZXRlIGV2ZW50c1t0eXBlRXZlbnRdW2ZuLnVpZEV2ZW50XTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIG5hbWVzcGFjZSkge1xuICAgIHZhciBzdG9yZUVsZW1lbnRFdmVudCA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IHt9O1xuICAgIGZvciAodmFyIF9pMiA9IDAsIF9PYmplY3QkZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHN0b3JlRWxlbWVudEV2ZW50KTsgX2kyIDwgX09iamVjdCRlbnRyaWVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBfT2JqZWN0JGVudHJpZXMkX2kgPSBfc2xpY2VkVG9BcnJheShfT2JqZWN0JGVudHJpZXNbX2kyXSwgMiksXG4gICAgICAgIGhhbmRsZXJLZXkgPSBfT2JqZWN0JGVudHJpZXMkX2lbMF0sXG4gICAgICAgIGV2ZW50ID0gX09iamVjdCRlbnRyaWVzJF9pWzFdO1xuICAgICAgaWYgKGhhbmRsZXJLZXkuaW5jbHVkZXMobmFtZXNwYWNlKSkge1xuICAgICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBldmVudC5jYWxsYWJsZSwgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VHlwZUV2ZW50KGV2ZW50KSB7XG4gICAgLy8gYWxsb3cgdG8gZ2V0IHRoZSBuYXRpdmUgZXZlbnRzIGZyb20gbmFtZXNwYWNlZCBldmVudHMgKCdjbGljay5icy5idXR0b24nIC0tPiAnY2xpY2snKVxuICAgIGV2ZW50ID0gZXZlbnQucmVwbGFjZShzdHJpcE5hbWVSZWdleCwgJycpO1xuICAgIHJldHVybiBjdXN0b21FdmVudHNbZXZlbnRdIHx8IGV2ZW50O1xuICB9XG4gIHZhciBFdmVudEhhbmRsZXIgPSB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pIHtcbiAgICAgIGFkZEhhbmRsZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GdW5jdGlvbiwgZmFsc2UpO1xuICAgIH0sXG4gICAgb25lOiBmdW5jdGlvbiBvbmUoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25GdW5jdGlvbikge1xuICAgICAgYWRkSGFuZGxlcihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZ1bmN0aW9uLCB0cnVlKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGVsZW1lbnQsIG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pIHtcbiAgICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxUeXBlRXZlbnQgIT09ICdzdHJpbmcnIHx8ICFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBfbm9ybWFsaXplUGFyYW1ldGVyczMgPSBub3JtYWxpemVQYXJhbWV0ZXJzKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRnVuY3Rpb24pLFxuICAgICAgICBfbm9ybWFsaXplUGFyYW1ldGVyczQgPSBfc2xpY2VkVG9BcnJheShfbm9ybWFsaXplUGFyYW1ldGVyczMsIDMpLFxuICAgICAgICBpc0RlbGVnYXRlZCA9IF9ub3JtYWxpemVQYXJhbWV0ZXJzNFswXSxcbiAgICAgICAgY2FsbGFibGUgPSBfbm9ybWFsaXplUGFyYW1ldGVyczRbMV0sXG4gICAgICAgIHR5cGVFdmVudCA9IF9ub3JtYWxpemVQYXJhbWV0ZXJzNFsyXTtcbiAgICAgIHZhciBpbk5hbWVzcGFjZSA9IHR5cGVFdmVudCAhPT0gb3JpZ2luYWxUeXBlRXZlbnQ7XG4gICAgICB2YXIgZXZlbnRzID0gZ2V0RWxlbWVudEV2ZW50cyhlbGVtZW50KTtcbiAgICAgIHZhciBzdG9yZUVsZW1lbnRFdmVudCA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IHt9O1xuICAgICAgdmFyIGlzTmFtZXNwYWNlID0gb3JpZ2luYWxUeXBlRXZlbnQuc3RhcnRzV2l0aCgnLicpO1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gU2ltcGxlc3QgY2FzZTogaGFuZGxlciBpcyBwYXNzZWQsIHJlbW92ZSB0aGF0IGxpc3RlbmVyIE9OTFkuXG4gICAgICAgIGlmICghT2JqZWN0LmtleXMoc3RvcmVFbGVtZW50RXZlbnQpLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBjYWxsYWJsZSwgaXNEZWxlZ2F0ZWQgPyBoYW5kbGVyIDogbnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc05hbWVzcGFjZSkge1xuICAgICAgICBmb3IgKHZhciBfaTMgPSAwLCBfT2JqZWN0JGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpOyBfaTMgPCBfT2JqZWN0JGtleXMubGVuZ3RoOyBfaTMrKykge1xuICAgICAgICAgIHZhciBlbGVtZW50RXZlbnQgPSBfT2JqZWN0JGtleXNbX2kzXTtcbiAgICAgICAgICByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoZWxlbWVudCwgZXZlbnRzLCBlbGVtZW50RXZlbnQsIG9yaWdpbmFsVHlwZUV2ZW50LnNsaWNlKDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgX2k0ID0gMCwgX09iamVjdCRlbnRyaWVzMiA9IE9iamVjdC5lbnRyaWVzKHN0b3JlRWxlbWVudEV2ZW50KTsgX2k0IDwgX09iamVjdCRlbnRyaWVzMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgICAgIHZhciBfT2JqZWN0JGVudHJpZXMyJF9pID0gX3NsaWNlZFRvQXJyYXkoX09iamVjdCRlbnRyaWVzMltfaTRdLCAyKSxcbiAgICAgICAgICBrZXlIYW5kbGVycyA9IF9PYmplY3QkZW50cmllczIkX2lbMF0sXG4gICAgICAgICAgZXZlbnQgPSBfT2JqZWN0JGVudHJpZXMyJF9pWzFdO1xuICAgICAgICB2YXIgaGFuZGxlcktleSA9IGtleUhhbmRsZXJzLnJlcGxhY2Uoc3RyaXBVaWRSZWdleCwgJycpO1xuICAgICAgICBpZiAoIWluTmFtZXNwYWNlIHx8IG9yaWdpbmFsVHlwZUV2ZW50LmluY2x1ZGVzKGhhbmRsZXJLZXkpKSB7XG4gICAgICAgICAgcmVtb3ZlSGFuZGxlcihlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgZXZlbnQuY2FsbGFibGUsIGV2ZW50LmRlbGVnYXRpb25TZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRyaWdnZXI6IGZ1bmN0aW9uIHRyaWdnZXIoZWxlbWVudCwgZXZlbnQsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgZXZlbnQgIT09ICdzdHJpbmcnIHx8ICFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyICQgPSBnZXRqUXVlcnkoKTtcbiAgICAgIHZhciB0eXBlRXZlbnQgPSBnZXRUeXBlRXZlbnQoZXZlbnQpO1xuICAgICAgdmFyIGluTmFtZXNwYWNlID0gZXZlbnQgIT09IHR5cGVFdmVudDtcbiAgICAgIHZhciBqUXVlcnlFdmVudCA9IG51bGw7XG4gICAgICB2YXIgYnViYmxlcyA9IHRydWU7XG4gICAgICB2YXIgbmF0aXZlRGlzcGF0Y2ggPSB0cnVlO1xuICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcbiAgICAgIGlmIChpbk5hbWVzcGFjZSAmJiAkKSB7XG4gICAgICAgIGpRdWVyeUV2ZW50ID0gJC5FdmVudChldmVudCwgYXJncyk7XG4gICAgICAgICQoZWxlbWVudCkudHJpZ2dlcihqUXVlcnlFdmVudCk7XG4gICAgICAgIGJ1YmJsZXMgPSAhalF1ZXJ5RXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtcbiAgICAgICAgbmF0aXZlRGlzcGF0Y2ggPSAhalF1ZXJ5RXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKTtcbiAgICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IGpRdWVyeUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xuICAgICAgfVxuICAgICAgdmFyIGV2dCA9IG5ldyBFdmVudChldmVudCwge1xuICAgICAgICBidWJibGVzOiBidWJibGVzLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGV2dCA9IGh5ZHJhdGVPYmooZXZ0LCBhcmdzKTtcbiAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgaWYgKG5hdGl2ZURpc3BhdGNoKSB7XG4gICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgfVxuICAgICAgaWYgKGV2dC5kZWZhdWx0UHJldmVudGVkICYmIGpRdWVyeUV2ZW50KSB7XG4gICAgICAgIGpRdWVyeUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXZ0O1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gaHlkcmF0ZU9iaihvYmopIHtcbiAgICB2YXIgbWV0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIF9sb29wMigpIHtcbiAgICAgIHZhciBfT2JqZWN0JGVudHJpZXMzJF9pID0gX3NsaWNlZFRvQXJyYXkoX09iamVjdCRlbnRyaWVzM1tfaTVdLCAyKSxcbiAgICAgICAga2V5ID0gX09iamVjdCRlbnRyaWVzMyRfaVswXSxcbiAgICAgICAgdmFsdWUgPSBfT2JqZWN0JGVudHJpZXMzJF9pWzFdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICAgIH0gY2F0Y2ggKF91bnVzZWQpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBfaTUgPSAwLCBfT2JqZWN0JGVudHJpZXMzID0gT2JqZWN0LmVudHJpZXMobWV0YSk7IF9pNSA8IF9PYmplY3QkZW50cmllczMubGVuZ3RoOyBfaTUrKykge1xuICAgICAgX2xvb3AyKCk7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogZG9tL2RhdGEuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIGVsZW1lbnRNYXAgPSBuZXcgTWFwKCk7XG4gIHZhciBEYXRhID0ge1xuICAgIHNldDogZnVuY3Rpb24gc2V0KGVsZW1lbnQsIGtleSwgaW5zdGFuY2UpIHtcbiAgICAgIGlmICghZWxlbWVudE1hcC5oYXMoZWxlbWVudCkpIHtcbiAgICAgICAgZWxlbWVudE1hcC5zZXQoZWxlbWVudCwgbmV3IE1hcCgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBpbnN0YW5jZU1hcCA9IGVsZW1lbnRNYXAuZ2V0KGVsZW1lbnQpO1xuXG4gICAgICAvLyBtYWtlIGl0IGNsZWFyIHdlIG9ubHkgd2FudCBvbmUgaW5zdGFuY2UgcGVyIGVsZW1lbnRcbiAgICAgIC8vIGNhbiBiZSByZW1vdmVkIGxhdGVyIHdoZW4gbXVsdGlwbGUga2V5L2luc3RhbmNlcyBhcmUgZmluZSB0byBiZSB1c2VkXG4gICAgICBpZiAoIWluc3RhbmNlTWFwLmhhcyhrZXkpICYmIGluc3RhbmNlTWFwLnNpemUgIT09IDApIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkJvb3RzdHJhcCBkb2Vzbid0IGFsbG93IG1vcmUgdGhhbiBvbmUgaW5zdGFuY2UgcGVyIGVsZW1lbnQuIEJvdW5kIGluc3RhbmNlOiBcIi5jb25jYXQoQXJyYXkuZnJvbShpbnN0YW5jZU1hcC5rZXlzKCkpWzBdLCBcIi5cIikpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbnN0YW5jZU1hcC5zZXQoa2V5LCBpbnN0YW5jZSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChlbGVtZW50LCBrZXkpIHtcbiAgICAgIGlmIChlbGVtZW50TWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudE1hcC5nZXQoZWxlbWVudCkuZ2V0KGtleSkgfHwgbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoZWxlbWVudCwga2V5KSB7XG4gICAgICBpZiAoIWVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbnN0YW5jZU1hcCA9IGVsZW1lbnRNYXAuZ2V0KGVsZW1lbnQpO1xuICAgICAgaW5zdGFuY2VNYXBbXCJkZWxldGVcIl0oa2V5KTtcblxuICAgICAgLy8gZnJlZSB1cCBlbGVtZW50IHJlZmVyZW5jZXMgaWYgdGhlcmUgYXJlIG5vIGluc3RhbmNlcyBsZWZ0IGZvciBhbiBlbGVtZW50XG4gICAgICBpZiAoaW5zdGFuY2VNYXAuc2l6ZSA9PT0gMCkge1xuICAgICAgICBlbGVtZW50TWFwW1wiZGVsZXRlXCJdKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogZG9tL21hbmlwdWxhdG9yLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICBmdW5jdGlvbiBub3JtYWxpemVEYXRhKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSAndHJ1ZScpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09ICdmYWxzZScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBOdW1iZXIodmFsdWUpLnRvU3RyaW5nKCkpIHtcbiAgICAgIHJldHVybiBOdW1iZXIodmFsdWUpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSAnbnVsbCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG4gICAgfSBjYXRjaCAoX3VudXNlZCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBub3JtYWxpemVEYXRhS2V5KGtleSkge1xuICAgIHJldHVybiBrZXkucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24gKGNocikge1xuICAgICAgcmV0dXJuIFwiLVwiLmNvbmNhdChjaHIudG9Mb3dlckNhc2UoKSk7XG4gICAgfSk7XG4gIH1cbiAgdmFyIE1hbmlwdWxhdG9yID0ge1xuICAgIHNldERhdGFBdHRyaWJ1dGU6IGZ1bmN0aW9uIHNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWJzLVwiLmNvbmNhdChub3JtYWxpemVEYXRhS2V5KGtleSkpLCB2YWx1ZSk7XG4gICAgfSxcbiAgICByZW1vdmVEYXRhQXR0cmlidXRlOiBmdW5jdGlvbiByZW1vdmVEYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSkge1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWJzLVwiLmNvbmNhdChub3JtYWxpemVEYXRhS2V5KGtleSkpKTtcbiAgICB9LFxuICAgIGdldERhdGFBdHRyaWJ1dGVzOiBmdW5jdGlvbiBnZXREYXRhQXR0cmlidXRlcyhlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgIHZhciBic0tleXMgPSBPYmplY3Qua2V5cyhlbGVtZW50LmRhdGFzZXQpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkuc3RhcnRzV2l0aCgnYnMnKSAmJiAha2V5LnN0YXJ0c1dpdGgoJ2JzQ29uZmlnJyk7XG4gICAgICB9KTtcbiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYnNLZXlzKSxcbiAgICAgICAgX3N0ZXAyO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIga2V5ID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgICAgIHZhciBwdXJlS2V5ID0ga2V5LnJlcGxhY2UoL15icy8sICcnKTtcbiAgICAgICAgICBwdXJlS2V5ID0gcHVyZUtleS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHB1cmVLZXkuc2xpY2UoMSwgcHVyZUtleS5sZW5ndGgpO1xuICAgICAgICAgIGF0dHJpYnV0ZXNbcHVyZUtleV0gPSBub3JtYWxpemVEYXRhKGVsZW1lbnQuZGF0YXNldFtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2l0ZXJhdG9yMi5mKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICB9LFxuICAgIGdldERhdGFBdHRyaWJ1dGU6IGZ1bmN0aW9uIGdldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwga2V5KSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplRGF0YShlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtYnMtXCIuY29uY2F0KG5vcm1hbGl6ZURhdGFLZXkoa2V5KSkpKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjUuMy4wLWFscGhhMSk6IHV0aWwvY29uZmlnLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cbiAgdmFyIENvbmZpZyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uZmlnKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbmZpZyk7XG4gICAgfVxuICAgIF9jcmVhdGVDbGFzcyhDb25maWcsIFt7XG4gICAgICBrZXk6IFwiX2dldENvbmZpZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZyA9IHRoaXMuX21lcmdlQ29uZmlnT2JqKGNvbmZpZyk7XG4gICAgICAgIGNvbmZpZyA9IHRoaXMuX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKTtcbiAgICAgICAgdGhpcy5fdHlwZUNoZWNrQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9jb25maWdBZnRlck1lcmdlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9tZXJnZUNvbmZpZ09ialwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tZXJnZUNvbmZpZ09iaihjb25maWcsIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGpzb25Db25maWcgPSBpc0VsZW1lbnQoZWxlbWVudCkgPyBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsICdjb25maWcnKSA6IHt9OyAvLyB0cnkgdG8gcGFyc2VcblxuICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0KSwgX3R5cGVvZihqc29uQ29uZmlnKSA9PT0gJ29iamVjdCcgPyBqc29uQ29uZmlnIDoge30pLCBpc0VsZW1lbnQoZWxlbWVudCkgPyBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyhlbGVtZW50KSA6IHt9KSwgX3R5cGVvZihjb25maWcpID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IHt9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3R5cGVDaGVja0NvbmZpZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90eXBlQ2hlY2tDb25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciBjb25maWdUeXBlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZTtcbiAgICAgICAgZm9yICh2YXIgX2k2ID0gMCwgX09iamVjdCRlbnRyaWVzNCA9IE9iamVjdC5lbnRyaWVzKGNvbmZpZ1R5cGVzKTsgX2k2IDwgX09iamVjdCRlbnRyaWVzNC5sZW5ndGg7IF9pNisrKSB7XG4gICAgICAgICAgdmFyIF9PYmplY3QkZW50cmllczQkX2kgPSBfc2xpY2VkVG9BcnJheShfT2JqZWN0JGVudHJpZXM0W19pNl0sIDIpLFxuICAgICAgICAgICAgcHJvcGVydHkgPSBfT2JqZWN0JGVudHJpZXM0JF9pWzBdLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlcyA9IF9PYmplY3QkZW50cmllczQkX2lbMV07XG4gICAgICAgICAgdmFyIHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTtcbiAgICAgICAgICB2YXIgdmFsdWVUeXBlID0gaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XG4gICAgICAgICAgaWYgKCFuZXcgUmVnRXhwKGV4cGVjdGVkVHlwZXMpLnRlc3QodmFsdWVUeXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlwiLmNvbmNhdCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUudG9VcHBlckNhc2UoKSwgXCI6IE9wdGlvbiBcXFwiXCIpLmNvbmNhdChwcm9wZXJ0eSwgXCJcXFwiIHByb3ZpZGVkIHR5cGUgXFxcIlwiKS5jb25jYXQodmFsdWVUeXBlLCBcIlxcXCIgYnV0IGV4cGVjdGVkIHR5cGUgXFxcIlwiKS5jb25jYXQoZXhwZWN0ZWRUeXBlcywgXCJcXFwiLlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OlxuICAgICAgLy8gR2V0dGVyc1xuICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHN0YXRpYyBtZXRob2QgXCJOQU1FXCIsIGZvciBlYWNoIGNvbXBvbmVudCEnKTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIENvbmZpZztcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogYmFzZS1jb21wb25lbnQuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuICB2YXIgVkVSU0lPTiA9ICc1LjMuMC1hbHBoYTEnO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuICB2YXIgQmFzZUNvbXBvbmVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbmZpZykge1xuICAgIF9pbmhlcml0cyhCYXNlQ29tcG9uZW50LCBfQ29uZmlnKTtcbiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEJhc2VDb21wb25lbnQpO1xuICAgIGZ1bmN0aW9uIEJhc2VDb21wb25lbnQoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXM7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZUNvbXBvbmVudCk7XG4gICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgZWxlbWVudCA9IGdldEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcbiAgICAgIH1cbiAgICAgIF90aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIF90aGlzLl9jb25maWcgPSBfdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICBEYXRhLnNldChfdGhpcy5fZWxlbWVudCwgX3RoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfY3JlYXRlQ2xhc3MoQmFzZUNvbXBvbmVudCwgW3tcbiAgICAgIGtleTogXCJkaXNwb3NlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgRGF0YS5yZW1vdmUodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSk7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSxcbiAgICAgICAgICBfc3RlcDM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBfc3RlcDMudmFsdWU7XG4gICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMy5mKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3F1ZXVlQ2FsbGJhY2tcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcXVldWVDYWxsYmFjayhjYWxsYmFjaywgZWxlbWVudCkge1xuICAgICAgICB2YXIgaXNBbmltYXRlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgICAgICAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbihjYWxsYmFjaywgZWxlbWVudCwgaXNBbmltYXRlZCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRDb25maWdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25maWcgPSB0aGlzLl9tZXJnZUNvbmZpZ09iaihjb25maWcsIHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICBjb25maWcgPSB0aGlzLl9jb25maWdBZnRlck1lcmdlKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX3R5cGVDaGVja0NvbmZpZyhjb25maWcpO1xuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGF0aWNcbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJnZXRJbnN0YW5jZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEluc3RhbmNlKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIERhdGEuZ2V0KGdldEVsZW1lbnQoZWxlbWVudCksIHRoaXMuREFUQV9LRVkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJnZXRPckNyZWF0ZUluc3RhbmNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50KSB7XG4gICAgICAgIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRJbnN0YW5jZShlbGVtZW50KSB8fCBuZXcgdGhpcyhlbGVtZW50LCBfdHlwZW9mKGNvbmZpZykgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiREFUQV9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gXCJicy5cIi5jb25jYXQodGhpcy5OQU1FKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRVZFTlRfS0VZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFwiLlwiLmNvbmNhdCh0aGlzLkRBVEFfS0VZKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZXZlbnROYW1lXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZXZlbnROYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KG5hbWUpLmNvbmNhdCh0aGlzLkVWRU5UX0tFWSk7XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBCYXNlQ29tcG9uZW50O1xuICB9KENvbmZpZyk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY1LjMuMC1hbHBoYTEpOiBkb20vc2VsZWN0b3ItZW5naW5lLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIGdldFNlbGVjdG9yID0gZnVuY3Rpb24gZ2V0U2VsZWN0b3IoZWxlbWVudCkge1xuICAgIHZhciBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLXRhcmdldCcpO1xuICAgIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgICAgdmFyIGhyZWZBdHRyaWJ1dGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuXG4gICAgICAvLyBUaGUgb25seSB2YWxpZCBjb250ZW50IHRoYXQgY291bGQgZG91YmxlIGFzIGEgc2VsZWN0b3IgYXJlIElEcyBvciBjbGFzc2VzLFxuICAgICAgLy8gc28gZXZlcnl0aGluZyBzdGFydGluZyB3aXRoIGAjYCBvciBgLmAuIElmIGEgXCJyZWFsXCIgVVJMIGlzIHVzZWQgYXMgdGhlIHNlbGVjdG9yLFxuICAgICAgLy8gYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JgIHdpbGwgcmlnaHRmdWxseSBjb21wbGFpbiBpdCBpcyBpbnZhbGlkLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMzIyNzNcbiAgICAgIGlmICghaHJlZkF0dHJpYnV0ZSB8fCAhaHJlZkF0dHJpYnV0ZS5pbmNsdWRlcygnIycpICYmICFocmVmQXR0cmlidXRlLnN0YXJ0c1dpdGgoJy4nKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gSnVzdCBpbiBjYXNlIHNvbWUgQ01TIHB1dHMgb3V0IGEgZnVsbCBVUkwgd2l0aCB0aGUgYW5jaG9yIGFwcGVuZGVkXG4gICAgICBpZiAoaHJlZkF0dHJpYnV0ZS5pbmNsdWRlcygnIycpICYmICFocmVmQXR0cmlidXRlLnN0YXJ0c1dpdGgoJyMnKSkge1xuICAgICAgICBocmVmQXR0cmlidXRlID0gXCIjXCIuY29uY2F0KGhyZWZBdHRyaWJ1dGUuc3BsaXQoJyMnKVsxXSk7XG4gICAgICB9XG4gICAgICBzZWxlY3RvciA9IGhyZWZBdHRyaWJ1dGUgJiYgaHJlZkF0dHJpYnV0ZSAhPT0gJyMnID8gaHJlZkF0dHJpYnV0ZS50cmltKCkgOiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG4gIHZhciBTZWxlY3RvckVuZ2luZSA9IHtcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gICAgICB2YXIgX3JlZjI7XG4gICAgICB2YXIgZWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgcmV0dXJuIChfcmVmMiA9IFtdKS5jb25jYXQuYXBwbHkoX3JlZjIsIF90b0NvbnN1bWFibGVBcnJheShFbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpKSk7XG4gICAgfSxcbiAgICBmaW5kT25lOiBmdW5jdGlvbiBmaW5kT25lKHNlbGVjdG9yKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgcmV0dXJuIEVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfSxcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICAgIHZhciBfcmVmMztcbiAgICAgIHJldHVybiAoX3JlZjMgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWYzLCBfdG9Db25zdW1hYmxlQXJyYXkoZWxlbWVudC5jaGlsZHJlbikpLmZpbHRlcihmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBwYXJlbnRzOiBmdW5jdGlvbiBwYXJlbnRzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgICB2YXIgcGFyZW50cyA9IFtdO1xuICAgICAgdmFyIGFuY2VzdG9yID0gZWxlbWVudC5wYXJlbnROb2RlLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIHBhcmVudHMucHVzaChhbmNlc3Rvcik7XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50Tm9kZS5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwYXJlbnRzO1xuICAgIH0sXG4gICAgcHJldjogZnVuY3Rpb24gcHJldihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgdmFyIHByZXZpb3VzID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgd2hpbGUgKHByZXZpb3VzKSB7XG4gICAgICAgIGlmIChwcmV2aW91cy5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIHJldHVybiBbcHJldmlvdXNdO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzID0gcHJldmlvdXMucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIC8vIFRPRE86IHRoaXMgaXMgbm93IHVudXNlZDsgcmVtb3ZlIGxhdGVyIGFsb25nIHdpdGggcHJldigpXG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dChlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgICAgdmFyIG5leHQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICAgIGlmIChuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIFtuZXh0XTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0ID0gbmV4dC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBmb2N1c2FibGVDaGlsZHJlbjogZnVuY3Rpb24gZm9jdXNhYmxlQ2hpbGRyZW4oZWxlbWVudCkge1xuICAgICAgdmFyIGZvY3VzYWJsZXMgPSBbJ2EnLCAnYnV0dG9uJywgJ2lucHV0JywgJ3RleHRhcmVhJywgJ3NlbGVjdCcsICdkZXRhaWxzJywgJ1t0YWJpbmRleF0nLCAnW2NvbnRlbnRlZGl0YWJsZT1cInRydWVcIl0nXS5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWxlY3RvciwgXCI6bm90KFt0YWJpbmRleF49XFxcIi1cXFwiXSlcIik7XG4gICAgICB9KS5qb2luKCcsJyk7XG4gICAgICByZXR1cm4gdGhpcy5maW5kKGZvY3VzYWJsZXMsIGVsZW1lbnQpLmZpbHRlcihmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgcmV0dXJuICFpc0Rpc2FibGVkKGVsKSAmJiBpc1Zpc2libGUoZWwpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGVsZW1lbnQpO1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5maW5kT25lKHNlbGVjdG9yKSA/IHNlbGVjdG9yIDogbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcjogZnVuY3Rpb24gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KTtcbiAgICAgIHJldHVybiBzZWxlY3RvciA/IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoc2VsZWN0b3IpIDogbnVsbDtcbiAgICB9LFxuICAgIGdldE11bHRpcGxlRWxlbWVudHNGcm9tU2VsZWN0b3I6IGZ1bmN0aW9uIGdldE11bHRpcGxlRWxlbWVudHNGcm9tU2VsZWN0b3IoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZWxlbWVudCk7XG4gICAgICByZXR1cm4gc2VsZWN0b3IgPyBTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yKSA6IFtdO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIGVuYWJsZURpc21pc3NUcmlnZ2VyID0gZnVuY3Rpb24gZW5hYmxlRGlzbWlzc1RyaWdnZXIoY29tcG9uZW50KSB7XG4gICAgdmFyIG1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ2hpZGUnO1xuICAgIHZhciBjbGlja0V2ZW50ID0gXCJjbGljay5kaXNtaXNzXCIuY29uY2F0KGNvbXBvbmVudC5FVkVOVF9LRVkpO1xuICAgIHZhciBuYW1lID0gY29tcG9uZW50Lk5BTUU7XG4gICAgRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBjbGlja0V2ZW50LCBcIltkYXRhLWJzLWRpc21pc3M9XFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCJdXCIpLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0YXJnZXQgPSBTZWxlY3RvckVuZ2luZS5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpIHx8IHRoaXMuY2xvc2VzdChcIi5cIi5jb25jYXQobmFtZSkpO1xuICAgICAgdmFyIGluc3RhbmNlID0gY29tcG9uZW50LmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KTtcblxuICAgICAgLy8gTWV0aG9kIGFyZ3VtZW50IGlzIGxlZnQsIGZvciBBbGVydCBhbmQgb25seSwgYXMgaXQgZG9lc24ndCBpbXBsZW1lbnQgdGhlICdoaWRlJyBtZXRob2RcbiAgICAgIGluc3RhbmNlW21ldGhvZF0oKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogYWxlcnQuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUkZiA9ICdhbGVydCc7XG4gIHZhciBEQVRBX0tFWSRhID0gJ2JzLmFsZXJ0JztcbiAgdmFyIEVWRU5UX0tFWSRiID0gXCIuXCIuY29uY2F0KERBVEFfS0VZJGEpO1xuICB2YXIgRVZFTlRfQ0xPU0UgPSBcImNsb3NlXCIuY29uY2F0KEVWRU5UX0tFWSRiKTtcbiAgdmFyIEVWRU5UX0NMT1NFRCA9IFwiY2xvc2VkXCIuY29uY2F0KEVWRU5UX0tFWSRiKTtcbiAgdmFyIENMQVNTX05BTUVfRkFERSQ1ID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XJDggPSAnc2hvdyc7XG5cbiAgLyoqXG4gICAqIENsYXNzIGRlZmluaXRpb25cbiAgICovXG4gIHZhciBBbGVydCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoQWxlcnQsIF9CYXNlQ29tcG9uZW50KTtcbiAgICB2YXIgX3N1cGVyMiA9IF9jcmVhdGVTdXBlcihBbGVydCk7XG4gICAgZnVuY3Rpb24gQWxlcnQoKSB7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWxlcnQpO1xuICAgICAgcmV0dXJuIF9zdXBlcjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgX2NyZWF0ZUNsYXNzKEFsZXJ0LCBbe1xuICAgICAga2V5OiBcImNsb3NlXCIsXG4gICAgICB2YWx1ZTpcbiAgICAgIC8vIFB1YmxpY1xuICAgICAgZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuICAgICAgICB2YXIgY2xvc2VFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMT1NFKTtcbiAgICAgICAgaWYgKGNsb3NlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDgpO1xuICAgICAgICB2YXIgaXNBbmltYXRlZCA9IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQ1KTtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fZGVzdHJveUVsZW1lbnQoKTtcbiAgICAgICAgfSwgdGhpcy5fZWxlbWVudCwgaXNBbmltYXRlZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByaXZhdGVcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2Rlc3Ryb3lFbGVtZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3lFbGVtZW50KCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTE9TRUQpO1xuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RhdGljXG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OlxuICAgICAgLy8gR2V0dGVyc1xuICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSRmO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJqUXVlcnlJbnRlcmZhY2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBkYXRhID0gQWxlcnQuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5zdGFydHNXaXRoKCdfJykgfHwgY29uZmlnID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIi5jb25jYXQoY29uZmlnLCBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gQWxlcnQ7XG4gIH0oQmFzZUNvbXBvbmVudCk7XG4gIC8qKlxuICAgKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgKi9cbiAgZW5hYmxlRGlzbWlzc1RyaWdnZXIoQWxlcnQsICdjbG9zZScpO1xuXG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luKEFsZXJ0KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogYnV0dG9uLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBOQU1FJGUgPSAnYnV0dG9uJztcbiAgdmFyIERBVEFfS0VZJDkgPSAnYnMuYnV0dG9uJztcbiAgdmFyIEVWRU5UX0tFWSRhID0gXCIuXCIuY29uY2F0KERBVEFfS0VZJDkpO1xuICB2YXIgREFUQV9BUElfS0VZJDYgPSAnLmRhdGEtYXBpJztcbiAgdmFyIENMQVNTX05BTUVfQUNUSVZFJDMgPSAnYWN0aXZlJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDUgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uXCJdJztcbiAgdmFyIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDYgPSBcImNsaWNrXCIuY29uY2F0KEVWRU5UX0tFWSRhKS5jb25jYXQoREFUQV9BUElfS0VZJDYpO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuICB2YXIgQnV0dG9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUNvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHMoQnV0dG9uLCBfQmFzZUNvbXBvbmVudDIpO1xuICAgIHZhciBfc3VwZXIzID0gX2NyZWF0ZVN1cGVyKEJ1dHRvbik7XG4gICAgZnVuY3Rpb24gQnV0dG9uKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1dHRvbik7XG4gICAgICByZXR1cm4gX3N1cGVyMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uLCBbe1xuICAgICAga2V5OiBcInRvZ2dsZVwiLFxuICAgICAgdmFsdWU6XG4gICAgICAvLyBQdWJsaWNcbiAgICAgIGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgLy8gVG9nZ2xlIGNsYXNzIGFuZCBzeW5jIHRoZSBgYXJpYS1wcmVzc2VkYCBhdHRyaWJ1dGUgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgLnRvZ2dsZSgpYCBtZXRob2RcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShDTEFTU19OQU1FX0FDVElWRSQzKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0YXRpY1xuICAgIH1dLCBbe1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDpcbiAgICAgIC8vIEdldHRlcnNcbiAgICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUUkZTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwialF1ZXJ5SW50ZXJmYWNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24galF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IEJ1dHRvbi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xuICAgICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gQnV0dG9uO1xuICB9KEJhc2VDb21wb25lbnQpO1xuICAvKipcbiAgICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAgICovXG4gIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNiwgU0VMRUNUT1JfREFUQV9UT0dHTEUkNSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgYnV0dG9uID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoU0VMRUNUT1JfREFUQV9UT0dHTEUkNSk7XG4gICAgdmFyIGRhdGEgPSBCdXR0b24uZ2V0T3JDcmVhdGVJbnN0YW5jZShidXR0b24pO1xuICAgIGRhdGEudG9nZ2xlKCk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luKEJ1dHRvbik7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjUuMy4wLWFscGhhMSk6IHV0aWwvc3dpcGUuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUkZCA9ICdzd2lwZSc7XG4gIHZhciBFVkVOVF9LRVkkOSA9ICcuYnMuc3dpcGUnO1xuICB2YXIgRVZFTlRfVE9VQ0hTVEFSVCA9IFwidG91Y2hzdGFydFwiLmNvbmNhdChFVkVOVF9LRVkkOSk7XG4gIHZhciBFVkVOVF9UT1VDSE1PVkUgPSBcInRvdWNobW92ZVwiLmNvbmNhdChFVkVOVF9LRVkkOSk7XG4gIHZhciBFVkVOVF9UT1VDSEVORCA9IFwidG91Y2hlbmRcIi5jb25jYXQoRVZFTlRfS0VZJDkpO1xuICB2YXIgRVZFTlRfUE9JTlRFUkRPV04gPSBcInBvaW50ZXJkb3duXCIuY29uY2F0KEVWRU5UX0tFWSQ5KTtcbiAgdmFyIEVWRU5UX1BPSU5URVJVUCA9IFwicG9pbnRlcnVwXCIuY29uY2F0KEVWRU5UX0tFWSQ5KTtcbiAgdmFyIFBPSU5URVJfVFlQRV9UT1VDSCA9ICd0b3VjaCc7XG4gIHZhciBQT0lOVEVSX1RZUEVfUEVOID0gJ3Blbic7XG4gIHZhciBDTEFTU19OQU1FX1BPSU5URVJfRVZFTlQgPSAncG9pbnRlci1ldmVudCc7XG4gIHZhciBTV0lQRV9USFJFU0hPTEQgPSA0MDtcbiAgdmFyIERlZmF1bHQkYyA9IHtcbiAgICBlbmRDYWxsYmFjazogbnVsbCxcbiAgICBsZWZ0Q2FsbGJhY2s6IG51bGwsXG4gICAgcmlnaHRDYWxsYmFjazogbnVsbFxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkYyA9IHtcbiAgICBlbmRDYWxsYmFjazogJyhmdW5jdGlvbnxudWxsKScsXG4gICAgbGVmdENhbGxiYWNrOiAnKGZ1bmN0aW9ufG51bGwpJyxcbiAgICByaWdodENhbGxiYWNrOiAnKGZ1bmN0aW9ufG51bGwpJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuICB2YXIgU3dpcGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db25maWcyKSB7XG4gICAgX2luaGVyaXRzKFN3aXBlLCBfQ29uZmlnMik7XG4gICAgdmFyIF9zdXBlcjQgPSBfY3JlYXRlU3VwZXIoU3dpcGUpO1xuICAgIGZ1bmN0aW9uIFN3aXBlKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdmFyIF90aGlzMztcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2lwZSk7XG4gICAgICBfdGhpczMgPSBfc3VwZXI0LmNhbGwodGhpcyk7XG4gICAgICBfdGhpczMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgaWYgKCFlbGVtZW50IHx8ICFTd2lwZS5pc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpczMpO1xuICAgICAgfVxuICAgICAgX3RoaXMzLl9jb25maWcgPSBfdGhpczMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgX3RoaXMzLl9kZWx0YVggPSAwO1xuICAgICAgX3RoaXMzLl9zdXBwb3J0UG9pbnRlckV2ZW50cyA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCk7XG4gICAgICBfdGhpczMuX2luaXRFdmVudHMoKTtcbiAgICAgIHJldHVybiBfdGhpczM7XG4gICAgfVxuXG4gICAgLy8gR2V0dGVyc1xuICAgIF9jcmVhdGVDbGFzcyhTd2lwZSwgW3tcbiAgICAgIGtleTogXCJkaXNwb3NlXCIsXG4gICAgICB2YWx1ZTpcbiAgICAgIC8vIFB1YmxpY1xuICAgICAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVkkOSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByaXZhdGVcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3N0YXJ0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3N0YXJ0KGV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5fc3VwcG9ydFBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICB0aGlzLl9kZWx0YVggPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9ldmVudElzUG9pbnRlclBlblRvdWNoKGV2ZW50KSkge1xuICAgICAgICAgIHRoaXMuX2RlbHRhWCA9IGV2ZW50LmNsaWVudFg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2VuZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9lbmQoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2V2ZW50SXNQb2ludGVyUGVuVG91Y2goZXZlbnQpKSB7XG4gICAgICAgICAgdGhpcy5fZGVsdGFYID0gZXZlbnQuY2xpZW50WCAtIHRoaXMuX2RlbHRhWDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oYW5kbGVTd2lwZSgpO1xuICAgICAgICBleGVjdXRlKHRoaXMuX2NvbmZpZy5lbmRDYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9tb3ZlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX21vdmUoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZGVsdGFYID0gZXZlbnQudG91Y2hlcyAmJiBldmVudC50b3VjaGVzLmxlbmd0aCA+IDEgPyAwIDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gdGhpcy5fZGVsdGFYO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaGFuZGxlU3dpcGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlU3dpcGUoKSB7XG4gICAgICAgIHZhciBhYnNEZWx0YVggPSBNYXRoLmFicyh0aGlzLl9kZWx0YVgpO1xuICAgICAgICBpZiAoYWJzRGVsdGFYIDw9IFNXSVBFX1RIUkVTSE9MRCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gYWJzRGVsdGFYIC8gdGhpcy5fZGVsdGFYO1xuICAgICAgICB0aGlzLl9kZWx0YVggPSAwO1xuICAgICAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBleGVjdXRlKGRpcmVjdGlvbiA+IDAgPyB0aGlzLl9jb25maWcucmlnaHRDYWxsYmFjayA6IHRoaXMuX2NvbmZpZy5sZWZ0Q2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaW5pdEV2ZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0RXZlbnRzKCkge1xuICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3N1cHBvcnRQb2ludGVyRXZlbnRzKSB7XG4gICAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1BPSU5URVJET1dOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQuX3N0YXJ0KGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfUE9JTlRFUlVQLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQuX2VuZChldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1RPVUNIU1RBUlQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5fc3RhcnQoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSE1PVkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNC5fbW92ZShldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1RPVUNIRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczQuX2VuZChldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2V2ZW50SXNQb2ludGVyUGVuVG91Y2hcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZXZlbnRJc1BvaW50ZXJQZW5Ub3VjaChldmVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3VwcG9ydFBvaW50ZXJFdmVudHMgJiYgKGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfUEVOIHx8IGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfVE9VQ0gpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGF0aWNcbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkYztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkYztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FJGQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzU3VwcG9ydGVkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XG4gICAgICAgIHJldHVybiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMDtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFN3aXBlO1xuICB9KENvbmZpZyk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY1LjMuMC1hbHBoYTEpOiBjYXJvdXNlbC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG4gIHZhciBOQU1FJGMgPSAnY2Fyb3VzZWwnO1xuICB2YXIgREFUQV9LRVkkOCA9ICdicy5jYXJvdXNlbCc7XG4gIHZhciBFVkVOVF9LRVkkOCA9IFwiLlwiLmNvbmNhdChEQVRBX0tFWSQ4KTtcbiAgdmFyIERBVEFfQVBJX0tFWSQ1ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBBUlJPV19MRUZUX0tFWSQxID0gJ0Fycm93TGVmdCc7XG4gIHZhciBBUlJPV19SSUdIVF9LRVkkMSA9ICdBcnJvd1JpZ2h0JztcbiAgdmFyIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgPSA1MDA7IC8vIFRpbWUgZm9yIG1vdXNlIGNvbXBhdCBldmVudHMgdG8gZmlyZSBhZnRlciB0b3VjaFxuXG4gIHZhciBPUkRFUl9ORVhUID0gJ25leHQnO1xuICB2YXIgT1JERVJfUFJFViA9ICdwcmV2JztcbiAgdmFyIERJUkVDVElPTl9MRUZUID0gJ2xlZnQnO1xuICB2YXIgRElSRUNUSU9OX1JJR0hUID0gJ3JpZ2h0JztcbiAgdmFyIEVWRU5UX1NMSURFID0gXCJzbGlkZVwiLmNvbmNhdChFVkVOVF9LRVkkOCk7XG4gIHZhciBFVkVOVF9TTElEID0gXCJzbGlkXCIuY29uY2F0KEVWRU5UX0tFWSQ4KTtcbiAgdmFyIEVWRU5UX0tFWURPV04kMSA9IFwia2V5ZG93blwiLmNvbmNhdChFVkVOVF9LRVkkOCk7XG4gIHZhciBFVkVOVF9NT1VTRUVOVEVSJDEgPSBcIm1vdXNlZW50ZXJcIi5jb25jYXQoRVZFTlRfS0VZJDgpO1xuICB2YXIgRVZFTlRfTU9VU0VMRUFWRSQxID0gXCJtb3VzZWxlYXZlXCIuY29uY2F0KEVWRU5UX0tFWSQ4KTtcbiAgdmFyIEVWRU5UX0RSQUdfU1RBUlQgPSBcImRyYWdzdGFydFwiLmNvbmNhdChFVkVOVF9LRVkkOCk7XG4gIHZhciBFVkVOVF9MT0FEX0RBVEFfQVBJJDMgPSBcImxvYWRcIi5jb25jYXQoRVZFTlRfS0VZJDgpLmNvbmNhdChEQVRBX0FQSV9LRVkkNSk7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQ1ID0gXCJjbGlja1wiLmNvbmNhdChFVkVOVF9LRVkkOCkuY29uY2F0KERBVEFfQVBJX0tFWSQ1KTtcbiAgdmFyIENMQVNTX05BTUVfQ0FST1VTRUwgPSAnY2Fyb3VzZWwnO1xuICB2YXIgQ0xBU1NfTkFNRV9BQ1RJVkUkMiA9ICdhY3RpdmUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TTElERSA9ICdzbGlkZSc7XG4gIHZhciBDTEFTU19OQU1FX0VORCA9ICdjYXJvdXNlbC1pdGVtLWVuZCc7XG4gIHZhciBDTEFTU19OQU1FX1NUQVJUID0gJ2Nhcm91c2VsLWl0ZW0tc3RhcnQnO1xuICB2YXIgQ0xBU1NfTkFNRV9ORVhUID0gJ2Nhcm91c2VsLWl0ZW0tbmV4dCc7XG4gIHZhciBDTEFTU19OQU1FX1BSRVYgPSAnY2Fyb3VzZWwtaXRlbS1wcmV2JztcbiAgdmFyIFNFTEVDVE9SX0FDVElWRSA9ICcuYWN0aXZlJztcbiAgdmFyIFNFTEVDVE9SX0lURU0gPSAnLmNhcm91c2VsLWl0ZW0nO1xuICB2YXIgU0VMRUNUT1JfQUNUSVZFX0lURU0gPSBTRUxFQ1RPUl9BQ1RJVkUgKyBTRUxFQ1RPUl9JVEVNO1xuICB2YXIgU0VMRUNUT1JfSVRFTV9JTUcgPSAnLmNhcm91c2VsLWl0ZW0gaW1nJztcbiAgdmFyIFNFTEVDVE9SX0lORElDQVRPUlMgPSAnLmNhcm91c2VsLWluZGljYXRvcnMnO1xuICB2YXIgU0VMRUNUT1JfREFUQV9TTElERSA9ICdbZGF0YS1icy1zbGlkZV0sIFtkYXRhLWJzLXNsaWRlLXRvXSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1JJREUgPSAnW2RhdGEtYnMtcmlkZT1cImNhcm91c2VsXCJdJztcbiAgdmFyIEtFWV9UT19ESVJFQ1RJT04gPSAoX0tFWV9UT19ESVJFQ1RJT04gPSB7fSwgX2RlZmluZVByb3BlcnR5KF9LRVlfVE9fRElSRUNUSU9OLCBBUlJPV19MRUZUX0tFWSQxLCBESVJFQ1RJT05fUklHSFQpLCBfZGVmaW5lUHJvcGVydHkoX0tFWV9UT19ESVJFQ1RJT04sIEFSUk9XX1JJR0hUX0tFWSQxLCBESVJFQ1RJT05fTEVGVCksIF9LRVlfVE9fRElSRUNUSU9OKTtcbiAgdmFyIERlZmF1bHQkYiA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICByaWRlOiBmYWxzZSxcbiAgICB0b3VjaDogdHJ1ZSxcbiAgICB3cmFwOiB0cnVlXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSRiID0ge1xuICAgIGludGVydmFsOiAnKG51bWJlcnxib29sZWFuKScsXG4gICAgLy8gVE9ETzp2NiByZW1vdmUgYm9vbGVhbiBzdXBwb3J0XG4gICAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgICBwYXVzZTogJyhzdHJpbmd8Ym9vbGVhbiknLFxuICAgIHJpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICB0b3VjaDogJ2Jvb2xlYW4nLFxuICAgIHdyYXA6ICdib29sZWFuJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuICB2YXIgQ2Fyb3VzZWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlQ29tcG9uZW50Mykge1xuICAgIF9pbmhlcml0cyhDYXJvdXNlbCwgX0Jhc2VDb21wb25lbnQzKTtcbiAgICB2YXIgX3N1cGVyNSA9IF9jcmVhdGVTdXBlcihDYXJvdXNlbCk7XG4gICAgZnVuY3Rpb24gQ2Fyb3VzZWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXM1O1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcm91c2VsKTtcbiAgICAgIF90aGlzNSA9IF9zdXBlcjUuY2FsbCh0aGlzLCBlbGVtZW50LCBjb25maWcpO1xuICAgICAgX3RoaXM1Ll9pbnRlcnZhbCA9IG51bGw7XG4gICAgICBfdGhpczUuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgX3RoaXM1Ll9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzNS50b3VjaFRpbWVvdXQgPSBudWxsO1xuICAgICAgX3RoaXM1Ll9zd2lwZUhlbHBlciA9IG51bGw7XG4gICAgICBfdGhpczUuX2luZGljYXRvcnNFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9JTkRJQ0FUT1JTLCBfdGhpczUuX2VsZW1lbnQpO1xuICAgICAgX3RoaXM1Ll9hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgaWYgKF90aGlzNS5fY29uZmlnLnJpZGUgPT09IENMQVNTX05BTUVfQ0FST1VTRUwpIHtcbiAgICAgICAgX3RoaXM1LmN5Y2xlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXM1O1xuICAgIH1cblxuICAgIC8vIEdldHRlcnNcbiAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIFt7XG4gICAgICBrZXk6IFwibmV4dFwiLFxuICAgICAgdmFsdWU6XG4gICAgICAvLyBQdWJsaWNcbiAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIHRoaXMuX3NsaWRlKE9SREVSX05FWFQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJuZXh0V2hlblZpc2libGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0V2hlblZpc2libGUoKSB7XG4gICAgICAgIC8vIEZJWE1FIFRPRE8gdXNlIGBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGVgXG4gICAgICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcbiAgICAgICAgLy8gb3IgdGhlIGNhcm91c2VsIG9yIGl0cyBwYXJlbnQgaXNuJ3QgdmlzaWJsZVxuICAgICAgICBpZiAoIWRvY3VtZW50LmhpZGRlbiAmJiBpc1Zpc2libGUodGhpcy5fZWxlbWVudCkpIHtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJwcmV2XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcHJldigpIHtcbiAgICAgICAgdGhpcy5fc2xpZGUoT1JERVJfUFJFVik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInBhdXNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGVhckludGVydmFsKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImN5Y2xlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY3ljbGUoKSB7XG4gICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuICAgICAgICB0aGlzLl9jbGVhckludGVydmFsKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUludGVydmFsKCk7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczYubmV4dFdoZW5WaXNpYmxlKCk7XG4gICAgICAgIH0sIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9tYXliZUVuYWJsZUN5Y2xlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX21heWJlRW5hYmxlQ3ljbGUoKSB7XG4gICAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZy5yaWRlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgICBFdmVudEhhbmRsZXIub25lKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NMSUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczcuY3ljbGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRvKGluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpczggPSB0aGlzO1xuICAgICAgICB2YXIgaXRlbXMgPSB0aGlzLl9nZXRJdGVtcygpO1xuICAgICAgICBpZiAoaW5kZXggPiBpdGVtcy5sZW5ndGggLSAxIHx8IGluZGV4IDwgMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0aGlzLl9lbGVtZW50LCBFVkVOVF9TTElELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM4LnRvKGluZGV4KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2dldEFjdGl2ZSgpKTtcbiAgICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3JkZXIgPSBpbmRleCA+IGFjdGl2ZUluZGV4ID8gT1JERVJfTkVYVCA6IE9SREVSX1BSRVY7XG4gICAgICAgIHRoaXMuX3NsaWRlKG9yZGVyLCBpdGVtc1tpbmRleF0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNwb3NlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N3aXBlSGVscGVyKSB7XG4gICAgICAgICAgdGhpcy5fc3dpcGVIZWxwZXIuZGlzcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKENhcm91c2VsLnByb3RvdHlwZSksIFwiZGlzcG9zZVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICAvLyBQcml2YXRlXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9jb25maWdBZnRlck1lcmdlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2NvbmZpZ0FmdGVyTWVyZ2UoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgPSBjb25maWcuaW50ZXJ2YWw7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9hZGRFdmVudExpc3RlbmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTiQxLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczkuX2tleWRvd24oZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VFTlRFUiQxLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM5LnBhdXNlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFTEVBVkUkMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzOS5fbWF5YmVFbmFibGVDeWNsZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcudG91Y2ggJiYgU3dpcGUuaXNTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgIHRoaXMuX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfYWRkVG91Y2hFdmVudExpc3RlbmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG4gICAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JVEVNX0lNRywgdGhpcy5fZWxlbWVudCkpLFxuICAgICAgICAgIF9zdGVwNDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGltZyA9IF9zdGVwNC52YWx1ZTtcbiAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vbihpbWcsIEVWRU5UX0RSQUdfU1RBUlQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yNC5mKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVuZENhbGxCYWNrID0gZnVuY3Rpb24gZW5kQ2FsbEJhY2soKSB7XG4gICAgICAgICAgaWYgKF90aGlzMTAuX2NvbmZpZy5wYXVzZSAhPT0gJ2hvdmVyJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIGl0J3MgYSB0b3VjaC1lbmFibGVkIGRldmljZSwgbW91c2VlbnRlci9sZWF2ZSBhcmUgZmlyZWQgYXNcbiAgICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyB3b3VsZCBzdG9wIGN5Y2xpbmcgdW50aWwgdXNlciB0YXBwZWQgb3V0IG9mIGl0O1xuICAgICAgICAgIC8vIGhlcmUsIHdlIGxpc3RlbiBmb3IgdG91Y2hlbmQsIGV4cGxpY2l0bHkgcGF1c2UgdGhlIGNhcm91c2VsXG4gICAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgICAvLyBpcyBOT1QgZmlyZWQpIGFuZCBhZnRlciBhIHRpbWVvdXQgKHRvIGFsbG93IGZvciBtb3VzZSBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgLy8gZXZlbnRzIHRvIGZpcmUpIHdlIGV4cGxpY2l0bHkgcmVzdGFydCBjeWNsaW5nXG5cbiAgICAgICAgICBfdGhpczEwLnBhdXNlKCk7XG4gICAgICAgICAgaWYgKF90aGlzMTAudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMxMC50b3VjaFRpbWVvdXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczEwLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMTAuX21heWJlRW5hYmxlQ3ljbGUoKTtcbiAgICAgICAgICB9LCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgX3RoaXMxMC5fY29uZmlnLmludGVydmFsKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN3aXBlQ29uZmlnID0ge1xuICAgICAgICAgIGxlZnRDYWxsYmFjazogZnVuY3Rpb24gbGVmdENhbGxiYWNrKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMTAuX3NsaWRlKF90aGlzMTAuX2RpcmVjdGlvblRvT3JkZXIoRElSRUNUSU9OX0xFRlQpKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJpZ2h0Q2FsbGJhY2s6IGZ1bmN0aW9uIHJpZ2h0Q2FsbGJhY2soKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMxMC5fc2xpZGUoX3RoaXMxMC5fZGlyZWN0aW9uVG9PcmRlcihESVJFQ1RJT05fUklHSFQpKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVuZENhbGxiYWNrOiBlbmRDYWxsQmFja1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zd2lwZUhlbHBlciA9IG5ldyBTd2lwZSh0aGlzLl9lbGVtZW50LCBzd2lwZUNvbmZpZyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9rZXlkb3duXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2tleWRvd24oZXZlbnQpIHtcbiAgICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBLRVlfVE9fRElSRUNUSU9OW2V2ZW50LmtleV07XG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMuX3NsaWRlKHRoaXMuX2RpcmVjdGlvblRvT3JkZXIoZGlyZWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldEl0ZW1JbmRleFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SXRlbXMoKS5pbmRleE9mKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGluZGV4KSB7XG4gICAgICAgIGlmICghdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFjdGl2ZUluZGljYXRvciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQUNUSVZFLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCk7XG4gICAgICAgIGFjdGl2ZUluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgICBhY3RpdmVJbmRpY2F0b3IucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcbiAgICAgICAgdmFyIG5ld0FjdGl2ZUluZGljYXRvciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoXCJbZGF0YS1icy1zbGlkZS10bz1cXFwiXCIuY29uY2F0KGluZGV4LCBcIlxcXCJdXCIpLCB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCk7XG4gICAgICAgIGlmIChuZXdBY3RpdmVJbmRpY2F0b3IpIHtcbiAgICAgICAgICBuZXdBY3RpdmVJbmRpY2F0b3IuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSQyKTtcbiAgICAgICAgICBuZXdBY3RpdmVJbmRpY2F0b3Iuc2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnLCAndHJ1ZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl91cGRhdGVJbnRlcnZhbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVJbnRlcnZhbCgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9hY3RpdmVFbGVtZW50IHx8IHRoaXMuX2dldEFjdGl2ZSgpO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsZW1lbnRJbnRlcnZhbCA9IE51bWJlci5wYXJzZUludChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy1pbnRlcnZhbCcpLCAxMCk7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IGVsZW1lbnRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2xpZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2xpZGUob3JkZXIpIHtcbiAgICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuICAgICAgICB2YXIgZWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IHRoaXMuX2dldEFjdGl2ZSgpO1xuICAgICAgICB2YXIgaXNOZXh0ID0gb3JkZXIgPT09IE9SREVSX05FWFQ7XG4gICAgICAgIHZhciBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQodGhpcy5fZ2V0SXRlbXMoKSwgYWN0aXZlRWxlbWVudCwgaXNOZXh0LCB0aGlzLl9jb25maWcud3JhcCk7XG4gICAgICAgIGlmIChuZXh0RWxlbWVudCA9PT0gYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChuZXh0RWxlbWVudCk7XG4gICAgICAgIHZhciB0cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQoZXZlbnROYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIEV2ZW50SGFuZGxlci50cmlnZ2VyKF90aGlzMTEuX2VsZW1lbnQsIGV2ZW50TmFtZSwge1xuICAgICAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG4gICAgICAgICAgICBkaXJlY3Rpb246IF90aGlzMTEuX29yZGVyVG9EaXJlY3Rpb24ob3JkZXIpLFxuICAgICAgICAgICAgZnJvbTogX3RoaXMxMS5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpLFxuICAgICAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNsaWRlRXZlbnQgPSB0cmlnZ2VyRXZlbnQoRVZFTlRfU0xJREUpO1xuICAgICAgICBpZiAoc2xpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBTb21lIHdlaXJkbmVzcyBpcyBoYXBwZW5pbmcsIHNvIHdlIGJhaWxcbiAgICAgICAgICAvLyB0b2RvOiBjaGFuZ2UgdGVzdHMgdGhhdCB1c2UgZW1wdHkgZGl2cyB0byBhdm9pZCB0aGlzIGNoZWNrXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc0N5Y2xpbmcgPSBCb29sZWFuKHRoaXMuX2ludGVydmFsKTtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KG5leHRFbGVtZW50SW5kZXgpO1xuICAgICAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgICAgIHZhciBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IGlzTmV4dCA/IENMQVNTX05BTUVfU1RBUlQgOiBDTEFTU19OQU1FX0VORDtcbiAgICAgICAgdmFyIG9yZGVyQ2xhc3NOYW1lID0gaXNOZXh0ID8gQ0xBU1NfTkFNRV9ORVhUIDogQ0xBU1NfTkFNRV9QUkVWO1xuICAgICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKG9yZGVyQ2xhc3NOYW1lKTtcbiAgICAgICAgcmVmbG93KG5leHRFbGVtZW50KTtcbiAgICAgICAgYWN0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgIHZhciBjb21wbGV0ZUNhbGxCYWNrID0gZnVuY3Rpb24gY29tcGxldGVDYWxsQmFjaygpIHtcbiAgICAgICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGRpcmVjdGlvbmFsQ2xhc3NOYW1lLCBvcmRlckNsYXNzTmFtZSk7XG4gICAgICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSQyKTtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUkMiwgb3JkZXJDbGFzc05hbWUsIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgICBfdGhpczExLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0cmlnZ2VyRXZlbnQoRVZFTlRfU0xJRCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgYWN0aXZlRWxlbWVudCwgdGhpcy5faXNBbmltYXRlZCgpKTtcbiAgICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICAgIHRoaXMuY3ljbGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaXNBbmltYXRlZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc0FuaW1hdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TTElERSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRBY3RpdmVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0QWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRJdGVtc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfSVRFTSwgdGhpcy5fZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9jbGVhckludGVydmFsXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2NsZWFySW50ZXJ2YWwoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZGlyZWN0aW9uVG9PcmRlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9kaXJlY3Rpb25Ub09yZGVyKGRpcmVjdGlvbikge1xuICAgICAgICBpZiAoaXNSVEwoKSkge1xuICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9MRUZUID8gT1JERVJfUFJFViA6IE9SREVSX05FWFQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX0xFRlQgPyBPUkRFUl9ORVhUIDogT1JERVJfUFJFVjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX29yZGVyVG9EaXJlY3Rpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb3JkZXJUb0RpcmVjdGlvbihvcmRlcikge1xuICAgICAgICBpZiAoaXNSVEwoKSkge1xuICAgICAgICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9SSUdIVCA6IERJUkVDVElPTl9MRUZUO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGF0aWNcbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkYjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkYjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FJGM7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImpRdWVyeUludGVyZmFjZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBDYXJvdXNlbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBkYXRhLnRvKGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5zdGFydHNXaXRoKCdfJykgfHwgY29uZmlnID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiLmNvbmNhdChjb25maWcsIFwiXFxcIlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gQ2Fyb3VzZWw7XG4gIH0oQmFzZUNvbXBvbmVudCk7XG4gIC8qKlxuICAgKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgKi9cbiAgRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9DTElDS19EQVRBX0FQSSQ1LCBTRUxFQ1RPUl9EQVRBX1NMSURFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gU2VsZWN0b3JFbmdpbmUuZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKTtcbiAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0NBUk9VU0VMKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjYXJvdXNlbCA9IENhcm91c2VsLmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KTtcbiAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLXNsaWRlLXRvJyk7XG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgIGNhcm91c2VsLnRvKHNsaWRlSW5kZXgpO1xuICAgICAgY2Fyb3VzZWwuX21heWJlRW5hYmxlQ3ljbGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGUodGhpcywgJ3NsaWRlJykgPT09ICduZXh0Jykge1xuICAgICAgY2Fyb3VzZWwubmV4dCgpO1xuICAgICAgY2Fyb3VzZWwuX21heWJlRW5hYmxlQ3ljbGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2Fyb3VzZWwucHJldigpO1xuICAgIGNhcm91c2VsLl9tYXliZUVuYWJsZUN5Y2xlKCk7XG4gIH0pO1xuICBFdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9MT0FEX0RBVEFfQVBJJDMsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2Fyb3VzZWxzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1JJREUpO1xuICAgIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY2Fyb3VzZWxzKSxcbiAgICAgIF9zdGVwNTtcbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGNhcm91c2VsID0gX3N0ZXA1LnZhbHVlO1xuICAgICAgICBDYXJvdXNlbC5nZXRPckNyZWF0ZUluc3RhbmNlKGNhcm91c2VsKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvcjUuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3I1LmYoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luKENhcm91c2VsKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogY29sbGFwc2UuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUkYiA9ICdjb2xsYXBzZSc7XG4gIHZhciBEQVRBX0tFWSQ3ID0gJ2JzLmNvbGxhcHNlJztcbiAgdmFyIEVWRU5UX0tFWSQ3ID0gXCIuXCIuY29uY2F0KERBVEFfS0VZJDcpO1xuICB2YXIgREFUQV9BUElfS0VZJDQgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEVWRU5UX1NIT1ckNiA9IFwic2hvd1wiLmNvbmNhdChFVkVOVF9LRVkkNyk7XG4gIHZhciBFVkVOVF9TSE9XTiQ2ID0gXCJzaG93blwiLmNvbmNhdChFVkVOVF9LRVkkNyk7XG4gIHZhciBFVkVOVF9ISURFJDYgPSBcImhpZGVcIi5jb25jYXQoRVZFTlRfS0VZJDcpO1xuICB2YXIgRVZFTlRfSElEREVOJDYgPSBcImhpZGRlblwiLmNvbmNhdChFVkVOVF9LRVkkNyk7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQ0ID0gXCJjbGlja1wiLmNvbmNhdChFVkVOVF9LRVkkNykuY29uY2F0KERBVEFfQVBJX0tFWSQ0KTtcbiAgdmFyIENMQVNTX05BTUVfU0hPVyQ3ID0gJ3Nob3cnO1xuICB2YXIgQ0xBU1NfTkFNRV9DT0xMQVBTRSA9ICdjb2xsYXBzZSc7XG4gIHZhciBDTEFTU19OQU1FX0NPTExBUFNJTkcgPSAnY29sbGFwc2luZyc7XG4gIHZhciBDTEFTU19OQU1FX0NPTExBUFNFRCA9ICdjb2xsYXBzZWQnO1xuICB2YXIgQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4gPSBcIjpzY29wZSAuXCIuY29uY2F0KENMQVNTX05BTUVfQ09MTEFQU0UsIFwiIC5cIikuY29uY2F0KENMQVNTX05BTUVfQ09MTEFQU0UpO1xuICB2YXIgQ0xBU1NfTkFNRV9IT1JJWk9OVEFMID0gJ2NvbGxhcHNlLWhvcml6b250YWwnO1xuICB2YXIgV0lEVEggPSAnd2lkdGgnO1xuICB2YXIgSEVJR0hUID0gJ2hlaWdodCc7XG4gIHZhciBTRUxFQ1RPUl9BQ1RJVkVTID0gJy5jb2xsYXBzZS5zaG93LCAuY29sbGFwc2UuY29sbGFwc2luZyc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0ID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImNvbGxhcHNlXCJdJztcbiAgdmFyIERlZmF1bHQkYSA9IHtcbiAgICBwYXJlbnQ6IG51bGwsXG4gICAgdG9nZ2xlOiB0cnVlXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSRhID0ge1xuICAgIHBhcmVudDogJyhudWxsfGVsZW1lbnQpJyxcbiAgICB0b2dnbGU6ICdib29sZWFuJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuICB2YXIgQ29sbGFwc2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlQ29tcG9uZW50NCkge1xuICAgIF9pbmhlcml0cyhDb2xsYXBzZSwgX0Jhc2VDb21wb25lbnQ0KTtcbiAgICB2YXIgX3N1cGVyNiA9IF9jcmVhdGVTdXBlcihDb2xsYXBzZSk7XG4gICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXMxMjtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb2xsYXBzZSk7XG4gICAgICBfdGhpczEyID0gX3N1cGVyNi5jYWxsKHRoaXMsIGVsZW1lbnQsIGNvbmZpZyk7XG4gICAgICBfdGhpczEyLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIF90aGlzMTIuX3RyaWdnZXJBcnJheSA9IFtdO1xuICAgICAgdmFyIHRvZ2dsZUxpc3QgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfVE9HR0xFJDQpO1xuICAgICAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0b2dnbGVMaXN0KSxcbiAgICAgICAgX3N0ZXA2O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChfaXRlcmF0b3I2LnMoKTsgIShfc3RlcDYgPSBfaXRlcmF0b3I2Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgZWxlbSA9IF9zdGVwNi52YWx1ZTtcbiAgICAgICAgICB2YXIgc2VsZWN0b3IgPSBTZWxlY3RvckVuZ2luZS5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pO1xuICAgICAgICAgIHZhciBmaWx0ZXJFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3RvcikuZmlsdGVyKGZ1bmN0aW9uIChmb3VuZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3VuZEVsZW1lbnQgPT09IF90aGlzMTIuX2VsZW1lbnQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsICYmIGZpbHRlckVsZW1lbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpczEyLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIF9pdGVyYXRvcjYuZigpO1xuICAgICAgfVxuICAgICAgX3RoaXMxMi5faW5pdGlhbGl6ZUNoaWxkcmVuKCk7XG4gICAgICBpZiAoIV90aGlzMTIuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgICAgX3RoaXMxMi5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKF90aGlzMTIuX3RyaWdnZXJBcnJheSwgX3RoaXMxMi5faXNTaG93bigpKTtcbiAgICAgIH1cbiAgICAgIGlmIChfdGhpczEyLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICAgIF90aGlzMTIudG9nZ2xlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXMxMjtcbiAgICB9XG5cbiAgICAvLyBHZXR0ZXJzXG4gICAgX2NyZWF0ZUNsYXNzKENvbGxhcHNlLCBbe1xuICAgICAga2V5OiBcInRvZ2dsZVwiLFxuICAgICAgdmFsdWU6XG4gICAgICAvLyBQdWJsaWNcbiAgICAgIGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNob3dcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5faXNTaG93bigpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhY3RpdmVDaGlsZHJlbiA9IFtdO1xuXG4gICAgICAgIC8vIGZpbmQgYWN0aXZlIGNoaWxkcmVuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICAgICAgYWN0aXZlQ2hpbGRyZW4gPSB0aGlzLl9nZXRGaXJzdExldmVsQ2hpbGRyZW4oU0VMRUNUT1JfQUNUSVZFUykuZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAhPT0gX3RoaXMxMy5fZWxlbWVudDtcbiAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBDb2xsYXBzZS5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgdG9nZ2xlOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2ZUNoaWxkcmVuLmxlbmd0aCAmJiBhY3RpdmVDaGlsZHJlblswXS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydEV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyQ2KTtcbiAgICAgICAgaWYgKHN0YXJ0RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2l0ZXJhdG9yNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGFjdGl2ZUNoaWxkcmVuKSxcbiAgICAgICAgICBfc3RlcDc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3I3LnMoKTsgIShfc3RlcDcgPSBfaXRlcmF0b3I3Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBhY3RpdmVJbnN0YW5jZSA9IF9zdGVwNy52YWx1ZTtcbiAgICAgICAgICAgIGFjdGl2ZUluc3RhbmNlLmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjcuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjcuZigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0UpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMDtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX3RyaWdnZXJBcnJheSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIF90aGlzMTMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgICAgIF90aGlzMTMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuICAgICAgICAgIF90aGlzMTMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFLCBDTEFTU19OQU1FX1NIT1ckNyk7XG4gICAgICAgICAgX3RoaXMxMy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG4gICAgICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIoX3RoaXMxMy5fZWxlbWVudCwgRVZFTlRfU0hPV04kNik7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBjYXBpdGFsaXplZERpbWVuc2lvbiA9IGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xuICAgICAgICB2YXIgc2Nyb2xsU2l6ZSA9IFwic2Nyb2xsXCIuY29uY2F0KGNhcGl0YWxpemVkRGltZW5zaW9uKTtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IFwiXCIuY29uY2F0KHRoaXMuX2VsZW1lbnRbc2Nyb2xsU2l6ZV0sIFwicHhcIik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhpZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgICB2YXIgX3RoaXMxNCA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgIXRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhcnRFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUkNik7XG4gICAgICAgIGlmIChzdGFydEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBcIlwiLmNvbmNhdCh0aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2RpbWVuc2lvbl0sIFwicHhcIik7XG4gICAgICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0lORyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0NPTExBUFNFLCBDTEFTU19OQU1FX1NIT1ckNyk7XG4gICAgICAgIHZhciBfaXRlcmF0b3I4ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fdHJpZ2dlckFycmF5KSxcbiAgICAgICAgICBfc3RlcDg7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3I4LnMoKTsgIShfc3RlcDggPSBfaXRlcmF0b3I4Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gX3N0ZXA4LnZhbHVlO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5nZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRyaWdnZXIpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgIXRoaXMuX2lzU2hvd24oZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFt0cmlnZ2VyXSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yOC5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yOC5mKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgX3RoaXMxNC5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICAgX3RoaXMxNC5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0lORyk7XG4gICAgICAgICAgX3RoaXMxNC5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0UpO1xuICAgICAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKF90aGlzMTQuX2VsZW1lbnQsIEVWRU5UX0hJRERFTiQ2KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gJyc7XG4gICAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMuX2VsZW1lbnQsIHRydWUpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaXNTaG93blwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1Nob3duKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdGhpcy5fZWxlbWVudDtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQ3KTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJpdmF0ZVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfY29uZmlnQWZ0ZXJNZXJnZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jb25maWdBZnRlck1lcmdlKGNvbmZpZykge1xuICAgICAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKTsgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZXNcbiAgICAgICAgY29uZmlnLnBhcmVudCA9IGdldEVsZW1lbnQoY29uZmlnLnBhcmVudCk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXREaW1lbnNpb25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGltZW5zaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9IT1JJWk9OVEFMKSA/IFdJRFRIIDogSEVJR0hUO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaW5pdGlhbGl6ZUNoaWxkcmVuXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXRpYWxpemVDaGlsZHJlbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuX2dldEZpcnN0TGV2ZWxDaGlsZHJlbihTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0KTtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjkgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihjaGlsZHJlbiksXG4gICAgICAgICAgX3N0ZXA5O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yOS5zKCk7ICEoX3N0ZXA5ID0gX2l0ZXJhdG9yOS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IF9zdGVwOS52YWx1ZTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IFNlbGVjdG9yRW5naW5lLmdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFtlbGVtZW50XSwgdGhpcy5faXNTaG93bihzZWxlY3RlZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yOS5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yOS5mKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldEZpcnN0TGV2ZWxDaGlsZHJlblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRGaXJzdExldmVsQ2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gU2VsZWN0b3JFbmdpbmUuZmluZChDTEFTU19OQU1FX0RFRVBFUl9DSElMRFJFTiwgdGhpcy5fY29uZmlnLnBhcmVudCk7XG4gICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlbiBpZiBncmVhdGVyIGRlcHRoXG4gICAgICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yLCB0aGlzLl9jb25maWcucGFyZW50KS5maWx0ZXIoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gIWNoaWxkcmVuLmluY2x1ZGVzKGVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModHJpZ2dlckFycmF5LCBpc09wZW4pIHtcbiAgICAgICAgaWYgKCF0cmlnZ2VyQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfaXRlcmF0b3IxMCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRyaWdnZXJBcnJheSksXG4gICAgICAgICAgX3N0ZXAxMDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjEwLnMoKTsgIShfc3RlcDEwID0gX2l0ZXJhdG9yMTAubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBfc3RlcDEwLnZhbHVlO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKENMQVNTX05BTUVfQ09MTEFQU0VELCAhaXNPcGVuKTtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjEwLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IxMC5mKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU3RhdGljXG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JGE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJGE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSRiO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJqUXVlcnlJbnRlcmZhY2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICAgIHZhciBfY29uZmlnID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBkYXRhID0gQ29sbGFwc2UuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIi5jb25jYXQoY29uZmlnLCBcIlxcXCJcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIENvbGxhcHNlO1xuICB9KEJhc2VDb21wb25lbnQpO1xuICAvKipcbiAgICogRGF0YSBBUEkgaW1wbGVtZW50YXRpb25cbiAgICovXG4gIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNCwgU0VMRUNUT1JfREFUQV9UT0dHTEUkNCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gcHJldmVudERlZmF1bHQgb25seSBmb3IgPGE+IGVsZW1lbnRzICh3aGljaCBjaGFuZ2UgdGhlIFVSTCkgbm90IGluc2lkZSB0aGUgY29sbGFwc2libGUgZWxlbWVudFxuICAgIGlmIChldmVudC50YXJnZXQudGFnTmFtZSA9PT0gJ0EnIHx8IGV2ZW50LmRlbGVnYXRlVGFyZ2V0ICYmIGV2ZW50LmRlbGVnYXRlVGFyZ2V0LnRhZ05hbWUgPT09ICdBJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgdmFyIF9pdGVyYXRvcjExID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoU2VsZWN0b3JFbmdpbmUuZ2V0TXVsdGlwbGVFbGVtZW50c0Zyb21TZWxlY3Rvcih0aGlzKSksXG4gICAgICBfc3RlcDExO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjExLnMoKTsgIShfc3RlcDExID0gX2l0ZXJhdG9yMTEubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IF9zdGVwMTEudmFsdWU7XG4gICAgICAgIENvbGxhcHNlLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwge1xuICAgICAgICAgIHRvZ2dsZTogZmFsc2VcbiAgICAgICAgfSkudG9nZ2xlKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IxMS5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjExLmYoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luKENvbGxhcHNlKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogZHJvcGRvd24uanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUkYSA9ICdkcm9wZG93bic7XG4gIHZhciBEQVRBX0tFWSQ2ID0gJ2JzLmRyb3Bkb3duJztcbiAgdmFyIEVWRU5UX0tFWSQ2ID0gXCIuXCIuY29uY2F0KERBVEFfS0VZJDYpO1xuICB2YXIgREFUQV9BUElfS0VZJDMgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEVTQ0FQRV9LRVkkMiA9ICdFc2NhcGUnO1xuICB2YXIgVEFCX0tFWSQxID0gJ1RhYic7XG4gIHZhciBBUlJPV19VUF9LRVkkMSA9ICdBcnJvd1VwJztcbiAgdmFyIEFSUk9XX0RPV05fS0VZJDEgPSAnQXJyb3dEb3duJztcbiAgdmFyIFJJR0hUX01PVVNFX0JVVFRPTiA9IDI7IC8vIE1vdXNlRXZlbnQuYnV0dG9uIHZhbHVlIGZvciB0aGUgc2Vjb25kYXJ5IGJ1dHRvbiwgdXN1YWxseSB0aGUgcmlnaHQgYnV0dG9uXG5cbiAgdmFyIEVWRU5UX0hJREUkNSA9IFwiaGlkZVwiLmNvbmNhdChFVkVOVF9LRVkkNik7XG4gIHZhciBFVkVOVF9ISURERU4kNSA9IFwiaGlkZGVuXCIuY29uY2F0KEVWRU5UX0tFWSQ2KTtcbiAgdmFyIEVWRU5UX1NIT1ckNSA9IFwic2hvd1wiLmNvbmNhdChFVkVOVF9LRVkkNik7XG4gIHZhciBFVkVOVF9TSE9XTiQ1ID0gXCJzaG93blwiLmNvbmNhdChFVkVOVF9LRVkkNik7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQzID0gXCJjbGlja1wiLmNvbmNhdChFVkVOVF9LRVkkNikuY29uY2F0KERBVEFfQVBJX0tFWSQzKTtcbiAgdmFyIEVWRU5UX0tFWURPV05fREFUQV9BUEkgPSBcImtleWRvd25cIi5jb25jYXQoRVZFTlRfS0VZJDYpLmNvbmNhdChEQVRBX0FQSV9LRVkkMyk7XG4gIHZhciBFVkVOVF9LRVlVUF9EQVRBX0FQSSA9IFwia2V5dXBcIi5jb25jYXQoRVZFTlRfS0VZJDYpLmNvbmNhdChEQVRBX0FQSV9LRVkkMyk7XG4gIHZhciBDTEFTU19OQU1FX1NIT1ckNiA9ICdzaG93JztcbiAgdmFyIENMQVNTX05BTUVfRFJPUFVQID0gJ2Ryb3B1cCc7XG4gIHZhciBDTEFTU19OQU1FX0RST1BFTkQgPSAnZHJvcGVuZCc7XG4gIHZhciBDTEFTU19OQU1FX0RST1BTVEFSVCA9ICdkcm9wc3RhcnQnO1xuICB2YXIgQ0xBU1NfTkFNRV9EUk9QVVBfQ0VOVEVSID0gJ2Ryb3B1cC1jZW50ZXInO1xuICB2YXIgQ0xBU1NfTkFNRV9EUk9QRE9XTl9DRU5URVIgPSAnZHJvcGRvd24tY2VudGVyJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMgPSAnW2RhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIl06bm90KC5kaXNhYmxlZCk6bm90KDpkaXNhYmxlZCknO1xuICB2YXIgU0VMRUNUT1JfREFUQV9UT0dHTEVfU0hPV04gPSBcIlwiLmNvbmNhdChTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzLCBcIi5cIikuY29uY2F0KENMQVNTX05BTUVfU0hPVyQ2KTtcbiAgdmFyIFNFTEVDVE9SX01FTlUgPSAnLmRyb3Bkb3duLW1lbnUnO1xuICB2YXIgU0VMRUNUT1JfTkFWQkFSID0gJy5uYXZiYXInO1xuICB2YXIgU0VMRUNUT1JfTkFWQkFSX05BViA9ICcubmF2YmFyLW5hdic7XG4gIHZhciBTRUxFQ1RPUl9WSVNJQkxFX0lURU1TID0gJy5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpJztcbiAgdmFyIFBMQUNFTUVOVF9UT1AgPSBpc1JUTCgpID8gJ3RvcC1lbmQnIDogJ3RvcC1zdGFydCc7XG4gIHZhciBQTEFDRU1FTlRfVE9QRU5EID0gaXNSVEwoKSA/ICd0b3Atc3RhcnQnIDogJ3RvcC1lbmQnO1xuICB2YXIgUExBQ0VNRU5UX0JPVFRPTSA9IGlzUlRMKCkgPyAnYm90dG9tLWVuZCcgOiAnYm90dG9tLXN0YXJ0JztcbiAgdmFyIFBMQUNFTUVOVF9CT1RUT01FTkQgPSBpc1JUTCgpID8gJ2JvdHRvbS1zdGFydCcgOiAnYm90dG9tLWVuZCc7XG4gIHZhciBQTEFDRU1FTlRfUklHSFQgPSBpc1JUTCgpID8gJ2xlZnQtc3RhcnQnIDogJ3JpZ2h0LXN0YXJ0JztcbiAgdmFyIFBMQUNFTUVOVF9MRUZUID0gaXNSVEwoKSA/ICdyaWdodC1zdGFydCcgOiAnbGVmdC1zdGFydCc7XG4gIHZhciBQTEFDRU1FTlRfVE9QQ0VOVEVSID0gJ3RvcCc7XG4gIHZhciBQTEFDRU1FTlRfQk9UVE9NQ0VOVEVSID0gJ2JvdHRvbSc7XG4gIHZhciBEZWZhdWx0JDkgPSB7XG4gICAgYXV0b0Nsb3NlOiB0cnVlLFxuICAgIGJvdW5kYXJ5OiAnY2xpcHBpbmdQYXJlbnRzJyxcbiAgICBkaXNwbGF5OiAnZHluYW1pYycsXG4gICAgb2Zmc2V0OiBbMCwgMl0sXG4gICAgcG9wcGVyQ29uZmlnOiBudWxsLFxuICAgIHJlZmVyZW5jZTogJ3RvZ2dsZSdcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDkgPSB7XG4gICAgYXV0b0Nsb3NlOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgICBkaXNwbGF5OiAnc3RyaW5nJyxcbiAgICBvZmZzZXQ6ICcoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKScsXG4gICAgcG9wcGVyQ29uZmlnOiAnKG51bGx8b2JqZWN0fGZ1bmN0aW9uKScsXG4gICAgcmVmZXJlbmNlOiAnKHN0cmluZ3xlbGVtZW50fG9iamVjdCknXG4gIH07XG5cbiAgLyoqXG4gICAqIENsYXNzIGRlZmluaXRpb25cbiAgICovXG4gIHZhciBEcm9wZG93biA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDb21wb25lbnQ1KSB7XG4gICAgX2luaGVyaXRzKERyb3Bkb3duLCBfQmFzZUNvbXBvbmVudDUpO1xuICAgIHZhciBfc3VwZXI3ID0gX2NyZWF0ZVN1cGVyKERyb3Bkb3duKTtcbiAgICBmdW5jdGlvbiBEcm9wZG93bihlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpczE1O1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duKTtcbiAgICAgIF90aGlzMTUgPSBfc3VwZXI3LmNhbGwodGhpcywgZWxlbWVudCwgY29uZmlnKTtcbiAgICAgIF90aGlzMTUuX3BvcHBlciA9IG51bGw7XG4gICAgICBfdGhpczE1Ll9wYXJlbnQgPSBfdGhpczE1Ll9lbGVtZW50LnBhcmVudE5vZGU7IC8vIGRyb3Bkb3duIHdyYXBwZXJcbiAgICAgIC8vIHRvZG86IHY2IHJldmVydCAjMzcwMTEgJiBjaGFuZ2UgbWFya3VwIGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS9kb2NzLzUuMy9mb3Jtcy9pbnB1dC1ncm91cC9cbiAgICAgIF90aGlzMTUuX21lbnUgPSBTZWxlY3RvckVuZ2luZS5uZXh0KF90aGlzMTUuX2VsZW1lbnQsIFNFTEVDVE9SX01FTlUpWzBdIHx8IFNlbGVjdG9yRW5naW5lLnByZXYoX3RoaXMxNS5fZWxlbWVudCwgU0VMRUNUT1JfTUVOVSlbMF0gfHwgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9NRU5VLCBfdGhpczE1Ll9wYXJlbnQpO1xuICAgICAgX3RoaXMxNS5faW5OYXZiYXIgPSBfdGhpczE1Ll9kZXRlY3ROYXZiYXIoKTtcbiAgICAgIHJldHVybiBfdGhpczE1O1xuICAgIH1cblxuICAgIC8vIEdldHRlcnNcbiAgICBfY3JlYXRlQ2xhc3MoRHJvcGRvd24sIFt7XG4gICAgICBrZXk6IFwidG9nZ2xlXCIsXG4gICAgICB2YWx1ZTpcbiAgICAgIC8vIFB1YmxpY1xuICAgICAgZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTaG93bigpID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwic2hvd1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgIGlmIChpc0Rpc2FibGVkKHRoaXMuX2VsZW1lbnQpIHx8IHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XJDUsIHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3JlYXRlUG9wcGVyKCk7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhdGhpcy5fcGFyZW50LmNsb3Nlc3QoU0VMRUNUT1JfTkFWQkFSX05BVikpIHtcbiAgICAgICAgICB2YXIgX3JlZjQ7XG4gICAgICAgICAgdmFyIF9pdGVyYXRvcjEyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoKF9yZWY0ID0gW10pLmNvbmNhdC5hcHBseShfcmVmNCwgX3RvQ29uc3VtYWJsZUFycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pKSksXG4gICAgICAgICAgICBfc3RlcDEyO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjEyLnMoKTsgIShfc3RlcDEyID0gX2l0ZXJhdG9yMTIubigpKS5kb25lOykge1xuICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IF9zdGVwMTIudmFsdWU7XG4gICAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vbihlbGVtZW50LCAnbW91c2VvdmVyJywgbm9vcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IxMi5lKGVycik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjEyLmYoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgICB0aGlzLl9tZW51LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDYpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDYpO1xuICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiQ1LCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGlkZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgIGlmIChpc0Rpc2FibGVkKHRoaXMuX2VsZW1lbnQpIHx8ICF0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRpc3Bvc2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihEcm9wZG93bi5wcm90b3R5cGUpLCBcImRpc3Bvc2VcIiwgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuICAgICAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFByaXZhdGVcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2NvbXBsZXRlSGlkZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldCkge1xuICAgICAgICB2YXIgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSQ1LCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIHZhciBfcmVmNTtcbiAgICAgICAgICB2YXIgX2l0ZXJhdG9yMTMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcigoX3JlZjUgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWY1LCBfdG9Db25zdW1hYmxlQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbikpKSxcbiAgICAgICAgICAgIF9zdGVwMTM7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMTMucygpOyAhKF9zdGVwMTMgPSBfaXRlcmF0b3IxMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX3N0ZXAxMy52YWx1ZTtcbiAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCAnbW91c2VvdmVyJywgbm9vcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IxMy5lKGVycik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjEzLmYoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWVudS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ2KTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ2KTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LCAncG9wcGVyJyk7XG4gICAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTiQ1LCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldENvbmZpZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZyA9IF9nZXQoX2dldFByb3RvdHlwZU9mKERyb3Bkb3duLnByb3RvdHlwZSksIFwiX2dldENvbmZpZ1wiLCB0aGlzKS5jYWxsKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIGlmIChfdHlwZW9mKGNvbmZpZy5yZWZlcmVuY2UpID09PSAnb2JqZWN0JyAmJiAhaXNFbGVtZW50KGNvbmZpZy5yZWZlcmVuY2UpICYmIHR5cGVvZiBjb25maWcucmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIC8vIFBvcHBlciB2aXJ0dWFsIGVsZW1lbnRzIHJlcXVpcmUgYSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgbWV0aG9kXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlwiLmNvbmNhdChOQU1FJGEudG9VcHBlckNhc2UoKSwgXCI6IE9wdGlvbiBcXFwicmVmZXJlbmNlXFxcIiBwcm92aWRlZCB0eXBlIFxcXCJvYmplY3RcXFwiIHdpdGhvdXQgYSByZXF1aXJlZCBcXFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XFxcIiBtZXRob2QuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfY3JlYXRlUG9wcGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZVBvcHBlcigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBQb3BwZXJfX25hbWVzcGFjZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIGRyb3Bkb3ducyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgPT09ICdwYXJlbnQnKSB7XG4gICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX3BhcmVudDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gZ2V0RWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwb3BwZXJDb25maWcgPSB0aGlzLl9nZXRQb3BwZXJDb25maWcoKTtcbiAgICAgICAgdGhpcy5fcG9wcGVyID0gUG9wcGVyX19uYW1lc3BhY2UuY3JlYXRlUG9wcGVyKHJlZmVyZW5jZUVsZW1lbnQsIHRoaXMuX21lbnUsIHBvcHBlckNvbmZpZyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9pc1Nob3duXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2lzU2hvd24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZW51LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckNik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRQbGFjZW1lbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UGxhY2VtZW50KCkge1xuICAgICAgICB2YXIgcGFyZW50RHJvcGRvd24gPSB0aGlzLl9wYXJlbnQ7XG4gICAgICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRU5EKSkge1xuICAgICAgICAgIHJldHVybiBQTEFDRU1FTlRfUklHSFQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BTVEFSVCkpIHtcbiAgICAgICAgICByZXR1cm4gUExBQ0VNRU5UX0xFRlQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BVUF9DRU5URVIpKSB7XG4gICAgICAgICAgcmV0dXJuIFBMQUNFTUVOVF9UT1BDRU5URVI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudERyb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BET1dOX0NFTlRFUikpIHtcbiAgICAgICAgICByZXR1cm4gUExBQ0VNRU5UX0JPVFRPTUNFTlRFUjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gdHJpbSB0aGUgdmFsdWUgYmVjYXVzZSBjdXN0b20gcHJvcGVydGllcyBjYW4gYWxzbyBpbmNsdWRlIHNwYWNlc1xuICAgICAgICB2YXIgaXNFbmQgPSBnZXRDb21wdXRlZFN0eWxlKHRoaXMuX21lbnUpLmdldFByb3BlcnR5VmFsdWUoJy0tYnMtcG9zaXRpb24nKS50cmltKCkgPT09ICdlbmQnO1xuICAgICAgICBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUFVQKSkge1xuICAgICAgICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9UT1BFTkQgOiBQTEFDRU1FTlRfVE9QO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9CT1RUT01FTkQgOiBQTEFDRU1FTlRfQk9UVE9NO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZGV0ZWN0TmF2YmFyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2RldGVjdE5hdmJhcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZCQVIpICE9PSBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZ2V0T2Zmc2V0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldE9mZnNldCgpIHtcbiAgICAgICAgdmFyIF90aGlzMTYgPSB0aGlzO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fY29uZmlnLm9mZnNldDtcbiAgICAgICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIG9mZnNldC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocG9wcGVyRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIG9mZnNldChwb3BwZXJEYXRhLCBfdGhpczE2Ll9lbGVtZW50KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRQb3BwZXJDb25maWdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgICAgICB2YXIgZGVmYXVsdEJzUG9wcGVyQ29uZmlnID0ge1xuICAgICAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksXG4gICAgICAgICAgbW9kaWZpZXJzOiBbe1xuICAgICAgICAgICAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gRGlzYWJsZSBQb3BwZXIgaWYgd2UgaGF2ZSBhIHN0YXRpYyBkaXNwbGF5IG9yIERyb3Bkb3duIGlzIGluIE5hdmJhclxuICAgICAgICBpZiAodGhpcy5faW5OYXZiYXIgfHwgdGhpcy5fY29uZmlnLmRpc3BsYXkgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgTWFuaXB1bGF0b3Iuc2V0RGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LCAncG9wcGVyJywgJ3N0YXRpYycpOyAvLyB0b2RvOnY2IHJlbW92ZVxuICAgICAgICAgIGRlZmF1bHRCc1BvcHBlckNvbmZpZy5tb2RpZmllcnMgPSBbe1xuICAgICAgICAgICAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdEJzUG9wcGVyQ29uZmlnKSwgZXhlY3V0ZSh0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnLCBbZGVmYXVsdEJzUG9wcGVyQ29uZmlnXSkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2VsZWN0TWVudUl0ZW1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VsZWN0TWVudUl0ZW0oX3JlZjYpIHtcbiAgICAgICAgdmFyIGtleSA9IF9yZWY2LmtleSxcbiAgICAgICAgICB0YXJnZXQgPSBfcmVmNi50YXJnZXQ7XG4gICAgICAgIHZhciBpdGVtcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfVklTSUJMRV9JVEVNUywgdGhpcy5fbWVudSkuZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGlzVmlzaWJsZShlbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGFyZ2V0IGlzbid0IGluY2x1ZGVkIGluIGl0ZW1zIChlLmcuIHdoZW4gZXhwYW5kaW5nIHRoZSBkcm9wZG93bilcbiAgICAgICAgLy8gYWxsb3cgY3ljbGluZyB0byBnZXQgdGhlIGxhc3QgaXRlbSBpbiBjYXNlIGtleSBlcXVhbHMgQVJST1dfVVBfS0VZXG4gICAgICAgIGdldE5leHRBY3RpdmVFbGVtZW50KGl0ZW1zLCB0YXJnZXQsIGtleSA9PT0gQVJST1dfRE9XTl9LRVkkMSwgIWl0ZW1zLmluY2x1ZGVzKHRhcmdldCkpLmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0YXRpY1xuICAgIH1dLCBbe1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQ5O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZSQ5O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUUkYTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwialF1ZXJ5SW50ZXJmYWNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24galF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIi5jb25jYXQoY29uZmlnLCBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImNsZWFyTWVudXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhck1lbnVzKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5idXR0b24gPT09IFJJR0hUX01PVVNFX0JVVFRPTiB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LmtleSAhPT0gVEFCX0tFWSQxKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcGVuVG9nZ2xlcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEVfU0hPV04pO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yMTQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvcGVuVG9nZ2xlcyksXG4gICAgICAgICAgX3N0ZXAxNDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjE0LnMoKTsgIShfc3RlcDE0ID0gX2l0ZXJhdG9yMTQubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9IF9zdGVwMTQudmFsdWU7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IERyb3Bkb3duLmdldEluc3RhbmNlKHRvZ2dsZSk7XG4gICAgICAgICAgICBpZiAoIWNvbnRleHQgfHwgY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29tcG9zZWRQYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoKCk7XG4gICAgICAgICAgICB2YXIgaXNNZW51VGFyZ2V0ID0gY29tcG9zZWRQYXRoLmluY2x1ZGVzKGNvbnRleHQuX21lbnUpO1xuICAgICAgICAgICAgaWYgKGNvbXBvc2VkUGF0aC5pbmNsdWRlcyhjb250ZXh0Ll9lbGVtZW50KSB8fCBjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSAnaW5zaWRlJyAmJiAhaXNNZW51VGFyZ2V0IHx8IGNvbnRleHQuX2NvbmZpZy5hdXRvQ2xvc2UgPT09ICdvdXRzaWRlJyAmJiBpc01lbnVUYXJnZXQpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRhYiBuYXZpZ2F0aW9uIHRocm91Z2ggdGhlIGRyb3Bkb3duIG1lbnUgb3IgZXZlbnRzIGZyb20gY29udGFpbmVkIGlucHV0cyBzaG91bGRuJ3QgY2xvc2UgdGhlIG1lbnVcbiAgICAgICAgICAgIGlmIChjb250ZXh0Ll9tZW51LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgKGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQua2V5ID09PSBUQUJfS0VZJDEgfHwgL2lucHV0fHNlbGVjdHxvcHRpb258dGV4dGFyZWF8Zm9ybS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBjb250ZXh0Ll9lbGVtZW50XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250ZXh0Ll9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IxNC5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMTQuZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRhdGFBcGlLZXlkb3duSGFuZGxlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuICAgICAgICAvLyBJZiBub3QgYW4gVVAgfCBET1dOIHwgRVNDQVBFIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAgIC8vIElmIGlucHV0L3RleHRhcmVhICYmIGlmIGtleSBpcyBvdGhlciB0aGFuIEVTQ0FQRSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG5cbiAgICAgICAgdmFyIGlzSW5wdXQgPSAvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKTtcbiAgICAgICAgdmFyIGlzRXNjYXBlRXZlbnQgPSBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkkMjtcbiAgICAgICAgdmFyIGlzVXBPckRvd25FdmVudCA9IFtBUlJPV19VUF9LRVkkMSwgQVJST1dfRE9XTl9LRVkkMV0uaW5jbHVkZXMoZXZlbnQua2V5KTtcbiAgICAgICAgaWYgKCFpc1VwT3JEb3duRXZlbnQgJiYgIWlzRXNjYXBlRXZlbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSW5wdXQgJiYgIWlzRXNjYXBlRXZlbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyB0b2RvOiB2NiByZXZlcnQgIzM3MDExICYgY2hhbmdlIG1hcmt1cCBodHRwczovL2dldGJvb3RzdHJhcC5jb20vZG9jcy81LjMvZm9ybXMvaW5wdXQtZ3JvdXAvXG4gICAgICAgIHZhciBnZXRUb2dnbGVCdXR0b24gPSB0aGlzLm1hdGNoZXMoU0VMRUNUT1JfREFUQV9UT0dHTEUkMykgPyB0aGlzIDogU2VsZWN0b3JFbmdpbmUucHJldih0aGlzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzKVswXSB8fCBTZWxlY3RvckVuZ2luZS5uZXh0KHRoaXMsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMpWzBdIHx8IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfREFUQV9UT0dHTEUkMywgZXZlbnQuZGVsZWdhdGVUYXJnZXQucGFyZW50Tm9kZSk7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UoZ2V0VG9nZ2xlQnV0dG9uKTtcbiAgICAgICAgaWYgKGlzVXBPckRvd25FdmVudCkge1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGluc3RhbmNlLnNob3coKTtcbiAgICAgICAgICBpbnN0YW5jZS5fc2VsZWN0TWVudUl0ZW0oZXZlbnQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdGFuY2UuX2lzU2hvd24oKSkge1xuICAgICAgICAgIC8vIGVsc2UgaXMgZXNjYXBlIGFuZCB3ZSBjaGVjayBpZiBpdCBpcyBzaG93blxuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgIGluc3RhbmNlLmhpZGUoKTtcbiAgICAgICAgICBnZXRUb2dnbGVCdXR0b24uZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gRHJvcGRvd247XG4gIH0oQmFzZUNvbXBvbmVudCk7XG4gIC8qKlxuICAgKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgKi9cbiAgRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlET1dOX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzLCBEcm9wZG93bi5kYXRhQXBpS2V5ZG93bkhhbmRsZXIpO1xuICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWURPV05fREFUQV9BUEksIFNFTEVDVE9SX01FTlUsIERyb3Bkb3duLmRhdGFBcGlLZXlkb3duSGFuZGxlcik7XG4gIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMywgRHJvcGRvd24uY2xlYXJNZW51cyk7XG4gIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLmNsZWFyTWVudXMpO1xuICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDMsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgRHJvcGRvd24uZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzKS50b2dnbGUoKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIGpRdWVyeVxuICAgKi9cblxuICBkZWZpbmVKUXVlcnlQbHVnaW4oRHJvcGRvd24pO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY1LjMuMC1hbHBoYTEpOiB1dGlsL3Njcm9sbEJhci5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cblxuICB2YXIgU0VMRUNUT1JfRklYRURfQ09OVEVOVCA9ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJztcbiAgdmFyIFNFTEVDVE9SX1NUSUNLWV9DT05URU5UID0gJy5zdGlja3ktdG9wJztcbiAgdmFyIFBST1BFUlRZX1BBRERJTkcgPSAncGFkZGluZy1yaWdodCc7XG4gIHZhciBQUk9QRVJUWV9NQVJHSU4gPSAnbWFyZ2luLXJpZ2h0JztcblxuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cbiAgdmFyIFNjcm9sbEJhckhlbHBlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2Nyb2xsQmFySGVscGVyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNjcm9sbEJhckhlbHBlcik7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcbiAgICB9XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfY3JlYXRlQ2xhc3MoU2Nyb2xsQmFySGVscGVyLCBbe1xuICAgICAga2V5OiBcImdldFdpZHRoXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0V2lkdGgoKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvaW5uZXJXaWR0aCN1c2FnZV9ub3Rlc1xuICAgICAgICB2YXIgZG9jdW1lbnRXaWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnRXaWR0aCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhpZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFdpZHRoKCk7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVPdmVyRmxvdygpO1xuICAgICAgICAvLyBnaXZlIHBhZGRpbmcgdG8gZWxlbWVudCB0byBiYWxhbmNlIHRoZSBoaWRkZW4gc2Nyb2xsYmFyIHdpZHRoXG4gICAgICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsIFBST1BFUlRZX1BBRERJTkcsIGZ1bmN0aW9uIChjYWxjdWxhdGVkVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGg7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB0cmljazogV2UgYWRqdXN0IHBvc2l0aXZlIHBhZGRpbmdSaWdodCBhbmQgbmVnYXRpdmUgbWFyZ2luUmlnaHQgdG8gc3RpY2t5LXRvcCBlbGVtZW50cyB0byBrZWVwIHNob3dpbmcgZnVsbHdpZHRoXG4gICAgICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQsIFBST1BFUlRZX1BBRERJTkcsIGZ1bmN0aW9uIChjYWxjdWxhdGVkVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGg7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgUFJPUEVSVFlfTUFSR0lOLCBmdW5jdGlvbiAoY2FsY3VsYXRlZFZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZWRWYWx1ZSAtIHdpZHRoO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwicmVzZXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LCAnb3ZlcmZsb3cnKTtcbiAgICAgICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LCBQUk9QRVJUWV9QQURESU5HKTtcbiAgICAgICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9GSVhFRF9DT05URU5ULCBQUk9QRVJUWV9QQURESU5HKTtcbiAgICAgICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgUFJPUEVSVFlfTUFSR0lOKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaXNPdmVyZmxvd2luZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGlzT3ZlcmZsb3dpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFdpZHRoKCkgPiAwO1xuICAgICAgfVxuXG4gICAgICAvLyBQcml2YXRlXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9kaXNhYmxlT3ZlckZsb3dcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZGlzYWJsZU92ZXJGbG93KCkge1xuICAgICAgICB0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSh0aGlzLl9lbGVtZW50LCAnb3ZlcmZsb3cnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2V0RWxlbWVudEF0dHJpYnV0ZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0RWxlbWVudEF0dHJpYnV0ZXMoc2VsZWN0b3IsIHN0eWxlUHJvcGVydHksIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpczE3ID0gdGhpcztcbiAgICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gdGhpcy5nZXRXaWR0aCgpO1xuICAgICAgICB2YXIgbWFuaXB1bGF0aW9uQ2FsbEJhY2sgPSBmdW5jdGlvbiBtYW5pcHVsYXRpb25DYWxsQmFjayhlbGVtZW50KSB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQgIT09IF90aGlzMTcuX2VsZW1lbnQgJiYgd2luZG93LmlubmVyV2lkdGggPiBlbGVtZW50LmNsaWVudFdpZHRoICsgc2Nyb2xsYmFyV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMxNy5fc2F2ZUluaXRpYWxBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wZXJ0eSk7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRWYWx1ZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUoc3R5bGVQcm9wZXJ0eSk7XG4gICAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShzdHlsZVByb3BlcnR5LCBcIlwiLmNvbmNhdChjYWxsYmFjayhOdW1iZXIucGFyc2VGbG9hdChjYWxjdWxhdGVkVmFsdWUpKSwgXCJweFwiKSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIG1hbmlwdWxhdGlvbkNhbGxCYWNrKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3NhdmVJbml0aWFsQXR0cmlidXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NhdmVJbml0aWFsQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcGVydHkpIHtcbiAgICAgICAgdmFyIGFjdHVhbFZhbHVlID0gZWxlbWVudC5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcGVydHkpO1xuICAgICAgICBpZiAoYWN0dWFsVmFsdWUpIHtcbiAgICAgICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcGVydHksIGFjdHVhbFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfcmVzZXRFbGVtZW50QXR0cmlidXRlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHNlbGVjdG9yLCBzdHlsZVByb3BlcnR5KSB7XG4gICAgICAgIHZhciBtYW5pcHVsYXRpb25DYWxsQmFjayA9IGZ1bmN0aW9uIG1hbmlwdWxhdGlvbkNhbGxCYWNrKGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcGVydHkpO1xuICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byByZW1vdmUgdGhlIHByb3BlcnR5IGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGA7IHRoZSB2YWx1ZSBjYW4gYWxzbyBiZSB6ZXJvXG4gICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KHN0eWxlUHJvcGVydHkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBNYW5pcHVsYXRvci5yZW1vdmVEYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcGVydHkpO1xuICAgICAgICAgIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoc3R5bGVQcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBtYW5pcHVsYXRpb25DYWxsQmFjayk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIGNhbGxCYWNrKSB7XG4gICAgICAgIGlmIChpc0VsZW1lbnQoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgY2FsbEJhY2soc2VsZWN0b3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2l0ZXJhdG9yMTUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yLCB0aGlzLl9lbGVtZW50KSksXG4gICAgICAgICAgX3N0ZXAxNTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjE1LnMoKTsgIShfc3RlcDE1ID0gX2l0ZXJhdG9yMTUubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIHNlbCA9IF9zdGVwMTUudmFsdWU7XG4gICAgICAgICAgICBjYWxsQmFjayhzZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMTUuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjE1LmYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gU2Nyb2xsQmFySGVscGVyO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY1LjMuMC1hbHBoYTEpOiB1dGlsL2JhY2tkcm9wLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cbiAgdmFyIE5BTUUkOSA9ICdiYWNrZHJvcCc7XG4gIHZhciBDTEFTU19OQU1FX0ZBREUkNCA9ICdmYWRlJztcbiAgdmFyIENMQVNTX05BTUVfU0hPVyQ1ID0gJ3Nob3cnO1xuICB2YXIgRVZFTlRfTU9VU0VET1dOID0gXCJtb3VzZWRvd24uYnMuXCIuY29uY2F0KE5BTUUkOSk7XG4gIHZhciBEZWZhdWx0JDggPSB7XG4gICAgY2xhc3NOYW1lOiAnbW9kYWwtYmFja2Ryb3AnLFxuICAgIGNsaWNrQ2FsbGJhY2s6IG51bGwsXG4gICAgaXNBbmltYXRlZDogZmFsc2UsXG4gICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgIC8vIGlmIGZhbHNlLCB3ZSB1c2UgdGhlIGJhY2tkcm9wIGhlbHBlciB3aXRob3V0IGFkZGluZyBhbnkgZWxlbWVudCB0byB0aGUgZG9tXG4gICAgcm9vdEVsZW1lbnQ6ICdib2R5JyAvLyBnaXZlIHRoZSBjaG9pY2UgdG8gcGxhY2UgYmFja2Ryb3AgdW5kZXIgZGlmZmVyZW50IGVsZW1lbnRzXG4gIH07XG5cbiAgdmFyIERlZmF1bHRUeXBlJDggPSB7XG4gICAgY2xhc3NOYW1lOiAnc3RyaW5nJyxcbiAgICBjbGlja0NhbGxiYWNrOiAnKGZ1bmN0aW9ufG51bGwpJyxcbiAgICBpc0FuaW1hdGVkOiAnYm9vbGVhbicsXG4gICAgaXNWaXNpYmxlOiAnYm9vbGVhbicsXG4gICAgcm9vdEVsZW1lbnQ6ICcoZWxlbWVudHxzdHJpbmcpJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuICB2YXIgQmFja2Ryb3AgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db25maWczKSB7XG4gICAgX2luaGVyaXRzKEJhY2tkcm9wLCBfQ29uZmlnMyk7XG4gICAgdmFyIF9zdXBlcjggPSBfY3JlYXRlU3VwZXIoQmFja2Ryb3ApO1xuICAgIGZ1bmN0aW9uIEJhY2tkcm9wKGNvbmZpZykge1xuICAgICAgdmFyIF90aGlzMTg7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFja2Ryb3ApO1xuICAgICAgX3RoaXMxOCA9IF9zdXBlcjguY2FsbCh0aGlzKTtcbiAgICAgIF90aGlzMTguX2NvbmZpZyA9IF90aGlzMTguX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgX3RoaXMxOC5faXNBcHBlbmRlZCA9IGZhbHNlO1xuICAgICAgX3RoaXMxOC5fZWxlbWVudCA9IG51bGw7XG4gICAgICByZXR1cm4gX3RoaXMxODtcbiAgICB9XG5cbiAgICAvLyBHZXR0ZXJzXG4gICAgX2NyZWF0ZUNsYXNzKEJhY2tkcm9wLCBbe1xuICAgICAga2V5OiBcInNob3dcIixcbiAgICAgIHZhbHVlOlxuICAgICAgLy8gUHVibGljXG4gICAgICBmdW5jdGlvbiBzaG93KGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdGhpcy5fY29uZmlnLmlzVmlzaWJsZSkge1xuICAgICAgICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcHBlbmQoKTtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9nZXRFbGVtZW50KCk7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuaXNBbmltYXRlZCkge1xuICAgICAgICAgIHJlZmxvdyhlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDUpO1xuICAgICAgICB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBleGVjdXRlKGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhpZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpczE5ID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dldEVsZW1lbnQoKS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ1KTtcbiAgICAgICAgdGhpcy5fZW11bGF0ZUFuaW1hdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMxOS5kaXNwb3NlKCk7XG4gICAgICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNwb3NlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0FwcGVuZGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VET1dOKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5faXNBcHBlbmRlZCA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBQcml2YXRlXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRFbGVtZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEVsZW1lbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgICAgIHZhciBiYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGJhY2tkcm9wLmNsYXNzTmFtZSA9IHRoaXMuX2NvbmZpZy5jbGFzc05hbWU7XG4gICAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKSB7XG4gICAgICAgICAgICBiYWNrZHJvcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSQ0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fZWxlbWVudCA9IGJhY2tkcm9wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfY29uZmlnQWZ0ZXJNZXJnZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jb25maWdBZnRlck1lcmdlKGNvbmZpZykge1xuICAgICAgICAvLyB1c2UgZ2V0RWxlbWVudCgpIHdpdGggdGhlIGRlZmF1bHQgXCJib2R5XCIgdG8gZ2V0IGEgZnJlc2ggRWxlbWVudCBvbiBlYWNoIGluc3RhbnRpYXRpb25cbiAgICAgICAgY29uZmlnLnJvb3RFbGVtZW50ID0gZ2V0RWxlbWVudChjb25maWcucm9vdEVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfYXBwZW5kXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2FwcGVuZCgpIHtcbiAgICAgICAgdmFyIF90aGlzMjAgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5faXNBcHBlbmRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2dldEVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy5fY29uZmlnLnJvb3RFbGVtZW50LmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKGVsZW1lbnQsIEVWRU5UX01PVVNFRE9XTiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGV4ZWN1dGUoX3RoaXMyMC5fY29uZmlnLmNsaWNrQ2FsbGJhY2spO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5faXNBcHBlbmRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9lbXVsYXRlQW5pbWF0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2VtdWxhdGVBbmltYXRpb24oY2FsbGJhY2spIHtcbiAgICAgICAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbihjYWxsYmFjaywgdGhpcy5fZ2V0RWxlbWVudCgpLCB0aGlzLl9jb25maWcuaXNBbmltYXRlZCk7XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDg7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDg7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQ5O1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gQmFja2Ryb3A7XG4gIH0oQ29uZmlnKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjUuMy4wLWFscGhhMSk6IHV0aWwvZm9jdXN0cmFwLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cbiAgdmFyIE5BTUUkOCA9ICdmb2N1c3RyYXAnO1xuICB2YXIgREFUQV9LRVkkNSA9ICdicy5mb2N1c3RyYXAnO1xuICB2YXIgRVZFTlRfS0VZJDUgPSBcIi5cIi5jb25jYXQoREFUQV9LRVkkNSk7XG4gIHZhciBFVkVOVF9GT0NVU0lOJDIgPSBcImZvY3VzaW5cIi5jb25jYXQoRVZFTlRfS0VZJDUpO1xuICB2YXIgRVZFTlRfS0VZRE9XTl9UQUIgPSBcImtleWRvd24udGFiXCIuY29uY2F0KEVWRU5UX0tFWSQ1KTtcbiAgdmFyIFRBQl9LRVkgPSAnVGFiJztcbiAgdmFyIFRBQl9OQVZfRk9SV0FSRCA9ICdmb3J3YXJkJztcbiAgdmFyIFRBQl9OQVZfQkFDS1dBUkQgPSAnYmFja3dhcmQnO1xuICB2YXIgRGVmYXVsdCQ3ID0ge1xuICAgIGF1dG9mb2N1czogdHJ1ZSxcbiAgICB0cmFwRWxlbWVudDogbnVsbCAvLyBUaGUgZWxlbWVudCB0byB0cmFwIGZvY3VzIGluc2lkZSBvZlxuICB9O1xuXG4gIHZhciBEZWZhdWx0VHlwZSQ3ID0ge1xuICAgIGF1dG9mb2N1czogJ2Jvb2xlYW4nLFxuICAgIHRyYXBFbGVtZW50OiAnZWxlbWVudCdcbiAgfTtcblxuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cbiAgdmFyIEZvY3VzVHJhcCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbmZpZzQpIHtcbiAgICBfaW5oZXJpdHMoRm9jdXNUcmFwLCBfQ29uZmlnNCk7XG4gICAgdmFyIF9zdXBlcjkgPSBfY3JlYXRlU3VwZXIoRm9jdXNUcmFwKTtcbiAgICBmdW5jdGlvbiBGb2N1c1RyYXAoY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXMyMTtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGb2N1c1RyYXApO1xuICAgICAgX3RoaXMyMSA9IF9zdXBlcjkuY2FsbCh0aGlzKTtcbiAgICAgIF90aGlzMjEuX2NvbmZpZyA9IF90aGlzMjEuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgX3RoaXMyMS5faXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIF90aGlzMjEuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBudWxsO1xuICAgICAgcmV0dXJuIF90aGlzMjE7XG4gICAgfVxuXG4gICAgLy8gR2V0dGVyc1xuICAgIF9jcmVhdGVDbGFzcyhGb2N1c1RyYXAsIFt7XG4gICAgICBrZXk6IFwiYWN0aXZhdGVcIixcbiAgICAgIHZhbHVlOlxuICAgICAgLy8gUHVibGljXG4gICAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzMjIgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5faXNBY3RpdmUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hdXRvZm9jdXMpIHtcbiAgICAgICAgICB0aGlzLl9jb25maWcudHJhcEVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9LRVkkNSk7IC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0ZPQ1VTSU4kMiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMjIuX2hhbmRsZUZvY3VzaW4oZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9LRVlET1dOX1RBQiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMjIuX2hhbmRsZUtleWRvd24oZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5faXNBY3RpdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkZWFjdGl2YXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0FjdGl2ZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9LRVkkNSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByaXZhdGVcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2hhbmRsZUZvY3VzaW5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlRm9jdXNpbihldmVudCkge1xuICAgICAgICB2YXIgdHJhcEVsZW1lbnQgPSB0aGlzLl9jb25maWcudHJhcEVsZW1lbnQ7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IGRvY3VtZW50IHx8IGV2ZW50LnRhcmdldCA9PT0gdHJhcEVsZW1lbnQgfHwgdHJhcEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWxlbWVudHMgPSBTZWxlY3RvckVuZ2luZS5mb2N1c2FibGVDaGlsZHJlbih0cmFwRWxlbWVudCk7XG4gICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0cmFwRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPT09IFRBQl9OQVZfQkFDS1dBUkQpIHtcbiAgICAgICAgICBlbGVtZW50c1tlbGVtZW50cy5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnRzWzBdLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2hhbmRsZUtleWRvd25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlS2V5ZG93bihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5ICE9PSBUQUJfS0VZKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBldmVudC5zaGlmdEtleSA/IFRBQl9OQVZfQkFDS1dBUkQgOiBUQUJfTkFWX0ZPUldBUkQ7XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQ4O1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gRm9jdXNUcmFwO1xuICB9KENvbmZpZyk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY1LjMuMC1hbHBoYTEpOiBtb2RhbC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG4gIHZhciBOQU1FJDcgPSAnbW9kYWwnO1xuICB2YXIgREFUQV9LRVkkNCA9ICdicy5tb2RhbCc7XG4gIHZhciBFVkVOVF9LRVkkNCA9IFwiLlwiLmNvbmNhdChEQVRBX0tFWSQ0KTtcbiAgdmFyIERBVEFfQVBJX0tFWSQyID0gJy5kYXRhLWFwaSc7XG4gIHZhciBFU0NBUEVfS0VZJDEgPSAnRXNjYXBlJztcbiAgdmFyIEVWRU5UX0hJREUkNCA9IFwiaGlkZVwiLmNvbmNhdChFVkVOVF9LRVkkNCk7XG4gIHZhciBFVkVOVF9ISURFX1BSRVZFTlRFRCQxID0gXCJoaWRlUHJldmVudGVkXCIuY29uY2F0KEVWRU5UX0tFWSQ0KTtcbiAgdmFyIEVWRU5UX0hJRERFTiQ0ID0gXCJoaWRkZW5cIi5jb25jYXQoRVZFTlRfS0VZJDQpO1xuICB2YXIgRVZFTlRfU0hPVyQ0ID0gXCJzaG93XCIuY29uY2F0KEVWRU5UX0tFWSQ0KTtcbiAgdmFyIEVWRU5UX1NIT1dOJDQgPSBcInNob3duXCIuY29uY2F0KEVWRU5UX0tFWSQ0KTtcbiAgdmFyIEVWRU5UX1JFU0laRSQxID0gXCJyZXNpemVcIi5jb25jYXQoRVZFTlRfS0VZJDQpO1xuICB2YXIgRVZFTlRfQ0xJQ0tfRElTTUlTUyA9IFwiY2xpY2suZGlzbWlzc1wiLmNvbmNhdChFVkVOVF9LRVkkNCk7XG4gIHZhciBFVkVOVF9NT1VTRURPV05fRElTTUlTUyA9IFwibW91c2Vkb3duLmRpc21pc3NcIi5jb25jYXQoRVZFTlRfS0VZJDQpO1xuICB2YXIgRVZFTlRfS0VZRE9XTl9ESVNNSVNTJDEgPSBcImtleWRvd24uZGlzbWlzc1wiLmNvbmNhdChFVkVOVF9LRVkkNCk7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQyID0gXCJjbGlja1wiLmNvbmNhdChFVkVOVF9LRVkkNCkuY29uY2F0KERBVEFfQVBJX0tFWSQyKTtcbiAgdmFyIENMQVNTX05BTUVfT1BFTiA9ICdtb2RhbC1vcGVuJztcbiAgdmFyIENMQVNTX05BTUVfRkFERSQzID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XJDQgPSAnc2hvdyc7XG4gIHZhciBDTEFTU19OQU1FX1NUQVRJQyA9ICdtb2RhbC1zdGF0aWMnO1xuICB2YXIgT1BFTl9TRUxFQ1RPUiQxID0gJy5tb2RhbC5zaG93JztcbiAgdmFyIFNFTEVDVE9SX0RJQUxPRyA9ICcubW9kYWwtZGlhbG9nJztcbiAgdmFyIFNFTEVDVE9SX01PREFMX0JPRFkgPSAnLm1vZGFsLWJvZHknO1xuICB2YXIgU0VMRUNUT1JfREFUQV9UT0dHTEUkMiA9ICdbZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiXSc7XG4gIHZhciBEZWZhdWx0JDYgPSB7XG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAgZm9jdXM6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWVcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDYgPSB7XG4gICAgYmFja2Ryb3A6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBmb2N1czogJ2Jvb2xlYW4nLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbidcbiAgfTtcblxuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cbiAgdmFyIE1vZGFsID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUNvbXBvbmVudDYpIHtcbiAgICBfaW5oZXJpdHMoTW9kYWwsIF9CYXNlQ29tcG9uZW50Nik7XG4gICAgdmFyIF9zdXBlcjEwID0gX2NyZWF0ZVN1cGVyKE1vZGFsKTtcbiAgICBmdW5jdGlvbiBNb2RhbChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpczIzO1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsKTtcbiAgICAgIF90aGlzMjMgPSBfc3VwZXIxMC5jYWxsKHRoaXMsIGVsZW1lbnQsIGNvbmZpZyk7XG4gICAgICBfdGhpczIzLl9kaWFsb2cgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RJQUxPRywgX3RoaXMyMy5fZWxlbWVudCk7XG4gICAgICBfdGhpczIzLl9iYWNrZHJvcCA9IF90aGlzMjMuX2luaXRpYWxpemVCYWNrRHJvcCgpO1xuICAgICAgX3RoaXMyMy5fZm9jdXN0cmFwID0gX3RoaXMyMy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpO1xuICAgICAgX3RoaXMyMy5faXNTaG93biA9IGZhbHNlO1xuICAgICAgX3RoaXMyMy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICBfdGhpczIzLl9zY3JvbGxCYXIgPSBuZXcgU2Nyb2xsQmFySGVscGVyKCk7XG4gICAgICBfdGhpczIzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgcmV0dXJuIF90aGlzMjM7XG4gICAgfVxuXG4gICAgLy8gR2V0dGVyc1xuICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgW3tcbiAgICAgIGtleTogXCJ0b2dnbGVcIixcbiAgICAgIHZhbHVlOlxuICAgICAgLy8gUHVibGljXG4gICAgICBmdW5jdGlvbiB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTaG93biA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzaG93XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICAgIHZhciBfdGhpczI0ID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XJDQsIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNTaG93biA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX3Njcm9sbEJhci5oaWRlKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX09QRU4pO1xuICAgICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3Auc2hvdyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMjQuX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGlkZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgIHZhciBfdGhpczI1ID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSQ0KTtcbiAgICAgICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ0KTtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMjUuX2hpZGVNb2RhbCgpO1xuICAgICAgICB9LCB0aGlzLl9lbGVtZW50LCB0aGlzLl9pc0FuaW1hdGVkKCkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNwb3NlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgZm9yICh2YXIgX2k3ID0gMCwgX2FycjIgPSBbd2luZG93LCB0aGlzLl9kaWFsb2ddOyBfaTcgPCBfYXJyMi5sZW5ndGg7IF9pNysrKSB7XG4gICAgICAgICAgdmFyIGh0bWxFbGVtZW50ID0gX2FycjJbX2k3XTtcbiAgICAgICAgICBFdmVudEhhbmRsZXIub2ZmKGh0bWxFbGVtZW50LCBFVkVOVF9LRVkkNCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYmFja2Ryb3AuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpO1xuICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihNb2RhbC5wcm90b3R5cGUpLCBcImRpc3Bvc2VcIiwgdGhpcykuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGFuZGxlVXBkYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlVXBkYXRlKCkge1xuICAgICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJpdmF0ZVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaW5pdGlhbGl6ZUJhY2tEcm9wXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXRpYWxpemVCYWNrRHJvcCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCYWNrZHJvcCh7XG4gICAgICAgICAgaXNWaXNpYmxlOiBCb29sZWFuKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCksXG4gICAgICAgICAgLy8gJ3N0YXRpYycgb3B0aW9uIHdpbGwgYmUgdHJhbnNsYXRlZCB0byB0cnVlLCBhbmQgYm9vbGVhbnMgd2lsbCBrZWVwIHRoZWlyIHZhbHVlLFxuICAgICAgICAgIGlzQW5pbWF0ZWQ6IHRoaXMuX2lzQW5pbWF0ZWQoKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2luaXRpYWxpemVGb2N1c1RyYXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZUZvY3VzVHJhcCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGb2N1c1RyYXAoe1xuICAgICAgICAgIHRyYXBFbGVtZW50OiB0aGlzLl9lbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2hvd0VsZW1lbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMyNiA9IHRoaXM7XG4gICAgICAgIC8vIHRyeSB0byBhcHBlbmQgZHluYW1pYyBtb2RhbFxuICAgICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5fZWxlbWVudCkpIHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgdmFyIG1vZGFsQm9keSA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfTU9EQUxfQk9EWSwgdGhpcy5fZGlhbG9nKTtcbiAgICAgICAgaWYgKG1vZGFsQm9keSkge1xuICAgICAgICAgIG1vZGFsQm9keS5zY3JvbGxUb3AgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQ0KTtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25Db21wbGV0ZSA9IGZ1bmN0aW9uIHRyYW5zaXRpb25Db21wbGV0ZSgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMyNi5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgICAgICBfdGhpczI2Ll9mb2N1c3RyYXAuYWN0aXZhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMyNi5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIoX3RoaXMyNi5fZWxlbWVudCwgRVZFTlRfU0hPV04kNCwge1xuICAgICAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKHRyYW5zaXRpb25Db21wbGV0ZSwgdGhpcy5fZGlhbG9nLCB0aGlzLl9pc0FuaW1hdGVkKCkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfYWRkRXZlbnRMaXN0ZW5lcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHZhciBfdGhpczI3ID0gdGhpcztcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUyQxLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoZXZlbnQua2V5ICE9PSBFU0NBUEVfS0VZJDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKF90aGlzMjcuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIF90aGlzMjcuaGlkZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczI3Ll90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBFdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9SRVNJWkUkMSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpczI3Ll9pc1Nob3duICYmICFfdGhpczI3Ll9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgICAgIF90aGlzMjcuX2FkanVzdERpYWxvZygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRURPV05fRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgLy8gYSBiYWQgdHJpY2sgdG8gc2VncmVnYXRlIGNsaWNrcyB0aGF0IG1heSBzdGFydCBpbnNpZGUgZGlhbG9nIGJ1dCBlbmQgb3V0c2lkZSwgYW5kIGF2b2lkIGxpc3RlbiB0byBzY3JvbGxiYXIgY2xpY2tzXG4gICAgICAgICAgRXZlbnRIYW5kbGVyLm9uZShfdGhpczI3Ll9lbGVtZW50LCBFVkVOVF9DTElDS19ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQyKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMyNy5fZWxlbWVudCAhPT0gZXZlbnQudGFyZ2V0IHx8IF90aGlzMjcuX2VsZW1lbnQgIT09IGV2ZW50Mi50YXJnZXQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzMjcuX2NvbmZpZy5iYWNrZHJvcCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgICAgX3RoaXMyNy5fdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3RoaXMyNy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgICAgICAgIF90aGlzMjcuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2hpZGVNb2RhbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlTW9kYWwoKSB7XG4gICAgICAgIHZhciBfdGhpczI4ID0gdGhpcztcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcbiAgICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wLmhpZGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX09QRU4pO1xuICAgICAgICAgIF90aGlzMjguX3Jlc2V0QWRqdXN0bWVudHMoKTtcbiAgICAgICAgICBfdGhpczI4Ll9zY3JvbGxCYXIucmVzZXQoKTtcbiAgICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihfdGhpczI4Ll9lbGVtZW50LCBFVkVOVF9ISURERU4kNCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaXNBbmltYXRlZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc0FuaW1hdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFJDMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvblwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMyOSA9IHRoaXM7XG4gICAgICAgIHZhciBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFX1BSRVZFTlRFRCQxKTtcbiAgICAgICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgIHZhciBpbml0aWFsT3ZlcmZsb3dZID0gdGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvd1k7XG4gICAgICAgIC8vIHJldHVybiBpZiB0aGUgZm9sbG93aW5nIGJhY2tncm91bmQgdHJhbnNpdGlvbiBoYXNuJ3QgeWV0IGNvbXBsZXRlZFxuICAgICAgICBpZiAoaW5pdGlhbE92ZXJmbG93WSA9PT0gJ2hpZGRlbicgfHwgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TVEFUSUMpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TVEFUSUMpO1xuICAgICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczI5Ll9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TVEFUSUMpO1xuICAgICAgICAgIF90aGlzMjkuX3F1ZXVlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMyOS5fZWxlbWVudC5zdHlsZS5vdmVyZmxvd1kgPSBpbml0aWFsT3ZlcmZsb3dZO1xuICAgICAgICAgIH0sIF90aGlzMjkuX2RpYWxvZyk7XG4gICAgICAgIH0sIHRoaXMuX2RpYWxvZyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuICAgICAgICovXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9hZGp1c3REaWFsb2dcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRqdXN0RGlhbG9nKCkge1xuICAgICAgICB2YXIgaXNNb2RhbE92ZXJmbG93aW5nID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSB0aGlzLl9zY3JvbGxCYXIuZ2V0V2lkdGgoKTtcbiAgICAgICAgdmFyIGlzQm9keU92ZXJmbG93aW5nID0gc2Nyb2xsYmFyV2lkdGggPiAwO1xuICAgICAgICBpZiAoaXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IGlzUlRMKCkgPyAncGFkZGluZ0xlZnQnIDogJ3BhZGRpbmdSaWdodCc7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtwcm9wZXJ0eV0gPSBcIlwiLmNvbmNhdChzY3JvbGxiYXJXaWR0aCwgXCJweFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICAgIHZhciBfcHJvcGVydHkgPSBpc1JUTCgpID8gJ3BhZGRpbmdSaWdodCcgOiAncGFkZGluZ0xlZnQnO1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbX3Byb3BlcnR5XSA9IFwiXCIuY29uY2F0KHNjcm9sbGJhcldpZHRoLCBcInB4XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9yZXNldEFkanVzdG1lbnRzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2V0QWRqdXN0bWVudHMoKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSAnJztcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcbiAgICAgIH1cblxuICAgICAgLy8gU3RhdGljXG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJqUXVlcnlJbnRlcmZhY2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBqUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBkYXRhID0gTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiLmNvbmNhdChjb25maWcsIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBNb2RhbDtcbiAgfShCYXNlQ29tcG9uZW50KTtcbiAgLyoqXG4gICAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gICAqL1xuICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDIsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBfdGhpczMwID0gdGhpcztcbiAgICB2YXIgdGFyZ2V0ID0gU2VsZWN0b3JFbmdpbmUuZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKTtcbiAgICBpZiAoWydBJywgJ0FSRUEnXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfU0hPVyQ0LCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XG4gICAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOJDQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzVmlzaWJsZShfdGhpczMwKSkge1xuICAgICAgICAgIF90aGlzMzAuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBhdm9pZCBjb25mbGljdCB3aGVuIGNsaWNraW5nIG1vZGFsIHRvZ2dsZXIgd2hpbGUgYW5vdGhlciBvbmUgaXMgb3BlblxuICAgIHZhciBhbHJlYWR5T3BlbiA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoT1BFTl9TRUxFQ1RPUiQxKTtcbiAgICBpZiAoYWxyZWFkeU9wZW4pIHtcbiAgICAgIE1vZGFsLmdldEluc3RhbmNlKGFscmVhZHlPcGVuKS5oaWRlKCk7XG4gICAgfVxuICAgIHZhciBkYXRhID0gTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0YXJnZXQpO1xuICAgIGRhdGEudG9nZ2xlKHRoaXMpO1xuICB9KTtcbiAgZW5hYmxlRGlzbWlzc1RyaWdnZXIoTW9kYWwpO1xuXG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luKE1vZGFsKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogb2ZmY2FudmFzLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBOQU1FJDYgPSAnb2ZmY2FudmFzJztcbiAgdmFyIERBVEFfS0VZJDMgPSAnYnMub2ZmY2FudmFzJztcbiAgdmFyIEVWRU5UX0tFWSQzID0gXCIuXCIuY29uY2F0KERBVEFfS0VZJDMpO1xuICB2YXIgREFUQV9BUElfS0VZJDEgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEVWRU5UX0xPQURfREFUQV9BUEkkMiA9IFwibG9hZFwiLmNvbmNhdChFVkVOVF9LRVkkMykuY29uY2F0KERBVEFfQVBJX0tFWSQxKTtcbiAgdmFyIEVTQ0FQRV9LRVkgPSAnRXNjYXBlJztcbiAgdmFyIENMQVNTX05BTUVfU0hPVyQzID0gJ3Nob3cnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XSU5HJDEgPSAnc2hvd2luZyc7XG4gIHZhciBDTEFTU19OQU1FX0hJRElORyA9ICdoaWRpbmcnO1xuICB2YXIgQ0xBU1NfTkFNRV9CQUNLRFJPUCA9ICdvZmZjYW52YXMtYmFja2Ryb3AnO1xuICB2YXIgT1BFTl9TRUxFQ1RPUiA9ICcub2ZmY2FudmFzLnNob3cnO1xuICB2YXIgRVZFTlRfU0hPVyQzID0gXCJzaG93XCIuY29uY2F0KEVWRU5UX0tFWSQzKTtcbiAgdmFyIEVWRU5UX1NIT1dOJDMgPSBcInNob3duXCIuY29uY2F0KEVWRU5UX0tFWSQzKTtcbiAgdmFyIEVWRU5UX0hJREUkMyA9IFwiaGlkZVwiLmNvbmNhdChFVkVOVF9LRVkkMyk7XG4gIHZhciBFVkVOVF9ISURFX1BSRVZFTlRFRCA9IFwiaGlkZVByZXZlbnRlZFwiLmNvbmNhdChFVkVOVF9LRVkkMyk7XG4gIHZhciBFVkVOVF9ISURERU4kMyA9IFwiaGlkZGVuXCIuY29uY2F0KEVWRU5UX0tFWSQzKTtcbiAgdmFyIEVWRU5UX1JFU0laRSA9IFwicmVzaXplXCIuY29uY2F0KEVWRU5UX0tFWSQzKTtcbiAgdmFyIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDEgPSBcImNsaWNrXCIuY29uY2F0KEVWRU5UX0tFWSQzKS5jb25jYXQoREFUQV9BUElfS0VZJDEpO1xuICB2YXIgRVZFTlRfS0VZRE9XTl9ESVNNSVNTID0gXCJrZXlkb3duLmRpc21pc3NcIi5jb25jYXQoRVZFTlRfS0VZJDMpO1xuICB2YXIgU0VMRUNUT1JfREFUQV9UT0dHTEUkMSA9ICdbZGF0YS1icy10b2dnbGU9XCJvZmZjYW52YXNcIl0nO1xuICB2YXIgRGVmYXVsdCQ1ID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNjcm9sbDogZmFsc2VcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDUgPSB7XG4gICAgYmFja2Ryb3A6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgIHNjcm9sbDogJ2Jvb2xlYW4nXG4gIH07XG5cbiAgLyoqXG4gICAqIENsYXNzIGRlZmluaXRpb25cbiAgICovXG4gIHZhciBPZmZjYW52YXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlQ29tcG9uZW50Nykge1xuICAgIF9pbmhlcml0cyhPZmZjYW52YXMsIF9CYXNlQ29tcG9uZW50Nyk7XG4gICAgdmFyIF9zdXBlcjExID0gX2NyZWF0ZVN1cGVyKE9mZmNhbnZhcyk7XG4gICAgZnVuY3Rpb24gT2ZmY2FudmFzKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdmFyIF90aGlzMzE7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgT2ZmY2FudmFzKTtcbiAgICAgIF90aGlzMzEgPSBfc3VwZXIxMS5jYWxsKHRoaXMsIGVsZW1lbnQsIGNvbmZpZyk7XG4gICAgICBfdGhpczMxLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICBfdGhpczMxLl9iYWNrZHJvcCA9IF90aGlzMzEuX2luaXRpYWxpemVCYWNrRHJvcCgpO1xuICAgICAgX3RoaXMzMS5fZm9jdXN0cmFwID0gX3RoaXMzMS5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpO1xuICAgICAgX3RoaXMzMS5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybiBfdGhpczMxO1xuICAgIH1cblxuICAgIC8vIEdldHRlcnNcbiAgICBfY3JlYXRlQ2xhc3MoT2ZmY2FudmFzLCBbe1xuICAgICAga2V5OiBcInRvZ2dsZVwiLFxuICAgICAgdmFsdWU6XG4gICAgICAvLyBQdWJsaWNcbiAgICAgIGZ1bmN0aW9uIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInNob3dcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgICAgdmFyIF90aGlzMzIgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyQzLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlO1xuICAgICAgICB0aGlzLl9iYWNrZHJvcC5zaG93KCk7XG4gICAgICAgIGlmICghdGhpcy5fY29uZmlnLnNjcm9sbCkge1xuICAgICAgICAgIG5ldyBTY3JvbGxCYXJIZWxwZXIoKS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnZGlhbG9nJyk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1dJTkckMSk7XG4gICAgICAgIHZhciBjb21wbGV0ZUNhbGxCYWNrID0gZnVuY3Rpb24gY29tcGxldGVDYWxsQmFjaygpIHtcbiAgICAgICAgICBpZiAoIV90aGlzMzIuX2NvbmZpZy5zY3JvbGwgfHwgX3RoaXMzMi5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgICAgICBfdGhpczMyLl9mb2N1c3RyYXAuYWN0aXZhdGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMzMi5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQzKTtcbiAgICAgICAgICBfdGhpczMyLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HJDEpO1xuICAgICAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKF90aGlzMzIuX2VsZW1lbnQsIEVWRU5UX1NIT1dOJDMsIHtcbiAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxCYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGlkZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgIHZhciBfdGhpczMzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFJDMpO1xuICAgICAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5ibHVyKCk7XG4gICAgICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfSElESU5HKTtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AuaGlkZSgpO1xuICAgICAgICB2YXIgY29tcGxldGVDYWxsYmFjayA9IGZ1bmN0aW9uIGNvbXBsZXRlQ2FsbGJhY2soKSB7XG4gICAgICAgICAgX3RoaXMzMy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQzLCBDTEFTU19OQU1FX0hJRElORyk7XG4gICAgICAgICAgX3RoaXMzMy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKTtcbiAgICAgICAgICBfdGhpczMzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuICAgICAgICAgIGlmICghX3RoaXMzMy5fY29uZmlnLnNjcm9sbCkge1xuICAgICAgICAgICAgbmV3IFNjcm9sbEJhckhlbHBlcigpLnJlc2V0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKF90aGlzMzMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTiQzKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxiYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiZGlzcG9zZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoT2ZmY2FudmFzLnByb3RvdHlwZSksIFwiZGlzcG9zZVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICAvLyBQcml2YXRlXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9pbml0aWFsaXplQmFja0Ryb3BcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkge1xuICAgICAgICB2YXIgX3RoaXMzNCA9IHRoaXM7XG4gICAgICAgIHZhciBjbGlja0NhbGxiYWNrID0gZnVuY3Rpb24gY2xpY2tDYWxsYmFjaygpIHtcbiAgICAgICAgICBpZiAoX3RoaXMzNC5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIoX3RoaXMzNC5fZWxlbWVudCwgRVZFTlRfSElERV9QUkVWRU5URUQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczM0LmhpZGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyAnc3RhdGljJyBvcHRpb24gd2lsbCBiZSB0cmFuc2xhdGVkIHRvIHRydWUsIGFuZCBib29sZWFucyB3aWxsIGtlZXAgdGhlaXIgdmFsdWVcbiAgICAgICAgdmFyIGlzVmlzaWJsZSA9IEJvb2xlYW4odGhpcy5fY29uZmlnLmJhY2tkcm9wKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCYWNrZHJvcCh7XG4gICAgICAgICAgY2xhc3NOYW1lOiBDTEFTU19OQU1FX0JBQ0tEUk9QLFxuICAgICAgICAgIGlzVmlzaWJsZTogaXNWaXNpYmxlLFxuICAgICAgICAgIGlzQW5pbWF0ZWQ6IHRydWUsXG4gICAgICAgICAgcm9vdEVsZW1lbnQ6IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgICBjbGlja0NhbGxiYWNrOiBpc1Zpc2libGUgPyBjbGlja0NhbGxiYWNrIDogbnVsbFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2luaXRpYWxpemVGb2N1c1RyYXBcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZUZvY3VzVHJhcCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGb2N1c1RyYXAoe1xuICAgICAgICAgIHRyYXBFbGVtZW50OiB0aGlzLl9lbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfYWRkRXZlbnRMaXN0ZW5lcnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHZhciBfdGhpczM1ID0gdGhpcztcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50LmtleSAhPT0gRVNDQVBFX0tFWSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIV90aGlzMzUuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIoX3RoaXMzNS5fZWxlbWVudCwgRVZFTlRfSElERV9QUkVWRU5URUQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczM1LmhpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFN0YXRpY1xuICAgIH1dLCBbe1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQ1O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZSQ1O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUUkNjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwialF1ZXJ5SW50ZXJmYWNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24galF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkYXRhW2NvbmZpZ10gPT09IHVuZGVmaW5lZCB8fCBjb25maWcuc3RhcnRzV2l0aCgnXycpIHx8IGNvbmZpZyA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIuY29uY2F0KGNvbmZpZywgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIE9mZmNhbnZhcztcbiAgfShCYXNlQ29tcG9uZW50KTtcbiAgLyoqXG4gICAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gICAqL1xuICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDEsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDEsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBfdGhpczM2ID0gdGhpcztcbiAgICB2YXIgdGFyZ2V0ID0gU2VsZWN0b3JFbmdpbmUuZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKTtcbiAgICBpZiAoWydBJywgJ0FSRUEnXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBpZiAoaXNEaXNhYmxlZCh0aGlzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOJDMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGZvY3VzIG9uIHRyaWdnZXIgd2hlbiBpdCBpcyBjbG9zZWRcbiAgICAgIGlmIChpc1Zpc2libGUoX3RoaXMzNikpIHtcbiAgICAgICAgX3RoaXMzNi5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gYXZvaWQgY29uZmxpY3Qgd2hlbiBjbGlja2luZyBhIHRvZ2dsZXIgb2YgYW4gb2ZmY2FudmFzLCB3aGlsZSBhbm90aGVyIGlzIG9wZW5cbiAgICB2YXIgYWxyZWFkeU9wZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKE9QRU5fU0VMRUNUT1IpO1xuICAgIGlmIChhbHJlYWR5T3BlbiAmJiBhbHJlYWR5T3BlbiAhPT0gdGFyZ2V0KSB7XG4gICAgICBPZmZjYW52YXMuZ2V0SW5zdGFuY2UoYWxyZWFkeU9wZW4pLmhpZGUoKTtcbiAgICB9XG4gICAgdmFyIGRhdGEgPSBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0YXJnZXQpO1xuICAgIGRhdGEudG9nZ2xlKHRoaXMpO1xuICB9KTtcbiAgRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSQyLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9pdGVyYXRvcjE2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoU2VsZWN0b3JFbmdpbmUuZmluZChPUEVOX1NFTEVDVE9SKSksXG4gICAgICBfc3RlcDE2O1xuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjE2LnMoKTsgIShfc3RlcDE2ID0gX2l0ZXJhdG9yMTYubigpKS5kb25lOykge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSBfc3RlcDE2LnZhbHVlO1xuICAgICAgICBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZShzZWxlY3Rvcikuc2hvdygpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yMTYuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IxNi5mKCk7XG4gICAgfVxuICB9KTtcbiAgRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfUkVTSVpFLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9pdGVyYXRvcjE3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoU2VsZWN0b3JFbmdpbmUuZmluZCgnW2FyaWEtbW9kYWxdW2NsYXNzKj1zaG93XVtjbGFzcyo9b2ZmY2FudmFzLV0nKSksXG4gICAgICBfc3RlcDE3O1xuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjE3LnMoKTsgIShfc3RlcDE3ID0gX2l0ZXJhdG9yMTcubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IF9zdGVwMTcudmFsdWU7XG4gICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgICAgT2ZmY2FudmFzLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCkuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IxNy5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjE3LmYoKTtcbiAgICB9XG4gIH0pO1xuICBlbmFibGVEaXNtaXNzVHJpZ2dlcihPZmZjYW52YXMpO1xuXG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luKE9mZmNhbnZhcyk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjUuMy4wLWFscGhhMSk6IHV0aWwvc2FuaXRpemVyLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgdXJpQXR0cmlidXRlcyA9IG5ldyBTZXQoWydiYWNrZ3JvdW5kJywgJ2NpdGUnLCAnaHJlZicsICdpdGVtdHlwZScsICdsb25nZGVzYycsICdwb3N0ZXInLCAnc3JjJywgJ3hsaW5rOmhyZWYnXSk7XG4gIHZhciBBUklBX0FUVFJJQlVURV9QQVRURVJOID0gL15hcmlhLVtcXHctXSokL2k7XG5cbiAgLyoqXG4gICAqIEEgcGF0dGVybiB0aGF0IHJlY29nbml6ZXMgYSBjb21tb25seSB1c2VmdWwgc3Vic2V0IG9mIFVSTHMgdGhhdCBhcmUgc2FmZS5cbiAgICpcbiAgICogU2hvdXQtb3V0IHRvIEFuZ3VsYXIgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzEyLjIueC9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vdXJsX3Nhbml0aXplci50c1xuICAgKi9cbiAgdmFyIFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlfHNtcyk6fFteIyYvOj9dKig/OlsjLz9dfCQpKS9pO1xuXG4gIC8qKlxuICAgKiBBIHBhdHRlcm4gdGhhdCBtYXRjaGVzIHNhZmUgZGF0YSBVUkxzLiBPbmx5IG1hdGNoZXMgaW1hZ2UsIHZpZGVvIGFuZCBhdWRpbyB0eXBlcy5cbiAgICpcbiAgICogU2hvdXQtb3V0IHRvIEFuZ3VsYXIgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzEyLjIueC9wYWNrYWdlcy9jb3JlL3NyYy9zYW5pdGl6YXRpb24vdXJsX3Nhbml0aXplci50c1xuICAgKi9cbiAgdmFyIERBVEFfVVJMX1BBVFRFUk4gPSAvXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbXFxkKy9hLXpdKz0qJC9pO1xuICB2YXIgYWxsb3dlZEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIGFsbG93ZWRBdHRyaWJ1dGUoYXR0cmlidXRlLCBhbGxvd2VkQXR0cmlidXRlTGlzdCkge1xuICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmluY2x1ZGVzKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICBpZiAodXJpQXR0cmlidXRlcy5oYXMoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oU0FGRV9VUkxfUEFUVEVSTi50ZXN0KGF0dHJpYnV0ZS5ub2RlVmFsdWUpIHx8IERBVEFfVVJMX1BBVFRFUk4udGVzdChhdHRyaWJ1dGUubm9kZVZhbHVlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWxpZGF0ZXMgdGhlIGF0dHJpYnV0ZS5cbiAgICByZXR1cm4gYWxsb3dlZEF0dHJpYnV0ZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChhdHRyaWJ1dGVSZWdleCkge1xuICAgICAgcmV0dXJuIGF0dHJpYnV0ZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIH0pLnNvbWUoZnVuY3Rpb24gKHJlZ2V4KSB7XG4gICAgICByZXR1cm4gcmVnZXgudGVzdChhdHRyaWJ1dGVOYW1lKTtcbiAgICB9KTtcbiAgfTtcbiAgdmFyIERlZmF1bHRBbGxvd2xpc3QgPSB7XG4gICAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cbiAgICAnKic6IFsnY2xhc3MnLCAnZGlyJywgJ2lkJywgJ2xhbmcnLCAncm9sZScsIEFSSUFfQVRUUklCVVRFX1BBVFRFUk5dLFxuICAgIGE6IFsndGFyZ2V0JywgJ2hyZWYnLCAndGl0bGUnLCAncmVsJ10sXG4gICAgYXJlYTogW10sXG4gICAgYjogW10sXG4gICAgYnI6IFtdLFxuICAgIGNvbDogW10sXG4gICAgY29kZTogW10sXG4gICAgZGl2OiBbXSxcbiAgICBlbTogW10sXG4gICAgaHI6IFtdLFxuICAgIGgxOiBbXSxcbiAgICBoMjogW10sXG4gICAgaDM6IFtdLFxuICAgIGg0OiBbXSxcbiAgICBoNTogW10sXG4gICAgaDY6IFtdLFxuICAgIGk6IFtdLFxuICAgIGltZzogWydzcmMnLCAnc3Jjc2V0JywgJ2FsdCcsICd0aXRsZScsICd3aWR0aCcsICdoZWlnaHQnXSxcbiAgICBsaTogW10sXG4gICAgb2w6IFtdLFxuICAgIHA6IFtdLFxuICAgIHByZTogW10sXG4gICAgczogW10sXG4gICAgc21hbGw6IFtdLFxuICAgIHNwYW46IFtdLFxuICAgIHN1YjogW10sXG4gICAgc3VwOiBbXSxcbiAgICBzdHJvbmc6IFtdLFxuICAgIHU6IFtdLFxuICAgIHVsOiBbXVxuICB9O1xuICBmdW5jdGlvbiBzYW5pdGl6ZUh0bWwodW5zYWZlSHRtbCwgYWxsb3dMaXN0LCBzYW5pdGl6ZUZ1bmN0aW9uKSB7XG4gICAgdmFyIF9yZWY3O1xuICAgIGlmICghdW5zYWZlSHRtbC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1bnNhZmVIdG1sO1xuICAgIH1cbiAgICBpZiAoc2FuaXRpemVGdW5jdGlvbiAmJiB0eXBlb2Ygc2FuaXRpemVGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHNhbml0aXplRnVuY3Rpb24odW5zYWZlSHRtbCk7XG4gICAgfVxuICAgIHZhciBkb21QYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpO1xuICAgIHZhciBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsICd0ZXh0L2h0bWwnKTtcbiAgICB2YXIgZWxlbWVudHMgPSAoX3JlZjcgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWY3LCBfdG9Db25zdW1hYmxlQXJyYXkoY3JlYXRlZERvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbCgnKicpKSk7XG4gICAgdmFyIF9pdGVyYXRvcjE4ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZWxlbWVudHMpLFxuICAgICAgX3N0ZXAxODtcbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IxOC5zKCk7ICEoX3N0ZXAxOCA9IF9pdGVyYXRvcjE4Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIF9yZWY4O1xuICAgICAgICB2YXIgZWxlbWVudCA9IF9zdGVwMTgudmFsdWU7XG4gICAgICAgIHZhciBlbGVtZW50TmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhhbGxvd0xpc3QpLmluY2x1ZGVzKGVsZW1lbnROYW1lKSkge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF0dHJpYnV0ZUxpc3QgPSAoX3JlZjggPSBbXSkuY29uY2F0LmFwcGx5KF9yZWY4LCBfdG9Db25zdW1hYmxlQXJyYXkoZWxlbWVudC5hdHRyaWJ1dGVzKSk7XG4gICAgICAgIHZhciBhbGxvd2VkQXR0cmlidXRlcyA9IFtdLmNvbmNhdChhbGxvd0xpc3RbJyonXSB8fCBbXSwgYWxsb3dMaXN0W2VsZW1lbnROYW1lXSB8fCBbXSk7XG4gICAgICAgIHZhciBfaXRlcmF0b3IxOSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGF0dHJpYnV0ZUxpc3QpLFxuICAgICAgICAgIF9zdGVwMTk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IxOS5zKCk7ICEoX3N0ZXAxOSA9IF9pdGVyYXRvcjE5Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBfc3RlcDE5LnZhbHVlO1xuICAgICAgICAgICAgaWYgKCFhbGxvd2VkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYWxsb3dlZEF0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZS5ub2RlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IxOS5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMTkuZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IxOC5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjE4LmYoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTDtcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY1LjMuMC1hbHBoYTEpOiB1dGlsL3RlbXBsYXRlLWZhY3RvcnkuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUkNSA9ICdUZW1wbGF0ZUZhY3RvcnknO1xuICB2YXIgRGVmYXVsdCQ0ID0ge1xuICAgIGFsbG93TGlzdDogRGVmYXVsdEFsbG93bGlzdCxcbiAgICBjb250ZW50OiB7fSxcbiAgICAvLyB7IHNlbGVjdG9yIDogdGV4dCAsICBzZWxlY3RvcjIgOiB0ZXh0MiAsIH1cbiAgICBleHRyYUNsYXNzOiAnJyxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBzYW5pdGl6ZTogdHJ1ZSxcbiAgICBzYW5pdGl6ZUZuOiBudWxsLFxuICAgIHRlbXBsYXRlOiAnPGRpdj48L2Rpdj4nXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSQ0ID0ge1xuICAgIGFsbG93TGlzdDogJ29iamVjdCcsXG4gICAgY29udGVudDogJ29iamVjdCcsXG4gICAgZXh0cmFDbGFzczogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBodG1sOiAnYm9vbGVhbicsXG4gICAgc2FuaXRpemU6ICdib29sZWFuJyxcbiAgICBzYW5pdGl6ZUZuOiAnKG51bGx8ZnVuY3Rpb24pJyxcbiAgICB0ZW1wbGF0ZTogJ3N0cmluZydcbiAgfTtcbiAgdmFyIERlZmF1bHRDb250ZW50VHlwZSA9IHtcbiAgICBlbnRyeTogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbnxudWxsKScsXG4gICAgc2VsZWN0b3I6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuICB2YXIgVGVtcGxhdGVGYWN0b3J5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29uZmlnNSkge1xuICAgIF9pbmhlcml0cyhUZW1wbGF0ZUZhY3RvcnksIF9Db25maWc1KTtcbiAgICB2YXIgX3N1cGVyMTIgPSBfY3JlYXRlU3VwZXIoVGVtcGxhdGVGYWN0b3J5KTtcbiAgICBmdW5jdGlvbiBUZW1wbGF0ZUZhY3RvcnkoY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXMzNztcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZW1wbGF0ZUZhY3RvcnkpO1xuICAgICAgX3RoaXMzNyA9IF9zdXBlcjEyLmNhbGwodGhpcyk7XG4gICAgICBfdGhpczM3Ll9jb25maWcgPSBfdGhpczM3Ll9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHJldHVybiBfdGhpczM3O1xuICAgIH1cblxuICAgIC8vIEdldHRlcnNcbiAgICBfY3JlYXRlQ2xhc3MoVGVtcGxhdGVGYWN0b3J5LCBbe1xuICAgICAga2V5OiBcImdldENvbnRlbnRcIixcbiAgICAgIHZhbHVlOlxuICAgICAgLy8gUHVibGljXG4gICAgICBmdW5jdGlvbiBnZXRDb250ZW50KCkge1xuICAgICAgICB2YXIgX3RoaXMzOCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHRoaXMuX2NvbmZpZy5jb250ZW50KS5tYXAoZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiBfdGhpczM4Ll9yZXNvbHZlUG9zc2libGVGdW5jdGlvbihjb25maWcpO1xuICAgICAgICB9KS5maWx0ZXIoQm9vbGVhbik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhhc0NvbnRlbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb250ZW50KCkubGVuZ3RoID4gMDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiY2hhbmdlQ29udGVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZUNvbnRlbnQoY29udGVudCkge1xuICAgICAgICB0aGlzLl9jaGVja0NvbnRlbnQoY29udGVudCk7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5jb250ZW50ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLl9jb25maWcuY29udGVudCksIGNvbnRlbnQpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidG9IdG1sXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdG9IdG1sKCkge1xuICAgICAgICB2YXIgdGVtcGxhdGVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBsYXRlV3JhcHBlci5pbm5lckhUTUwgPSB0aGlzLl9tYXliZVNhbml0aXplKHRoaXMuX2NvbmZpZy50ZW1wbGF0ZSk7XG4gICAgICAgIGZvciAodmFyIF9pOCA9IDAsIF9PYmplY3QkZW50cmllczUgPSBPYmplY3QuZW50cmllcyh0aGlzLl9jb25maWcuY29udGVudCk7IF9pOCA8IF9PYmplY3QkZW50cmllczUubGVuZ3RoOyBfaTgrKykge1xuICAgICAgICAgIHZhciBfT2JqZWN0JGVudHJpZXM1JF9pID0gX3NsaWNlZFRvQXJyYXkoX09iamVjdCRlbnRyaWVzNVtfaThdLCAyKSxcbiAgICAgICAgICAgIHNlbGVjdG9yID0gX09iamVjdCRlbnRyaWVzNSRfaVswXSxcbiAgICAgICAgICAgIHRleHQgPSBfT2JqZWN0JGVudHJpZXM1JF9pWzFdO1xuICAgICAgICAgIHRoaXMuX3NldENvbnRlbnQodGVtcGxhdGVXcmFwcGVyLCB0ZXh0LCBzZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRlbXBsYXRlID0gdGVtcGxhdGVXcmFwcGVyLmNoaWxkcmVuWzBdO1xuICAgICAgICB2YXIgZXh0cmFDbGFzcyA9IHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy5leHRyYUNsYXNzKTtcbiAgICAgICAgaWYgKGV4dHJhQ2xhc3MpIHtcbiAgICAgICAgICB2YXIgX3RlbXBsYXRlJGNsYXNzTGlzdDtcbiAgICAgICAgICAoX3RlbXBsYXRlJGNsYXNzTGlzdCA9IHRlbXBsYXRlLmNsYXNzTGlzdCkuYWRkLmFwcGx5KF90ZW1wbGF0ZSRjbGFzc0xpc3QsIF90b0NvbnN1bWFibGVBcnJheShleHRyYUNsYXNzLnNwbGl0KCcgJykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9XG5cbiAgICAgIC8vIFByaXZhdGVcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3R5cGVDaGVja0NvbmZpZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90eXBlQ2hlY2tDb25maWcoY29uZmlnKSB7XG4gICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFRlbXBsYXRlRmFjdG9yeS5wcm90b3R5cGUpLCBcIl90eXBlQ2hlY2tDb25maWdcIiwgdGhpcykuY2FsbCh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9jaGVja0NvbnRlbnQoY29uZmlnLmNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfY2hlY2tDb250ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2NoZWNrQ29udGVudChhcmcpIHtcbiAgICAgICAgZm9yICh2YXIgX2k5ID0gMCwgX09iamVjdCRlbnRyaWVzNiA9IE9iamVjdC5lbnRyaWVzKGFyZyk7IF9pOSA8IF9PYmplY3QkZW50cmllczYubGVuZ3RoOyBfaTkrKykge1xuICAgICAgICAgIHZhciBfT2JqZWN0JGVudHJpZXM2JF9pID0gX3NsaWNlZFRvQXJyYXkoX09iamVjdCRlbnRyaWVzNltfaTldLCAyKSxcbiAgICAgICAgICAgIHNlbGVjdG9yID0gX09iamVjdCRlbnRyaWVzNiRfaVswXSxcbiAgICAgICAgICAgIGNvbnRlbnQgPSBfT2JqZWN0JGVudHJpZXM2JF9pWzFdO1xuICAgICAgICAgIF9nZXQoX2dldFByb3RvdHlwZU9mKFRlbXBsYXRlRmFjdG9yeS5wcm90b3R5cGUpLCBcIl90eXBlQ2hlY2tDb25maWdcIiwgdGhpcykuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgICAgICAgICBlbnRyeTogY29udGVudFxuICAgICAgICAgIH0sIERlZmF1bHRDb250ZW50VHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3NldENvbnRlbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0Q29udGVudCh0ZW1wbGF0ZSwgY29udGVudCwgc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoc2VsZWN0b3IsIHRlbXBsYXRlKTtcbiAgICAgICAgaWYgKCF0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29udGVudCA9IHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGNvbnRlbnQpO1xuICAgICAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgICAgICB0ZW1wbGF0ZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0VsZW1lbnQoY29udGVudCkpIHtcbiAgICAgICAgICB0aGlzLl9wdXRFbGVtZW50SW5UZW1wbGF0ZShnZXRFbGVtZW50KGNvbnRlbnQpLCB0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmh0bWwpIHtcbiAgICAgICAgICB0ZW1wbGF0ZUVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fbWF5YmVTYW5pdGl6ZShjb250ZW50KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVFbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX21heWJlU2FuaXRpemVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbWF5YmVTYW5pdGl6ZShhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZSA/IHNhbml0aXplSHRtbChhcmcsIHRoaXMuX2NvbmZpZy5hbGxvd0xpc3QsIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZUZuKSA6IGFyZztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gZXhlY3V0ZShhcmcsIFt0aGlzXSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9wdXRFbGVtZW50SW5UZW1wbGF0ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wdXRFbGVtZW50SW5UZW1wbGF0ZShlbGVtZW50LCB0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICAgICAgdGVtcGxhdGVFbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIHRlbXBsYXRlRWxlbWVudC5hcHBlbmQoZWxlbWVudCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlRWxlbWVudC50ZXh0Q29udGVudCA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgICB9XG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQ1O1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gVGVtcGxhdGVGYWN0b3J5O1xuICB9KENvbmZpZyk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY1LjMuMC1hbHBoYTEpOiB0b29sdGlwLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cbiAgdmFyIE5BTUUkNCA9ICd0b29sdGlwJztcbiAgdmFyIERJU0FMTE9XRURfQVRUUklCVVRFUyA9IG5ldyBTZXQoWydzYW5pdGl6ZScsICdhbGxvd0xpc3QnLCAnc2FuaXRpemVGbiddKTtcbiAgdmFyIENMQVNTX05BTUVfRkFERSQyID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9NT0RBTCA9ICdtb2RhbCc7XG4gIHZhciBDTEFTU19OQU1FX1NIT1ckMiA9ICdzaG93JztcbiAgdmFyIFNFTEVDVE9SX1RPT0xUSVBfSU5ORVIgPSAnLnRvb2x0aXAtaW5uZXInO1xuICB2YXIgU0VMRUNUT1JfTU9EQUwgPSBcIi5cIi5jb25jYXQoQ0xBU1NfTkFNRV9NT0RBTCk7XG4gIHZhciBFVkVOVF9NT0RBTF9ISURFID0gJ2hpZGUuYnMubW9kYWwnO1xuICB2YXIgVFJJR0dFUl9IT1ZFUiA9ICdob3Zlcic7XG4gIHZhciBUUklHR0VSX0ZPQ1VTID0gJ2ZvY3VzJztcbiAgdmFyIFRSSUdHRVJfQ0xJQ0sgPSAnY2xpY2snO1xuICB2YXIgVFJJR0dFUl9NQU5VQUwgPSAnbWFudWFsJztcbiAgdmFyIEVWRU5UX0hJREUkMiA9ICdoaWRlJztcbiAgdmFyIEVWRU5UX0hJRERFTiQyID0gJ2hpZGRlbic7XG4gIHZhciBFVkVOVF9TSE9XJDIgPSAnc2hvdyc7XG4gIHZhciBFVkVOVF9TSE9XTiQyID0gJ3Nob3duJztcbiAgdmFyIEVWRU5UX0lOU0VSVEVEID0gJ2luc2VydGVkJztcbiAgdmFyIEVWRU5UX0NMSUNLJDEgPSAnY2xpY2snO1xuICB2YXIgRVZFTlRfRk9DVVNJTiQxID0gJ2ZvY3VzaW4nO1xuICB2YXIgRVZFTlRfRk9DVVNPVVQkMSA9ICdmb2N1c291dCc7XG4gIHZhciBFVkVOVF9NT1VTRUVOVEVSID0gJ21vdXNlZW50ZXInO1xuICB2YXIgRVZFTlRfTU9VU0VMRUFWRSA9ICdtb3VzZWxlYXZlJztcbiAgdmFyIEF0dGFjaG1lbnRNYXAgPSB7XG4gICAgQVVUTzogJ2F1dG8nLFxuICAgIFRPUDogJ3RvcCcsXG4gICAgUklHSFQ6IGlzUlRMKCkgPyAnbGVmdCcgOiAncmlnaHQnLFxuICAgIEJPVFRPTTogJ2JvdHRvbScsXG4gICAgTEVGVDogaXNSVEwoKSA/ICdyaWdodCcgOiAnbGVmdCdcbiAgfTtcbiAgdmFyIERlZmF1bHQkMyA9IHtcbiAgICBhbGxvd0xpc3Q6IERlZmF1bHRBbGxvd2xpc3QsXG4gICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgIGJvdW5kYXJ5OiAnY2xpcHBpbmdQYXJlbnRzJyxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIGN1c3RvbUNsYXNzOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBmYWxsYmFja1BsYWNlbWVudHM6IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10sXG4gICAgaHRtbDogZmFsc2UsXG4gICAgb2Zmc2V0OiBbMCwgMF0sXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBwb3BwZXJDb25maWc6IG51bGwsXG4gICAgc2FuaXRpemU6IHRydWUsXG4gICAgc2FuaXRpemVGbjogbnVsbCxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PicgKyAnPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj4nICsgJzwvZGl2PicsXG4gICAgdGl0bGU6ICcnLFxuICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cydcbiAgfTtcbiAgdmFyIERlZmF1bHRUeXBlJDMgPSB7XG4gICAgYWxsb3dMaXN0OiAnb2JqZWN0JyxcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXG4gICAgY3VzdG9tQ2xhc3M6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gICAgZGVsYXk6ICcobnVtYmVyfG9iamVjdCknLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50czogJ2FycmF5JyxcbiAgICBodG1sOiAnYm9vbGVhbicsXG4gICAgb2Zmc2V0OiAnKGFycmF5fHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIHBsYWNlbWVudDogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICBwb3BwZXJDb25maWc6ICcobnVsbHxvYmplY3R8ZnVuY3Rpb24pJyxcbiAgICBzYW5pdGl6ZTogJ2Jvb2xlYW4nLFxuICAgIHNhbml0aXplRm46ICcobnVsbHxmdW5jdGlvbiknLFxuICAgIHNlbGVjdG9yOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgdGVtcGxhdGU6ICdzdHJpbmcnLFxuICAgIHRpdGxlOiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKScsXG4gICAgdHJpZ2dlcjogJ3N0cmluZydcbiAgfTtcblxuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cbiAgdmFyIFRvb2x0aXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlQ29tcG9uZW50OCkge1xuICAgIF9pbmhlcml0cyhUb29sdGlwLCBfQmFzZUNvbXBvbmVudDgpO1xuICAgIHZhciBfc3VwZXIxMyA9IF9jcmVhdGVTdXBlcihUb29sdGlwKTtcbiAgICBmdW5jdGlvbiBUb29sdGlwKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdmFyIF90aGlzMzk7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG4gICAgICBpZiAodHlwZW9mIFBvcHBlcl9fbmFtZXNwYWNlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyIChodHRwczovL3BvcHBlci5qcy5vcmcpJyk7XG4gICAgICB9XG4gICAgICBfdGhpczM5ID0gX3N1cGVyMTMuY2FsbCh0aGlzLCBlbGVtZW50LCBjb25maWcpO1xuXG4gICAgICAvLyBQcml2YXRlXG4gICAgICBfdGhpczM5Ll9pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgX3RoaXMzOS5fdGltZW91dCA9IDA7XG4gICAgICBfdGhpczM5Ll9pc0hvdmVyZWQgPSBudWxsO1xuICAgICAgX3RoaXMzOS5fYWN0aXZlVHJpZ2dlciA9IHt9O1xuICAgICAgX3RoaXMzOS5fcG9wcGVyID0gbnVsbDtcbiAgICAgIF90aGlzMzkuX3RlbXBsYXRlRmFjdG9yeSA9IG51bGw7XG4gICAgICBfdGhpczM5Ll9uZXdDb250ZW50ID0gbnVsbDtcblxuICAgICAgLy8gUHJvdGVjdGVkXG4gICAgICBfdGhpczM5LnRpcCA9IG51bGw7XG4gICAgICBfdGhpczM5Ll9zZXRMaXN0ZW5lcnMoKTtcbiAgICAgIGlmICghX3RoaXMzOS5fY29uZmlnLnNlbGVjdG9yKSB7XG4gICAgICAgIF90aGlzMzkuX2ZpeFRpdGxlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXMzOTtcbiAgICB9XG5cbiAgICAvLyBHZXR0ZXJzXG4gICAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIFt7XG4gICAgICBrZXk6IFwiZW5hYmxlXCIsXG4gICAgICB2YWx1ZTpcbiAgICAgIC8vIFB1YmxpY1xuICAgICAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNhYmxlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcInRvZ2dsZUVuYWJsZWRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGVFbmFibGVkKCkge1xuICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJ0b2dnbGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhdGhpcy5fYWN0aXZlVHJpZ2dlci5jbGljaztcbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24oKSkge1xuICAgICAgICAgIHRoaXMuX2xlYXZlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VudGVyKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRpc3Bvc2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX01PREFMKSwgRVZFTlRfTU9EQUxfSElERSwgdGhpcy5faGlkZU1vZGFsSGFuZGxlcik7XG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy1vcmlnaW5hbC10aXRsZScpKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpO1xuICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihUb29sdGlwLnByb3RvdHlwZSksIFwiZGlzcG9zZVwiLCB0aGlzKS5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzaG93XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgdmFyIF90aGlzNDAgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEodGhpcy5faXNXaXRoQ29udGVudCgpICYmIHRoaXMuX2lzRW5hYmxlZCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX1NIT1ckMikpO1xuICAgICAgICB2YXIgc2hhZG93Um9vdCA9IGZpbmRTaGFkb3dSb290KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB2YXIgaXNJblRoZURvbSA9IChzaGFkb3dSb290IHx8IHRoaXMuX2VsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmNvbnRhaW5zKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0b2RvIHY2IHJlbW92ZSB0aGlzIE9SIG1ha2UgaXQgb3B0aW9uYWxcbiAgICAgICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpO1xuICAgICAgICB2YXIgdGlwID0gdGhpcy5fZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHRpcC5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5fY29uZmlnLmNvbnRhaW5lcjtcbiAgICAgICAgaWYgKCF0aGlzLl9lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKHRoaXMudGlwKSkge1xuICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQodGlwKTtcbiAgICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9JTlNFUlRFRCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BvcHBlciA9IHRoaXMuX2NyZWF0ZVBvcHBlcih0aXApO1xuICAgICAgICB0aXAuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1ckMik7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIHZhciBfcmVmOTtcbiAgICAgICAgICB2YXIgX2l0ZXJhdG9yMjAgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcigoX3JlZjkgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWY5LCBfdG9Db25zdW1hYmxlQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbikpKSxcbiAgICAgICAgICAgIF9zdGVwMjA7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMjAucygpOyAhKF9zdGVwMjAgPSBfaXRlcmF0b3IyMC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX3N0ZXAyMC52YWx1ZTtcbiAgICAgICAgICAgICAgRXZlbnRIYW5kbGVyLm9uKGVsZW1lbnQsICdtb3VzZW92ZXInLCBub29wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIF9pdGVyYXRvcjIwLmUoZXJyKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMjAuZigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihfdGhpczQwLl9lbGVtZW50LCBfdGhpczQwLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9TSE9XTiQyKSk7XG4gICAgICAgICAgaWYgKF90aGlzNDAuX2lzSG92ZXJlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF90aGlzNDAuX2xlYXZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzNDAuX2lzSG92ZXJlZCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgdGhpcy5faXNBbmltYXRlZCgpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiaGlkZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgIHZhciBfdGhpczQxID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX0hJREUkMikpO1xuICAgICAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRpcCA9IHRoaXMuX2dldFRpcEVsZW1lbnQoKTtcbiAgICAgICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDIpO1xuXG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgX3JlZjEwO1xuICAgICAgICAgIHZhciBfaXRlcmF0b3IyMSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKChfcmVmMTAgPSBbXSkuY29uY2F0LmFwcGx5KF9yZWYxMCwgX3RvQ29uc3VtYWJsZUFycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pKSksXG4gICAgICAgICAgICBfc3RlcDIxO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIxLnMoKTsgIShfc3RlcDIxID0gX2l0ZXJhdG9yMjEubigpKS5kb25lOykge1xuICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IF9zdGVwMjEudmFsdWU7XG4gICAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgJ21vdXNlb3ZlcicsIG5vb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2l0ZXJhdG9yMjEuZShlcnIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBfaXRlcmF0b3IyMS5mKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9DTElDS10gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0ZPQ1VTXSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfSE9WRVJdID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzSG92ZXJlZCA9IG51bGw7IC8vIGl0IGlzIGEgdHJpY2sgdG8gc3VwcG9ydCBtYW51YWwgdHJpZ2dlcmluZ1xuXG4gICAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIGlmIChfdGhpczQxLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFfdGhpczQxLl9pc0hvdmVyZWQpIHtcbiAgICAgICAgICAgIF90aGlzNDEuX2Rpc3Bvc2VQb3BwZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXM0MS5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcbiAgICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihfdGhpczQxLl9lbGVtZW50LCBfdGhpczQxLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9ISURERU4kMikpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgdGhpcy5faXNBbmltYXRlZCgpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwidXBkYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFByb3RlY3RlZFxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaXNXaXRoQ29udGVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1dpdGhDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLl9nZXRUaXRsZSgpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldFRpcEVsZW1lbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VGlwRWxlbWVudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRpcCkge1xuICAgICAgICAgIHRoaXMudGlwID0gdGhpcy5fY3JlYXRlVGlwRWxlbWVudCh0aGlzLl9uZXdDb250ZW50IHx8IHRoaXMuX2dldENvbnRlbnRGb3JUZW1wbGF0ZSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50aXA7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9jcmVhdGVUaXBFbGVtZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZVRpcEVsZW1lbnQoY29udGVudCkge1xuICAgICAgICB2YXIgdGlwID0gdGhpcy5fZ2V0VGVtcGxhdGVGYWN0b3J5KGNvbnRlbnQpLnRvSHRtbCgpO1xuXG4gICAgICAgIC8vIHRvZG86IHJlbW92ZSB0aGlzIGNoZWNrIG9uIHY2XG4gICAgICAgIGlmICghdGlwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9GQURFJDIsIENMQVNTX05BTUVfU0hPVyQyKTtcbiAgICAgICAgLy8gdG9kbzogb24gdjYgdGhlIGZvbGxvd2luZyBjYW4gYmUgYWNoaWV2ZWQgd2l0aCBDU1Mgb25seVxuICAgICAgICB0aXAuY2xhc3NMaXN0LmFkZChcImJzLVwiLmNvbmNhdCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUsIFwiLWF1dG9cIikpO1xuICAgICAgICB2YXIgdGlwSWQgPSBnZXRVSUQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FKS50b1N0cmluZygpO1xuICAgICAgICB0aXAuc2V0QXR0cmlidXRlKCdpZCcsIHRpcElkKTtcbiAgICAgICAgaWYgKHRoaXMuX2lzQW5pbWF0ZWQoKSkge1xuICAgICAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfRkFERSQyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlwO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJzZXRDb250ZW50XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29udGVudChjb250ZW50KSB7XG4gICAgICAgIHRoaXMuX25ld0NvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICBpZiAodGhpcy5faXNTaG93bigpKSB7XG4gICAgICAgICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpO1xuICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRUZW1wbGF0ZUZhY3RvcnlcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0VGVtcGxhdGVGYWN0b3J5KGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RlbXBsYXRlRmFjdG9yeSkge1xuICAgICAgICAgIHRoaXMuX3RlbXBsYXRlRmFjdG9yeS5jaGFuZ2VDb250ZW50KGNvbnRlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3RlbXBsYXRlRmFjdG9yeSA9IG5ldyBUZW1wbGF0ZUZhY3RvcnkoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLl9jb25maWcpLCB7fSwge1xuICAgICAgICAgICAgLy8gdGhlIGBjb250ZW50YCB2YXIgaGFzIHRvIGJlIGFmdGVyIGB0aGlzLl9jb25maWdgXG4gICAgICAgICAgICAvLyB0byBvdmVycmlkZSBjb25maWcuY29udGVudCBpbiBjYXNlIG9mIHBvcG92ZXJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICAgICAgICBleHRyYUNsYXNzOiB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuY3VzdG9tQ2xhc3MpXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90ZW1wbGF0ZUZhY3Rvcnk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRDb250ZW50Rm9yVGVtcGxhdGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q29udGVudEZvclRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBTRUxFQ1RPUl9UT09MVElQX0lOTkVSLCB0aGlzLl9nZXRUaXRsZSgpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldFRpdGxlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFRpdGxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLnRpdGxlKSB8fCB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy1vcmlnaW5hbC10aXRsZScpO1xuICAgICAgfVxuXG4gICAgICAvLyBQcml2YXRlXG4gICAgfSwge1xuICAgICAga2V5OiBcIl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmdldE9yQ3JlYXRlSW5zdGFuY2UoZXZlbnQuZGVsZWdhdGVUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaXNBbmltYXRlZFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc0FuaW1hdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmFuaW1hdGlvbiB8fCB0aGlzLnRpcCAmJiB0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFJDIpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaXNTaG93blwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1Nob3duKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aXAgJiYgdGhpcy50aXAuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQyKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2NyZWF0ZVBvcHBlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVQb3BwZXIodGlwKSB7XG4gICAgICAgIHZhciBwbGFjZW1lbnQgPSBleGVjdXRlKHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQsIFt0aGlzLCB0aXAsIHRoaXMuX2VsZW1lbnRdKTtcbiAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgICAgcmV0dXJuIFBvcHBlcl9fbmFtZXNwYWNlLmNyZWF0ZVBvcHBlcih0aGlzLl9lbGVtZW50LCB0aXAsIHRoaXMuX2dldFBvcHBlckNvbmZpZyhhdHRhY2htZW50KSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRPZmZzZXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0T2Zmc2V0KCkge1xuICAgICAgICB2YXIgX3RoaXM0MiA9IHRoaXM7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9jb25maWcub2Zmc2V0O1xuICAgICAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gb2Zmc2V0LnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwb3BwZXJEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gb2Zmc2V0KHBvcHBlckRhdGEsIF90aGlzNDIuX2VsZW1lbnQpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gZXhlY3V0ZShhcmcsIFt0aGlzLl9lbGVtZW50XSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXRQb3BwZXJDb25maWdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzNDMgPSB0aGlzO1xuICAgICAgICB2YXIgZGVmYXVsdEJzUG9wcGVyQ29uZmlnID0ge1xuICAgICAgICAgIHBsYWNlbWVudDogYXR0YWNobWVudCxcbiAgICAgICAgICBtb2RpZmllcnM6IFt7XG4gICAgICAgICAgICBuYW1lOiAnZmxpcCcsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIGZhbGxiYWNrUGxhY2VtZW50czogdGhpcy5fY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50c1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6ICdvZmZzZXQnLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMuX2dldE9mZnNldCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBuYW1lOiAnYXJyb3cnLFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICBlbGVtZW50OiBcIi5cIi5jb25jYXQodGhpcy5jb25zdHJ1Y3Rvci5OQU1FLCBcIi1hcnJvd1wiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6ICdwcmVTZXRQbGFjZW1lbnQnLFxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIHBoYXNlOiAnYmVmb3JlTWFpbicsXG4gICAgICAgICAgICBmbjogZnVuY3Rpb24gZm4oZGF0YSkge1xuICAgICAgICAgICAgICAvLyBQcmUtc2V0IFBvcHBlcidzIHBsYWNlbWVudCBhdHRyaWJ1dGUgaW4gb3JkZXIgdG8gcmVhZCB0aGUgYXJyb3cgc2l6ZXMgcHJvcGVybHkuXG4gICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgUG9wcGVyIG1peGVzIHVwIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IGRpbWVuc2lvbnMgc2luY2UgdGhlIGluaXRpYWwgYXJyb3cgc3R5bGUgaXMgZm9yIHRvcCBwbGFjZW1lbnRcbiAgICAgICAgICAgICAgX3RoaXM0My5fZ2V0VGlwRWxlbWVudCgpLnNldEF0dHJpYnV0ZSgnZGF0YS1wb3BwZXItcGxhY2VtZW50JywgZGF0YS5zdGF0ZS5wbGFjZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1dXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRCc1BvcHBlckNvbmZpZyksIGV4ZWN1dGUodGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZywgW2RlZmF1bHRCc1BvcHBlckNvbmZpZ10pKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3NldExpc3RlbmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHZhciBfdGhpczQ0ID0gdGhpcztcbiAgICAgICAgdmFyIHRyaWdnZXJzID0gdGhpcy5fY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKTtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjIyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodHJpZ2dlcnMpLFxuICAgICAgICAgIF9zdGVwMjI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IyMi5zKCk7ICEoX3N0ZXAyMiA9IF9pdGVyYXRvcjIyLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gX3N0ZXAyMi52YWx1ZTtcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLmV2ZW50TmFtZShFVkVOVF9DTElDSyQxKSwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzNDQuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC50b2dnbGUoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRSSUdHRVJfTUFOVUFMKSB7XG4gICAgICAgICAgICAgIHZhciBldmVudEluID0gdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUiA/IHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX01PVVNFRU5URVIpIDogdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfRk9DVVNJTiQxKTtcbiAgICAgICAgICAgICAgdmFyIGV2ZW50T3V0ID0gdHJpZ2dlciA9PT0gVFJJR0dFUl9IT1ZFUiA/IHRoaXMuY29uc3RydWN0b3IuZXZlbnROYW1lKEVWRU5UX01PVVNFTEVBVkUpIDogdGhpcy5jb25zdHJ1Y3Rvci5ldmVudE5hbWUoRVZFTlRfRk9DVVNPVVQkMSk7XG4gICAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudEluLCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gX3RoaXM0NC5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c2luJyA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGV4dC5fZW50ZXIoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBldmVudE91dCwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzNDQuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVFJJR0dFUl9GT0NVUyA6IFRSSUdHRVJfSE9WRVJdID0gY29udGV4dC5fZWxlbWVudC5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0Ll9sZWF2ZSgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjIyLmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IyMi5mKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGlkZU1vZGFsSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX3RoaXM0NC5fZWxlbWVudCkge1xuICAgICAgICAgICAgX3RoaXM0NC5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX01PREFMKSwgRVZFTlRfTU9EQUxfSElERSwgdGhpcy5faGlkZU1vZGFsSGFuZGxlcik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9maXhUaXRsZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9maXhUaXRsZSgpIHtcbiAgICAgICAgdmFyIHRpdGxlID0gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgICAgIGlmICghdGl0bGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpICYmICF0aGlzLl9lbGVtZW50LnRleHRDb250ZW50LnRyaW0oKSkge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGl0bGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWJzLW9yaWdpbmFsLXRpdGxlJywgdGl0bGUpOyAvLyBETyBOT1QgVVNFIElULiBJcyBvbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGl0bGUnKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2VudGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2VudGVyKCkge1xuICAgICAgICB2YXIgX3RoaXM0NSA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pc1Nob3duKCkgfHwgdGhpcy5faXNIb3ZlcmVkKSB7XG4gICAgICAgICAgdGhpcy5faXNIb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNIb3ZlcmVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzNDUuX2lzSG92ZXJlZCkge1xuICAgICAgICAgICAgX3RoaXM0NS5zaG93KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzLl9jb25maWcuZGVsYXkuc2hvdyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9sZWF2ZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9sZWF2ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzNDYgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzSG92ZXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIV90aGlzNDYuX2lzSG92ZXJlZCkge1xuICAgICAgICAgICAgX3RoaXM0Ni5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzLl9jb25maWcuZGVsYXkuaGlkZSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9zZXRUaW1lb3V0XCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFRpbWVvdXQoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGhhbmRsZXIsIHRpbWVvdXQpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaXNXaXRoQWN0aXZlVHJpZ2dlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9hY3RpdmVUcmlnZ2VyKS5pbmNsdWRlcyh0cnVlKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldENvbmZpZ1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICAgIHZhciBkYXRhQXR0cmlidXRlcyA9IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICBmb3IgKHZhciBfaTEwID0gMCwgX09iamVjdCRrZXlzMiA9IE9iamVjdC5rZXlzKGRhdGFBdHRyaWJ1dGVzKTsgX2kxMCA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTEwKyspIHtcbiAgICAgICAgICB2YXIgZGF0YUF0dHJpYnV0ZSA9IF9PYmplY3Qka2V5czJbX2kxMF07XG4gICAgICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5oYXMoZGF0YUF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhQXR0cmlidXRlc1tkYXRhQXR0cmlidXRlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkYXRhQXR0cmlidXRlcyksIF90eXBlb2YoY29uZmlnKSA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xuICAgICAgICBjb25maWcgPSB0aGlzLl9tZXJnZUNvbmZpZ09iaihjb25maWcpO1xuICAgICAgICBjb25maWcgPSB0aGlzLl9jb25maWdBZnRlck1lcmdlKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX3R5cGVDaGVja0NvbmZpZyhjb25maWcpO1xuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfY29uZmlnQWZ0ZXJNZXJnZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9jb25maWdBZnRlck1lcmdlKGNvbmZpZykge1xuICAgICAgICBjb25maWcuY29udGFpbmVyID0gY29uZmlnLmNvbnRhaW5lciA9PT0gZmFsc2UgPyBkb2N1bWVudC5ib2R5IDogZ2V0RWxlbWVudChjb25maWcuY29udGFpbmVyKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uZmlnLmRlbGF5ID0ge1xuICAgICAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICAgICAgaGlkZTogY29uZmlnLmRlbGF5XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZ2V0RGVsZWdhdGVDb25maWdcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0RGVsZWdhdGVDb25maWcoKSB7XG4gICAgICAgIHZhciBjb25maWcgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgX2kxMSA9IDAsIF9PYmplY3QkZW50cmllczcgPSBPYmplY3QuZW50cmllcyh0aGlzLl9jb25maWcpOyBfaTExIDwgX09iamVjdCRlbnRyaWVzNy5sZW5ndGg7IF9pMTErKykge1xuICAgICAgICAgIHZhciBfT2JqZWN0JGVudHJpZXM3JF9pID0gX3NsaWNlZFRvQXJyYXkoX09iamVjdCRlbnRyaWVzN1tfaTExXSwgMiksXG4gICAgICAgICAgICBrZXkgPSBfT2JqZWN0JGVudHJpZXM3JF9pWzBdLFxuICAgICAgICAgICAgdmFsdWUgPSBfT2JqZWN0JGVudHJpZXM3JF9pWzFdO1xuICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbmZpZ1trZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5zZWxlY3RvciA9IGZhbHNlO1xuICAgICAgICBjb25maWcudHJpZ2dlciA9ICdtYW51YWwnO1xuXG4gICAgICAgIC8vIEluIHRoZSBmdXR1cmUgY2FuIGJlIHJlcGxhY2VkIHdpdGg6XG4gICAgICAgIC8vIGNvbnN0IGtleXNXaXRoRGlmZmVyZW50VmFsdWVzID0gT2JqZWN0LmVudHJpZXModGhpcy5fY29uZmlnKS5maWx0ZXIoZW50cnkgPT4gdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2VudHJ5WzBdXSAhPT0gdGhpcy5fY29uZmlnW2VudHJ5WzBdXSlcbiAgICAgICAgLy8gYE9iamVjdC5mcm9tRW50cmllcyhrZXlzV2l0aERpZmZlcmVudFZhbHVlcylgXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9kaXNwb3NlUG9wcGVyXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2Rpc3Bvc2VQb3BwZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICAgICAgdGhpcy50aXAucmVtb3ZlKCk7XG4gICAgICAgICAgdGhpcy50aXAgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFN0YXRpY1xuICAgIH1dLCBbe1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZSQzO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUUkNDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwialF1ZXJ5SW50ZXJmYWNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24galF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IFRvb2x0aXAuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiLmNvbmNhdChjb25maWcsIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFRvb2x0aXA7XG4gIH0oQmFzZUNvbXBvbmVudCk7XG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG4gIGRlZmluZUpRdWVyeVBsdWdpbihUb29sdGlwKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogcG9wb3Zlci5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cblxuICB2YXIgTkFNRSQzID0gJ3BvcG92ZXInO1xuICB2YXIgU0VMRUNUT1JfVElUTEUgPSAnLnBvcG92ZXItaGVhZGVyJztcbiAgdmFyIFNFTEVDVE9SX0NPTlRFTlQgPSAnLnBvcG92ZXItYm9keSc7XG4gIHZhciBEZWZhdWx0JDIgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIFRvb2x0aXAuRGVmYXVsdCksIHt9LCB7XG4gICAgY29udGVudDogJycsXG4gICAgb2Zmc2V0OiBbMCwgOF0sXG4gICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cInBvcG92ZXItYXJyb3dcIj48L2Rpdj4nICsgJzxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz4nICsgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj4nICsgJzwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2NsaWNrJ1xuICB9KTtcbiAgdmFyIERlZmF1bHRUeXBlJDIgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIFRvb2x0aXAuRGVmYXVsdFR5cGUpLCB7fSwge1xuICAgIGNvbnRlbnQ6ICcobnVsbHxzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBkZWZpbml0aW9uXG4gICAqL1xuICB2YXIgUG9wb3ZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Rvb2x0aXApIHtcbiAgICBfaW5oZXJpdHMoUG9wb3ZlciwgX1Rvb2x0aXApO1xuICAgIHZhciBfc3VwZXIxNCA9IF9jcmVhdGVTdXBlcihQb3BvdmVyKTtcbiAgICBmdW5jdGlvbiBQb3BvdmVyKCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcG92ZXIpO1xuICAgICAgcmV0dXJuIF9zdXBlcjE0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIF9jcmVhdGVDbGFzcyhQb3BvdmVyLCBbe1xuICAgICAga2V5OiBcIl9pc1dpdGhDb250ZW50XCIsXG4gICAgICB2YWx1ZTpcbiAgICAgIC8vIE92ZXJyaWRlc1xuICAgICAgZnVuY3Rpb24gX2lzV2l0aENvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJpdmF0ZVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZ2V0Q29udGVudEZvclRlbXBsYXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2dldENvbnRlbnRGb3JUZW1wbGF0ZSgpIHtcbiAgICAgICAgdmFyIF9yZWYxMjtcbiAgICAgICAgcmV0dXJuIF9yZWYxMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjEyLCBTRUxFQ1RPUl9USVRMRSwgdGhpcy5fZ2V0VGl0bGUoKSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMTIsIFNFTEVDVE9SX0NPTlRFTlQsIHRoaXMuX2dldENvbnRlbnQoKSksIF9yZWYxMjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldENvbnRlbnRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy5jb250ZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RhdGljXG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OlxuICAgICAgLy8gR2V0dGVyc1xuICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdCQyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0VHlwZVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0VHlwZSQyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUUkMztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwialF1ZXJ5SW50ZXJmYWNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24galF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IFBvcG92ZXIuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiLmNvbmNhdChjb25maWcsIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFBvcG92ZXI7XG4gIH0oVG9vbHRpcCk7XG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG4gIGRlZmluZUpRdWVyeVBsdWdpbihQb3BvdmVyKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogc2Nyb2xsc3B5LmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAvKipcbiAgICogQ29uc3RhbnRzXG4gICAqL1xuXG4gIHZhciBOQU1FJDIgPSAnc2Nyb2xsc3B5JztcbiAgdmFyIERBVEFfS0VZJDIgPSAnYnMuc2Nyb2xsc3B5JztcbiAgdmFyIEVWRU5UX0tFWSQyID0gXCIuXCIuY29uY2F0KERBVEFfS0VZJDIpO1xuICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gIHZhciBFVkVOVF9BQ1RJVkFURSA9IFwiYWN0aXZhdGVcIi5jb25jYXQoRVZFTlRfS0VZJDIpO1xuICB2YXIgRVZFTlRfQ0xJQ0sgPSBcImNsaWNrXCIuY29uY2F0KEVWRU5UX0tFWSQyKTtcbiAgdmFyIEVWRU5UX0xPQURfREFUQV9BUEkkMSA9IFwibG9hZFwiLmNvbmNhdChFVkVOVF9LRVkkMikuY29uY2F0KERBVEFfQVBJX0tFWSk7XG4gIHZhciBDTEFTU19OQU1FX0RST1BET1dOX0lURU0gPSAnZHJvcGRvd24taXRlbSc7XG4gIHZhciBDTEFTU19OQU1FX0FDVElWRSQxID0gJ2FjdGl2ZSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1NQWSA9ICdbZGF0YS1icy1zcHk9XCJzY3JvbGxcIl0nO1xuICB2YXIgU0VMRUNUT1JfVEFSR0VUX0xJTktTID0gJ1tocmVmXSc7XG4gIHZhciBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCA9ICcubmF2LCAubGlzdC1ncm91cCc7XG4gIHZhciBTRUxFQ1RPUl9OQVZfTElOS1MgPSAnLm5hdi1saW5rJztcbiAgdmFyIFNFTEVDVE9SX05BVl9JVEVNUyA9ICcubmF2LWl0ZW0nO1xuICB2YXIgU0VMRUNUT1JfTElTVF9JVEVNUyA9ICcubGlzdC1ncm91cC1pdGVtJztcbiAgdmFyIFNFTEVDVE9SX0xJTktfSVRFTVMgPSBcIlwiLmNvbmNhdChTRUxFQ1RPUl9OQVZfTElOS1MsIFwiLCBcIikuY29uY2F0KFNFTEVDVE9SX05BVl9JVEVNUywgXCIgPiBcIikuY29uY2F0KFNFTEVDVE9SX05BVl9MSU5LUywgXCIsIFwiKS5jb25jYXQoU0VMRUNUT1JfTElTVF9JVEVNUyk7XG4gIHZhciBTRUxFQ1RPUl9EUk9QRE9XTiA9ICcuZHJvcGRvd24nO1xuICB2YXIgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFJDEgPSAnLmRyb3Bkb3duLXRvZ2dsZSc7XG4gIHZhciBEZWZhdWx0JDEgPSB7XG4gICAgb2Zmc2V0OiBudWxsLFxuICAgIC8vIFRPRE86IHY2IEBkZXByZWNhdGVkLCBrZWVwIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSByZWFzb25zXG4gICAgcm9vdE1hcmdpbjogJzBweCAwcHggLTI1JScsXG4gICAgc21vb3RoU2Nyb2xsOiBmYWxzZSxcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgdGhyZXNob2xkOiBbMC4xLCAwLjUsIDFdXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSQxID0ge1xuICAgIG9mZnNldDogJyhudW1iZXJ8bnVsbCknLFxuICAgIC8vIFRPRE8gdjYgQGRlcHJlY2F0ZWQsIGtlZXAgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnNcbiAgICByb290TWFyZ2luOiAnc3RyaW5nJyxcbiAgICBzbW9vdGhTY3JvbGw6ICdib29sZWFuJyxcbiAgICB0YXJnZXQ6ICdlbGVtZW50JyxcbiAgICB0aHJlc2hvbGQ6ICdhcnJheSdcbiAgfTtcblxuICAvKipcbiAgICogQ2xhc3MgZGVmaW5pdGlvblxuICAgKi9cbiAgdmFyIFNjcm9sbFNweSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDb21wb25lbnQ5KSB7XG4gICAgX2luaGVyaXRzKFNjcm9sbFNweSwgX0Jhc2VDb21wb25lbnQ5KTtcbiAgICB2YXIgX3N1cGVyMTUgPSBfY3JlYXRlU3VwZXIoU2Nyb2xsU3B5KTtcbiAgICBmdW5jdGlvbiBTY3JvbGxTcHkoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXM0NztcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTY3JvbGxTcHkpO1xuICAgICAgX3RoaXM0NyA9IF9zdXBlcjE1LmNhbGwodGhpcywgZWxlbWVudCwgY29uZmlnKTtcblxuICAgICAgLy8gdGhpcy5fZWxlbWVudCBpcyB0aGUgb2JzZXJ2YWJsZXNDb250YWluZXIgYW5kIGNvbmZpZy50YXJnZXQgdGhlIG1lbnUgbGlua3Mgd3JhcHBlclxuICAgICAgX3RoaXM0Ny5fdGFyZ2V0TGlua3MgPSBuZXcgTWFwKCk7XG4gICAgICBfdGhpczQ3Ll9vYnNlcnZhYmxlU2VjdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICBfdGhpczQ3Ll9yb290RWxlbWVudCA9IGdldENvbXB1dGVkU3R5bGUoX3RoaXM0Ny5fZWxlbWVudCkub3ZlcmZsb3dZID09PSAndmlzaWJsZScgPyBudWxsIDogX3RoaXM0Ny5fZWxlbWVudDtcbiAgICAgIF90aGlzNDcuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICBfdGhpczQ3Ll9vYnNlcnZlciA9IG51bGw7XG4gICAgICBfdGhpczQ3Ll9wcmV2aW91c1Njcm9sbERhdGEgPSB7XG4gICAgICAgIHZpc2libGVFbnRyeVRvcDogMCxcbiAgICAgICAgcGFyZW50U2Nyb2xsVG9wOiAwXG4gICAgICB9O1xuICAgICAgX3RoaXM0Ny5yZWZyZXNoKCk7IC8vIGluaXRpYWxpemVcbiAgICAgIHJldHVybiBfdGhpczQ3O1xuICAgIH1cblxuICAgIC8vIEdldHRlcnNcbiAgICBfY3JlYXRlQ2xhc3MoU2Nyb2xsU3B5LCBbe1xuICAgICAga2V5OiBcInJlZnJlc2hcIixcbiAgICAgIHZhbHVlOlxuICAgICAgLy8gUHVibGljXG4gICAgICBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplVGFyZ2V0c0FuZE9ic2VydmFibGVzKCk7XG4gICAgICAgIHRoaXMuX21heWJlRW5hYmxlU21vb3RoU2Nyb2xsKCk7XG4gICAgICAgIGlmICh0aGlzLl9vYnNlcnZlcikge1xuICAgICAgICAgIHRoaXMuX29ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9vYnNlcnZlciA9IHRoaXMuX2dldE5ld09ic2VydmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9pdGVyYXRvcjIzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fb2JzZXJ2YWJsZVNlY3Rpb25zLnZhbHVlcygpKSxcbiAgICAgICAgICBfc3RlcDIzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMjMucygpOyAhKF9zdGVwMjMgPSBfaXRlcmF0b3IyMy5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgc2VjdGlvbiA9IF9zdGVwMjMudmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9vYnNlcnZlci5vYnNlcnZlKHNlY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMjMuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjIzLmYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJkaXNwb3NlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICBfZ2V0KF9nZXRQcm90b3R5cGVPZihTY3JvbGxTcHkucHJvdG90eXBlKSwgXCJkaXNwb3NlXCIsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByaXZhdGVcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2NvbmZpZ0FmdGVyTWVyZ2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY29uZmlnQWZ0ZXJNZXJnZShjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogb24gdjYgdGFyZ2V0IHNob3VsZCBiZSBnaXZlbiBleHBsaWNpdGx5ICYgcmVtb3ZlIHRoZSB7dGFyZ2V0OiAnc3MtdGFyZ2V0J30gY2FzZVxuICAgICAgICBjb25maWcudGFyZ2V0ID0gZ2V0RWxlbWVudChjb25maWcudGFyZ2V0KSB8fCBkb2N1bWVudC5ib2R5O1xuXG4gICAgICAgIC8vIFRPRE86IHY2IE9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnMuIFVzZSByb290TWFyZ2luIG9ubHlcbiAgICAgICAgY29uZmlnLnJvb3RNYXJnaW4gPSBjb25maWcub2Zmc2V0ID8gXCJcIi5jb25jYXQoY29uZmlnLm9mZnNldCwgXCJweCAwcHggLTMwJVwiKSA6IGNvbmZpZy5yb290TWFyZ2luO1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy50aHJlc2hvbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgY29uZmlnLnRocmVzaG9sZCA9IGNvbmZpZy50aHJlc2hvbGQuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9tYXliZUVuYWJsZVNtb290aFNjcm9sbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYXliZUVuYWJsZVNtb290aFNjcm9sbCgpIHtcbiAgICAgICAgdmFyIF90aGlzNDggPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZy5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1bnJlZ2lzdGVyIGFueSBwcmV2aW91cyBsaXN0ZW5lcnNcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9jb25maWcudGFyZ2V0LCBFVkVOVF9DTElDSyk7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9jb25maWcudGFyZ2V0LCBFVkVOVF9DTElDSywgU0VMRUNUT1JfVEFSR0VUX0xJTktTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICB2YXIgb2JzZXJ2YWJsZVNlY3Rpb24gPSBfdGhpczQ4Ll9vYnNlcnZhYmxlU2VjdGlvbnMuZ2V0KGV2ZW50LnRhcmdldC5oYXNoKTtcbiAgICAgICAgICBpZiAob2JzZXJ2YWJsZVNlY3Rpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB2YXIgcm9vdCA9IF90aGlzNDguX3Jvb3RFbGVtZW50IHx8IHdpbmRvdztcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvYnNlcnZhYmxlU2VjdGlvbi5vZmZzZXRUb3AgLSBfdGhpczQ4Ll9lbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICAgIGlmIChyb290LnNjcm9sbFRvKSB7XG4gICAgICAgICAgICAgIHJvb3Quc2Nyb2xsVG8oe1xuICAgICAgICAgICAgICAgIHRvcDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaHJvbWUgNjAgZG9lc24ndCBzdXBwb3J0IGBzY3JvbGxUb2BcbiAgICAgICAgICAgIHJvb3Quc2Nyb2xsVG9wID0gaGVpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9nZXROZXdPYnNlcnZlclwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXROZXdPYnNlcnZlcigpIHtcbiAgICAgICAgdmFyIF90aGlzNDkgPSB0aGlzO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICByb290OiB0aGlzLl9yb290RWxlbWVudCxcbiAgICAgICAgICB0aHJlc2hvbGQ6IHRoaXMuX2NvbmZpZy50aHJlc2hvbGQsXG4gICAgICAgICAgcm9vdE1hcmdpbjogdGhpcy5fY29uZmlnLnJvb3RNYXJnaW5cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICAgIHJldHVybiBfdGhpczQ5Ll9vYnNlcnZlckNhbGxiYWNrKGVudHJpZXMpO1xuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGxvZ2ljIG9mIHNlbGVjdGlvblxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfb2JzZXJ2ZXJDYWxsYmFja1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9vYnNlcnZlckNhbGxiYWNrKGVudHJpZXMpIHtcbiAgICAgICAgdmFyIF90aGlzNTAgPSB0aGlzO1xuICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGZ1bmN0aW9uIHRhcmdldEVsZW1lbnQoZW50cnkpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1MC5fdGFyZ2V0TGlua3MuZ2V0KFwiI1wiLmNvbmNhdChlbnRyeS50YXJnZXQuaWQpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFjdGl2YXRlID0gZnVuY3Rpb24gYWN0aXZhdGUoZW50cnkpIHtcbiAgICAgICAgICBfdGhpczUwLl9wcmV2aW91c1Njcm9sbERhdGEudmlzaWJsZUVudHJ5VG9wID0gZW50cnkudGFyZ2V0Lm9mZnNldFRvcDtcbiAgICAgICAgICBfdGhpczUwLl9wcm9jZXNzKHRhcmdldEVsZW1lbnQoZW50cnkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHBhcmVudFNjcm9sbFRvcCA9ICh0aGlzLl9yb290RWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLnNjcm9sbFRvcDtcbiAgICAgICAgdmFyIHVzZXJTY3JvbGxzRG93biA9IHBhcmVudFNjcm9sbFRvcCA+PSB0aGlzLl9wcmV2aW91c1Njcm9sbERhdGEucGFyZW50U2Nyb2xsVG9wO1xuICAgICAgICB0aGlzLl9wcmV2aW91c1Njcm9sbERhdGEucGFyZW50U2Nyb2xsVG9wID0gcGFyZW50U2Nyb2xsVG9wO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yMjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihlbnRyaWVzKSxcbiAgICAgICAgICBfc3RlcDI0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMjQucygpOyAhKF9zdGVwMjQgPSBfaXRlcmF0b3IyNC5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBfc3RlcDI0LnZhbHVlO1xuICAgICAgICAgICAgaWYgKCFlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgICB0aGlzLl9jbGVhckFjdGl2ZUNsYXNzKHRhcmdldEVsZW1lbnQoZW50cnkpKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW50cnlJc0xvd2VyVGhhblByZXZpb3VzID0gZW50cnkudGFyZ2V0Lm9mZnNldFRvcCA+PSB0aGlzLl9wcmV2aW91c1Njcm9sbERhdGEudmlzaWJsZUVudHJ5VG9wO1xuICAgICAgICAgICAgLy8gaWYgd2UgYXJlIHNjcm9sbGluZyBkb3duLCBwaWNrIHRoZSBiaWdnZXIgb2Zmc2V0VG9wXG4gICAgICAgICAgICBpZiAodXNlclNjcm9sbHNEb3duICYmIGVudHJ5SXNMb3dlclRoYW5QcmV2aW91cykge1xuICAgICAgICAgICAgICBhY3RpdmF0ZShlbnRyeSk7XG4gICAgICAgICAgICAgIC8vIGlmIHBhcmVudCBpc24ndCBzY3JvbGxlZCwgbGV0J3Mga2VlcCB0aGUgZmlyc3QgdmlzaWJsZSBpdGVtLCBicmVha2luZyB0aGUgaXRlcmF0aW9uXG4gICAgICAgICAgICAgIGlmICghcGFyZW50U2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB3ZSBhcmUgc2Nyb2xsaW5nIHVwLCBwaWNrIHRoZSBzbWFsbGVzdCBvZmZzZXRUb3BcbiAgICAgICAgICAgIGlmICghdXNlclNjcm9sbHNEb3duICYmICFlbnRyeUlzTG93ZXJUaGFuUHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgYWN0aXZhdGUoZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMjQuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjI0LmYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfaW5pdGlhbGl6ZVRhcmdldHNBbmRPYnNlcnZhYmxlc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0aWFsaXplVGFyZ2V0c0FuZE9ic2VydmFibGVzKCkge1xuICAgICAgICB0aGlzLl90YXJnZXRMaW5rcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fb2JzZXJ2YWJsZVNlY3Rpb25zID0gbmV3IE1hcCgpO1xuICAgICAgICB2YXIgdGFyZ2V0TGlua3MgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX1RBUkdFVF9MSU5LUywgdGhpcy5fY29uZmlnLnRhcmdldCk7XG4gICAgICAgIHZhciBfaXRlcmF0b3IyNSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRhcmdldExpbmtzKSxcbiAgICAgICAgICBfc3RlcDI1O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMjUucygpOyAhKF9zdGVwMjUgPSBfaXRlcmF0b3IyNS5uKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgYW5jaG9yID0gX3N0ZXAyNS52YWx1ZTtcbiAgICAgICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBhbmNob3IgaGFzIGFuIGlkIGFuZCBpcyBub3QgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmICghYW5jaG9yLmhhc2ggfHwgaXNEaXNhYmxlZChhbmNob3IpKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9ic2VydmFibGVTZWN0aW9uID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShhbmNob3IuaGFzaCwgdGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGVuc3VyZSB0aGF0IHRoZSBvYnNlcnZhYmxlU2VjdGlvbiBleGlzdHMgJiBpcyB2aXNpYmxlXG4gICAgICAgICAgICBpZiAoaXNWaXNpYmxlKG9ic2VydmFibGVTZWN0aW9uKSkge1xuICAgICAgICAgICAgICB0aGlzLl90YXJnZXRMaW5rcy5zZXQoYW5jaG9yLmhhc2gsIGFuY2hvcik7XG4gICAgICAgICAgICAgIHRoaXMuX29ic2VydmFibGVTZWN0aW9ucy5zZXQoYW5jaG9yLmhhc2gsIG9ic2VydmFibGVTZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjI1LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IyNS5mKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3Byb2Nlc3NcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJvY2Vzcyh0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsZWFyQWN0aXZlQ2xhc3ModGhpcy5fY29uZmlnLnRhcmdldCk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlUGFyZW50cyh0YXJnZXQpO1xuICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9BQ1RJVkFURSwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRhcmdldFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2FjdGl2YXRlUGFyZW50c1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9hY3RpdmF0ZVBhcmVudHModGFyZ2V0KSB7XG4gICAgICAgIC8vIEFjdGl2YXRlIGRyb3Bkb3duIHBhcmVudHNcbiAgICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRE9XTl9JVEVNKSkge1xuICAgICAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFJDEsIHRhcmdldC5jbG9zZXN0KFNFTEVDVE9SX0RST1BET1dOKSkuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSQxKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9pdGVyYXRvcjI2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoU2VsZWN0b3JFbmdpbmUucGFyZW50cyh0YXJnZXQsIFNFTEVDVE9SX05BVl9MSVNUX0dST1VQKSksXG4gICAgICAgICAgX3N0ZXAyNjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjI2LnMoKTsgIShfc3RlcDI2ID0gX2l0ZXJhdG9yMjYubigpKS5kb25lOykge1xuICAgICAgICAgICAgdmFyIGxpc3RHcm91cCA9IF9zdGVwMjYudmFsdWU7XG4gICAgICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAgICAgICAvLyBXaXRoIGJvdGggPHVsPiBhbmQgPG5hdj4gbWFya3VwIGEgcGFyZW50IGlzIHRoZSBwcmV2aW91cyBzaWJsaW5nIG9mIGFueSBuYXYgYW5jZXN0b3JcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3IyNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKFNlbGVjdG9yRW5naW5lLnByZXYobGlzdEdyb3VwLCBTRUxFQ1RPUl9MSU5LX0lURU1TKSksXG4gICAgICAgICAgICAgIF9zdGVwMjc7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjI3LnMoKTsgIShfc3RlcDI3ID0gX2l0ZXJhdG9yMjcubigpKS5kb25lOykge1xuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gX3N0ZXAyNy52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IyNy5lKGVycik7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBfaXRlcmF0b3IyNy5mKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBfaXRlcmF0b3IyNi5lKGVycik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMjYuZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9jbGVhckFjdGl2ZUNsYXNzXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2NsZWFyQWN0aXZlQ2xhc3MocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuICAgICAgICB2YXIgYWN0aXZlTm9kZXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFwiXCIuY29uY2F0KFNFTEVDVE9SX1RBUkdFVF9MSU5LUywgXCIuXCIpLmNvbmNhdChDTEFTU19OQU1FX0FDVElWRSQxKSwgcGFyZW50KTtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjI4ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYWN0aXZlTm9kZXMpLFxuICAgICAgICAgIF9zdGVwMjg7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IyOC5zKCk7ICEoX3N0ZXAyOCA9IF9pdGVyYXRvcjI4Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gX3N0ZXAyOC52YWx1ZTtcbiAgICAgICAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSQxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIF9pdGVyYXRvcjI4LmUoZXJyKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBfaXRlcmF0b3IyOC5mKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU3RhdGljXG4gICAgfV0sIFt7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDE7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQyO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJqUXVlcnlJbnRlcmZhY2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBkYXRhID0gU2Nyb2xsU3B5LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRhdGFbY29uZmlnXSA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5zdGFydHNXaXRoKCdfJykgfHwgY29uZmlnID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIi5jb25jYXQoY29uZmlnLCBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBTY3JvbGxTcHk7XG4gIH0oQmFzZUNvbXBvbmVudCk7XG4gIC8qKlxuICAgKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgKi9cbiAgRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSQxLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9pdGVyYXRvcjI5ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1NQWSkpLFxuICAgICAgX3N0ZXAyOTtcbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IyOS5zKCk7ICEoX3N0ZXAyOSA9IF9pdGVyYXRvcjI5Lm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIHNweSA9IF9zdGVwMjkudmFsdWU7XG4gICAgICAgIFNjcm9sbFNweS5nZXRPckNyZWF0ZUluc3RhbmNlKHNweSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IyOS5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvcjI5LmYoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luKFNjcm9sbFNweSk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjUuMy4wLWFscGhhMSk6IHRhYi5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgLyoqXG4gICAqIENvbnN0YW50c1xuICAgKi9cblxuICB2YXIgTkFNRSQxID0gJ3RhYic7XG4gIHZhciBEQVRBX0tFWSQxID0gJ2JzLnRhYic7XG4gIHZhciBFVkVOVF9LRVkkMSA9IFwiLlwiLmNvbmNhdChEQVRBX0tFWSQxKTtcbiAgdmFyIEVWRU5UX0hJREUkMSA9IFwiaGlkZVwiLmNvbmNhdChFVkVOVF9LRVkkMSk7XG4gIHZhciBFVkVOVF9ISURERU4kMSA9IFwiaGlkZGVuXCIuY29uY2F0KEVWRU5UX0tFWSQxKTtcbiAgdmFyIEVWRU5UX1NIT1ckMSA9IFwic2hvd1wiLmNvbmNhdChFVkVOVF9LRVkkMSk7XG4gIHZhciBFVkVOVF9TSE9XTiQxID0gXCJzaG93blwiLmNvbmNhdChFVkVOVF9LRVkkMSk7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSA9IFwiY2xpY2tcIi5jb25jYXQoRVZFTlRfS0VZJDEpO1xuICB2YXIgRVZFTlRfS0VZRE9XTiA9IFwia2V5ZG93blwiLmNvbmNhdChFVkVOVF9LRVkkMSk7XG4gIHZhciBFVkVOVF9MT0FEX0RBVEFfQVBJID0gXCJsb2FkXCIuY29uY2F0KEVWRU5UX0tFWSQxKTtcbiAgdmFyIEFSUk9XX0xFRlRfS0VZID0gJ0Fycm93TGVmdCc7XG4gIHZhciBBUlJPV19SSUdIVF9LRVkgPSAnQXJyb3dSaWdodCc7XG4gIHZhciBBUlJPV19VUF9LRVkgPSAnQXJyb3dVcCc7XG4gIHZhciBBUlJPV19ET1dOX0tFWSA9ICdBcnJvd0Rvd24nO1xuICB2YXIgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJztcbiAgdmFyIENMQVNTX05BTUVfRkFERSQxID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XJDEgPSAnc2hvdyc7XG4gIHZhciBDTEFTU19EUk9QRE9XTiA9ICdkcm9wZG93bic7XG4gIHZhciBTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUgPSAnLmRyb3Bkb3duLXRvZ2dsZSc7XG4gIHZhciBTRUxFQ1RPUl9EUk9QRE9XTl9NRU5VID0gJy5kcm9wZG93bi1tZW51JztcbiAgdmFyIE5PVF9TRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUgPSAnOm5vdCguZHJvcGRvd24tdG9nZ2xlKSc7XG4gIHZhciBTRUxFQ1RPUl9UQUJfUEFORUwgPSAnLmxpc3QtZ3JvdXAsIC5uYXYsIFtyb2xlPVwidGFibGlzdFwiXSc7XG4gIHZhciBTRUxFQ1RPUl9PVVRFUiA9ICcubmF2LWl0ZW0sIC5saXN0LWdyb3VwLWl0ZW0nO1xuICB2YXIgU0VMRUNUT1JfSU5ORVIgPSBcIi5uYXYtbGlua1wiLmNvbmNhdChOT1RfU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLCBcIiwgLmxpc3QtZ3JvdXAtaXRlbVwiKS5jb25jYXQoTk9UX1NFTEVDVE9SX0RST1BET1dOX1RPR0dMRSwgXCIsIFtyb2xlPVxcXCJ0YWJcXFwiXVwiKS5jb25jYXQoTk9UX1NFTEVDVE9SX0RST1BET1dOX1RPR0dMRSk7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLWJzLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLWJzLXRvZ2dsZT1cImxpc3RcIl0nOyAvLyB0b2RvOnY2OiBjb3VsZCBiZSBvbmx5IGB0YWJgXG4gIHZhciBTRUxFQ1RPUl9JTk5FUl9FTEVNID0gXCJcIi5jb25jYXQoU0VMRUNUT1JfSU5ORVIsIFwiLCBcIikuY29uY2F0KFNFTEVDVE9SX0RBVEFfVE9HR0xFKTtcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFX0FDVElWRSA9IFwiLlwiLmNvbmNhdChDTEFTU19OQU1FX0FDVElWRSwgXCJbZGF0YS1icy10b2dnbGU9XFxcInRhYlxcXCJdLCAuXCIpLmNvbmNhdChDTEFTU19OQU1FX0FDVElWRSwgXCJbZGF0YS1icy10b2dnbGU9XFxcInBpbGxcXFwiXSwgLlwiKS5jb25jYXQoQ0xBU1NfTkFNRV9BQ1RJVkUsIFwiW2RhdGEtYnMtdG9nZ2xlPVxcXCJsaXN0XFxcIl1cIik7XG5cbiAgLyoqXG4gICAqIENsYXNzIGRlZmluaXRpb25cbiAgICovXG4gIHZhciBUYWIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlQ29tcG9uZW50MTApIHtcbiAgICBfaW5oZXJpdHMoVGFiLCBfQmFzZUNvbXBvbmVudDEwKTtcbiAgICB2YXIgX3N1cGVyMTYgPSBfY3JlYXRlU3VwZXIoVGFiKTtcbiAgICBmdW5jdGlvbiBUYWIoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzNTE7XG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiKTtcbiAgICAgIF90aGlzNTEgPSBfc3VwZXIxNi5jYWxsKHRoaXMsIGVsZW1lbnQpO1xuICAgICAgX3RoaXM1MS5fcGFyZW50ID0gX3RoaXM1MS5fZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX1RBQl9QQU5FTCk7XG4gICAgICBpZiAoIV90aGlzNTEuX3BhcmVudCkge1xuICAgICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXM1MSk7XG4gICAgICAgIC8vIHRvZG86IHNob3VsZCBUaHJvdyBleGNlcHRpb24gb24gdjZcbiAgICAgICAgLy8gdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtlbGVtZW50Lm91dGVySFRNTH0gaGFzIG5vdCBhIHZhbGlkIHBhcmVudCAke1NFTEVDVE9SX0lOTkVSX0VMRU19YClcbiAgICAgIH1cblxuICAgICAgLy8gU2V0IHVwIGluaXRpYWwgYXJpYSBhdHRyaWJ1dGVzXG4gICAgICBfdGhpczUxLl9zZXRJbml0aWFsQXR0cmlidXRlcyhfdGhpczUxLl9wYXJlbnQsIF90aGlzNTEuX2dldENoaWxkcmVuKCkpO1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKF90aGlzNTEuX2VsZW1lbnQsIEVWRU5UX0tFWURPV04sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXM1MS5fa2V5ZG93bihldmVudCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBfdGhpczUxO1xuICAgIH1cblxuICAgIC8vIEdldHRlcnNcbiAgICBfY3JlYXRlQ2xhc3MoVGFiLCBbe1xuICAgICAga2V5OiBcInNob3dcIixcbiAgICAgIHZhbHVlOlxuICAgICAgLy8gUHVibGljXG4gICAgICBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICAvLyBTaG93cyB0aGlzIGVsZW0gYW5kIGRlYWN0aXZhdGUgdGhlIGFjdGl2ZSBzaWJsaW5nIGlmIGV4aXN0c1xuICAgICAgICB2YXIgaW5uZXJFbGVtID0gdGhpcy5fZWxlbWVudDtcbiAgICAgICAgaWYgKHRoaXMuX2VsZW1Jc0FjdGl2ZShpbm5lckVsZW0pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2VhcmNoIGZvciBhY3RpdmUgdGFiIG9uIHNhbWUgcGFyZW50IHRvIGRlYWN0aXZhdGUgaXRcbiAgICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW0oKTtcbiAgICAgICAgdmFyIGhpZGVFdmVudCA9IGFjdGl2ZSA/IEV2ZW50SGFuZGxlci50cmlnZ2VyKGFjdGl2ZSwgRVZFTlRfSElERSQxLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogaW5uZXJFbGVtXG4gICAgICAgIH0pIDogbnVsbDtcbiAgICAgICAgdmFyIHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKGlubmVyRWxlbSwgRVZFTlRfU0hPVyQxLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogYWN0aXZlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgaGlkZUV2ZW50ICYmIGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RlYWN0aXZhdGUoYWN0aXZlLCBpbm5lckVsZW0pO1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZShpbm5lckVsZW0sIGFjdGl2ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByaXZhdGVcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2FjdGl2YXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2FjdGl2YXRlKGVsZW1lbnQsIHJlbGF0ZWRFbGVtKSB7XG4gICAgICAgIHZhciBfdGhpczUyID0gdGhpcztcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSk7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKFNlbGVjdG9yRW5naW5lLmdldEVsZW1lbnRGcm9tU2VsZWN0b3IoZWxlbWVudCkpOyAvLyBTZWFyY2ggYW5kIGFjdGl2YXRlL3Nob3cgdGhlIHByb3BlciBzZWN0aW9uXG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdyb2xlJykgIT09ICd0YWInKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDEpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xuICAgICAgICAgIF90aGlzNTIuX3RvZ2dsZURyb3BEb3duKGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKGVsZW1lbnQsIEVWRU5UX1NIT1dOJDEsIHtcbiAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRFbGVtXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIGVsZW1lbnQsIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQxKSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9kZWFjdGl2YXRlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2RlYWN0aXZhdGUoZWxlbWVudCwgcmVsYXRlZEVsZW0pIHtcbiAgICAgICAgdmFyIF90aGlzNTMgPSB0aGlzO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKTtcbiAgICAgICAgZWxlbWVudC5ibHVyKCk7XG4gICAgICAgIHRoaXMuX2RlYWN0aXZhdGUoU2VsZWN0b3JFbmdpbmUuZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KSk7IC8vIFNlYXJjaCBhbmQgZGVhY3RpdmF0ZSB0aGUgc2hvd24gc2VjdGlvbiB0b29cblxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSAhPT0gJ3RhYicpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckMSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgIF90aGlzNTMuX3RvZ2dsZURyb3BEb3duKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihlbGVtZW50LCBFVkVOVF9ISURERU4kMSwge1xuICAgICAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZEVsZW1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgZWxlbWVudCwgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFJDEpKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2tleWRvd25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfa2V5ZG93bihldmVudCkge1xuICAgICAgICBpZiAoIVtBUlJPV19MRUZUX0tFWSwgQVJST1dfUklHSFRfS0VZLCBBUlJPV19VUF9LRVksIEFSUk9XX0RPV05fS0VZXS5pbmNsdWRlcyhldmVudC5rZXkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyAvLyBzdG9wUHJvcGFnYXRpb24vcHJldmVudERlZmF1bHQgYm90aCBhZGRlZCB0byBzdXBwb3J0IHVwL2Rvd24ga2V5cyB3aXRob3V0IHNjcm9sbGluZyB0aGUgcGFnZVxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgaXNOZXh0ID0gW0FSUk9XX1JJR0hUX0tFWSwgQVJST1dfRE9XTl9LRVldLmluY2x1ZGVzKGV2ZW50LmtleSk7XG4gICAgICAgIHZhciBuZXh0QWN0aXZlRWxlbWVudCA9IGdldE5leHRBY3RpdmVFbGVtZW50KHRoaXMuX2dldENoaWxkcmVuKCkuZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuICFpc0Rpc2FibGVkKGVsZW1lbnQpO1xuICAgICAgICB9KSwgZXZlbnQudGFyZ2V0LCBpc05leHQsIHRydWUpO1xuICAgICAgICBpZiAobmV4dEFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgICBuZXh0QWN0aXZlRWxlbWVudC5mb2N1cyh7XG4gICAgICAgICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UobmV4dEFjdGl2ZUVsZW1lbnQpLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZ2V0Q2hpbGRyZW5cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0Q2hpbGRyZW4oKSB7XG4gICAgICAgIC8vIGNvbGxlY3Rpb24gb2YgaW5uZXIgZWxlbWVudHNcbiAgICAgICAgcmV0dXJuIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfSU5ORVJfRUxFTSwgdGhpcy5fcGFyZW50KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldEFjdGl2ZUVsZW1cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0QWN0aXZlRWxlbSgpIHtcbiAgICAgICAgdmFyIF90aGlzNTQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q2hpbGRyZW4oKS5maW5kKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczU0Ll9lbGVtSXNBY3RpdmUoY2hpbGQpO1xuICAgICAgICB9KSB8fCBudWxsO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2V0SW5pdGlhbEF0dHJpYnV0ZXNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0SW5pdGlhbEF0dHJpYnV0ZXMocGFyZW50LCBjaGlsZHJlbikge1xuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyhwYXJlbnQsICdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICAgICAgdmFyIF9pdGVyYXRvcjMwID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoY2hpbGRyZW4pLFxuICAgICAgICAgIF9zdGVwMzA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChfaXRlcmF0b3IzMC5zKCk7ICEoX3N0ZXAzMCA9IF9pdGVyYXRvcjMwLm4oKSkuZG9uZTspIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IF9zdGVwMzAudmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9zZXRJbml0aWFsQXR0cmlidXRlc09uQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgX2l0ZXJhdG9yMzAuZShlcnIpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIF9pdGVyYXRvcjMwLmYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2V0SW5pdGlhbEF0dHJpYnV0ZXNPbkNoaWxkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEluaXRpYWxBdHRyaWJ1dGVzT25DaGlsZChjaGlsZCkge1xuICAgICAgICBjaGlsZCA9IHRoaXMuX2dldElubmVyRWxlbWVudChjaGlsZCk7XG4gICAgICAgIHZhciBpc0FjdGl2ZSA9IHRoaXMuX2VsZW1Jc0FjdGl2ZShjaGlsZCk7XG4gICAgICAgIHZhciBvdXRlckVsZW0gPSB0aGlzLl9nZXRPdXRlckVsZW1lbnQoY2hpbGQpO1xuICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBpc0FjdGl2ZSk7XG4gICAgICAgIGlmIChvdXRlckVsZW0gIT09IGNoaWxkKSB7XG4gICAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlSWZOb3RFeGlzdHMob3V0ZXJFbGVtLCAncm9sZScsICdwcmVzZW50YXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90RXhpc3RzKGNoaWxkLCAncm9sZScsICd0YWInKTtcblxuICAgICAgICAvLyBzZXQgYXR0cmlidXRlcyB0byB0aGUgcmVsYXRlZCBwYW5lbCB0b29cbiAgICAgICAgdGhpcy5fc2V0SW5pdGlhbEF0dHJpYnV0ZXNPblRhcmdldFBhbmVsKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3NldEluaXRpYWxBdHRyaWJ1dGVzT25UYXJnZXRQYW5lbFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRJbml0aWFsQXR0cmlidXRlc09uVGFyZ2V0UGFuZWwoY2hpbGQpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IFNlbGVjdG9yRW5naW5lLmdldEVsZW1lbnRGcm9tU2VsZWN0b3IoY2hpbGQpO1xuICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZXRBdHRyaWJ1dGVJZk5vdEV4aXN0cyh0YXJnZXQsICdyb2xlJywgJ3RhYnBhbmVsJyk7XG4gICAgICAgIGlmIChjaGlsZC5pZCkge1xuICAgICAgICAgIHRoaXMuX3NldEF0dHJpYnV0ZUlmTm90RXhpc3RzKHRhcmdldCwgJ2FyaWEtbGFiZWxsZWRieScsIFwiI1wiLmNvbmNhdChjaGlsZC5pZCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl90b2dnbGVEcm9wRG93blwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90b2dnbGVEcm9wRG93bihlbGVtZW50LCBvcGVuKSB7XG4gICAgICAgIHZhciBvdXRlckVsZW0gPSB0aGlzLl9nZXRPdXRlckVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIGlmICghb3V0ZXJFbGVtLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19EUk9QRE9XTikpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShzZWxlY3RvciwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgdmFyIGVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHNlbGVjdG9yLCBvdXRlckVsZW0pO1xuICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lLCBvcGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRvZ2dsZShTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUsIENMQVNTX05BTUVfQUNUSVZFKTtcbiAgICAgICAgdG9nZ2xlKFNFTEVDVE9SX0RST1BET1dOX01FTlUsIENMQVNTX05BTUVfU0hPVyQxKTtcbiAgICAgICAgb3V0ZXJFbGVtLnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIG9wZW4pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfc2V0QXR0cmlidXRlSWZOb3RFeGlzdHNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0QXR0cmlidXRlSWZOb3RFeGlzdHMoZWxlbWVudCwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgICAgICBpZiAoIWVsZW1lbnQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfZWxlbUlzQWN0aXZlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX2VsZW1Jc0FjdGl2ZShlbGVtKSB7XG4gICAgICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyeSB0byBnZXQgdGhlIGlubmVyIGVsZW1lbnQgKHVzdWFsbHkgdGhlIC5uYXYtbGluaylcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldElubmVyRWxlbWVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRJbm5lckVsZW1lbnQoZWxlbSkge1xuICAgICAgICByZXR1cm4gZWxlbS5tYXRjaGVzKFNFTEVDVE9SX0lOTkVSX0VMRU0pID8gZWxlbSA6IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfSU5ORVJfRUxFTSwgZWxlbSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRyeSB0byBnZXQgdGhlIG91dGVyIGVsZW1lbnQgKHVzdWFsbHkgdGhlIC5uYXYtaXRlbSlcbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX2dldE91dGVyRWxlbWVudFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRPdXRlckVsZW1lbnQoZWxlbSkge1xuICAgICAgICByZXR1cm4gZWxlbS5jbG9zZXN0KFNFTEVDVE9SX09VVEVSKSB8fCBlbGVtO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGF0aWNcbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUUkMTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwialF1ZXJ5SW50ZXJmYWNlXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24galF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnN0YXJ0c1dpdGgoJ18nKSB8fCBjb25maWcgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiLmNvbmNhdChjb25maWcsIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFRhYjtcbiAgfShCYXNlQ29tcG9uZW50KTtcbiAgLyoqXG4gICAqIERhdGEgQVBJIGltcGxlbWVudGF0aW9uXG4gICAqL1xuICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKFsnQScsICdBUkVBJ10uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcykuc2hvdygpO1xuICB9KTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBvbiBmb2N1c1xuICAgKi9cbiAgRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfaXRlcmF0b3IzMSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEVfQUNUSVZFKSksXG4gICAgICBfc3RlcDMxO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pdGVyYXRvcjMxLnMoKTsgIShfc3RlcDMxID0gX2l0ZXJhdG9yMzEubigpKS5kb25lOykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IF9zdGVwMzEudmFsdWU7XG4gICAgICAgIFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2l0ZXJhdG9yMzEuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IzMS5mKCk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIGpRdWVyeVxuICAgKi9cblxuICBkZWZpbmVKUXVlcnlQbHVnaW4oVGFiKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogdG9hc3QuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDb25zdGFudHNcbiAgICovXG5cbiAgdmFyIE5BTUUgPSAndG9hc3QnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMudG9hc3QnO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIuY29uY2F0KERBVEFfS0VZKTtcbiAgdmFyIEVWRU5UX01PVVNFT1ZFUiA9IFwibW91c2VvdmVyXCIuY29uY2F0KEVWRU5UX0tFWSk7XG4gIHZhciBFVkVOVF9NT1VTRU9VVCA9IFwibW91c2VvdXRcIi5jb25jYXQoRVZFTlRfS0VZKTtcbiAgdmFyIEVWRU5UX0ZPQ1VTSU4gPSBcImZvY3VzaW5cIi5jb25jYXQoRVZFTlRfS0VZKTtcbiAgdmFyIEVWRU5UX0ZPQ1VTT1VUID0gXCJmb2N1c291dFwiLmNvbmNhdChFVkVOVF9LRVkpO1xuICB2YXIgRVZFTlRfSElERSA9IFwiaGlkZVwiLmNvbmNhdChFVkVOVF9LRVkpO1xuICB2YXIgRVZFTlRfSElEREVOID0gXCJoaWRkZW5cIi5jb25jYXQoRVZFTlRfS0VZKTtcbiAgdmFyIEVWRU5UX1NIT1cgPSBcInNob3dcIi5jb25jYXQoRVZFTlRfS0VZKTtcbiAgdmFyIEVWRU5UX1NIT1dOID0gXCJzaG93blwiLmNvbmNhdChFVkVOVF9LRVkpO1xuICB2YXIgQ0xBU1NfTkFNRV9GQURFID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9ISURFID0gJ2hpZGUnOyAvLyBAZGVwcmVjYXRlZCAtIGtlcHQgaGVyZSBvbmx5IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICB2YXIgQ0xBU1NfTkFNRV9TSE9XID0gJ3Nob3cnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XSU5HID0gJ3Nob3dpbmcnO1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgYW5pbWF0aW9uOiAnYm9vbGVhbicsXG4gICAgYXV0b2hpZGU6ICdib29sZWFuJyxcbiAgICBkZWxheTogJ251bWJlcidcbiAgfTtcbiAgdmFyIERlZmF1bHQgPSB7XG4gICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgIGF1dG9oaWRlOiB0cnVlLFxuICAgIGRlbGF5OiA1MDAwXG4gIH07XG5cbiAgLyoqXG4gICAqIENsYXNzIGRlZmluaXRpb25cbiAgICovXG4gIHZhciBUb2FzdCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VDb21wb25lbnQxMSkge1xuICAgIF9pbmhlcml0cyhUb2FzdCwgX0Jhc2VDb21wb25lbnQxMSk7XG4gICAgdmFyIF9zdXBlcjE3ID0gX2NyZWF0ZVN1cGVyKFRvYXN0KTtcbiAgICBmdW5jdGlvbiBUb2FzdChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHZhciBfdGhpczU1O1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRvYXN0KTtcbiAgICAgIF90aGlzNTUgPSBfc3VwZXIxNy5jYWxsKHRoaXMsIGVsZW1lbnQsIGNvbmZpZyk7XG4gICAgICBfdGhpczU1Ll90aW1lb3V0ID0gbnVsbDtcbiAgICAgIF90aGlzNTUuX2hhc01vdXNlSW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICAgIF90aGlzNTUuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICAgIF90aGlzNTUuX3NldExpc3RlbmVycygpO1xuICAgICAgcmV0dXJuIF90aGlzNTU7XG4gICAgfVxuXG4gICAgLy8gR2V0dGVyc1xuICAgIF9jcmVhdGVDbGFzcyhUb2FzdCwgW3tcbiAgICAgIGtleTogXCJzaG93XCIsXG4gICAgICB2YWx1ZTpcbiAgICAgIC8vIFB1YmxpY1xuICAgICAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgdmFyIF90aGlzNTYgPSB0aGlzO1xuICAgICAgICB2YXIgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyk7XG4gICAgICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBfdGhpczU2Ll9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XSU5HKTtcbiAgICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihfdGhpczU2Ll9lbGVtZW50LCBFVkVOVF9TSE9XTik7XG4gICAgICAgICAgX3RoaXM1Ni5fbWF5YmVTY2hlZHVsZUhpZGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfSElERSk7IC8vIEBkZXByZWNhdGVkXG4gICAgICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVywgQ0xBU1NfTkFNRV9TSE9XSU5HKTtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdGhpcy5fY29uZmlnLmFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImhpZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgICB2YXIgX3RoaXM1NyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5pc1Nob3duKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpO1xuICAgICAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgX3RoaXM1Ny5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfSElERSk7IC8vIEBkZXByZWNhdGVkXG4gICAgICAgICAgX3RoaXM1Ny5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPV0lORywgQ0xBU1NfTkFNRV9TSE9XKTtcbiAgICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcihfdGhpczU3Ll9lbGVtZW50LCBFVkVOVF9ISURERU4pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XSU5HKTtcbiAgICAgICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdGhpcy5fY29uZmlnLmFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImRpc3Bvc2VcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNTaG93bigpKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyk7XG4gICAgICAgIH1cbiAgICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoVG9hc3QucHJvdG90eXBlKSwgXCJkaXNwb3NlXCIsIHRoaXMpLmNhbGwodGhpcyk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImlzU2hvd25cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBpc1Nob3duKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJpdmF0ZVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJfbWF5YmVTY2hlZHVsZUhpZGVcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbWF5YmVTY2hlZHVsZUhpZGUoKSB7XG4gICAgICAgIHZhciBfdGhpczU4ID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcuYXV0b2hpZGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gfHwgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM1OC5oaWRlKCk7XG4gICAgICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9vbkludGVyYWN0aW9uXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gX29uSW50ZXJhY3Rpb24oZXZlbnQsIGlzSW50ZXJhY3RpbmcpIHtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgICAgICBjYXNlICdtb3VzZW91dCc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gPSBpc0ludGVyYWN0aW5nO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdmb2N1c2luJzpcbiAgICAgICAgICBjYXNlICdmb2N1c291dCc6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRoaXMuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24gPSBpc0ludGVyYWN0aW5nO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJbnRlcmFjdGluZykge1xuICAgICAgICAgIHRoaXMuX2NsZWFyVGltZW91dCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dEVsZW1lbnQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgICAgICBpZiAodGhpcy5fZWxlbWVudCA9PT0gbmV4dEVsZW1lbnQgfHwgdGhpcy5fZWxlbWVudC5jb250YWlucyhuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiX3NldExpc3RlbmVyc1wiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHZhciBfdGhpczU5ID0gdGhpcztcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFT1ZFUiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNTkuX29uSW50ZXJhY3Rpb24oZXZlbnQsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFT1VULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM1OS5fb25JbnRlcmFjdGlvbihldmVudCwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczU5Ll9vbkludGVyYWN0aW9uKGV2ZW50LCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9GT0NVU09VVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNTkuX29uSW50ZXJhY3Rpb24oZXZlbnQsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9jbGVhclRpbWVvdXRcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY2xlYXJUaW1lb3V0KCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBTdGF0aWNcbiAgICB9XSwgW3tcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIE5BTUU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcImpRdWVyeUludGVyZmFjZVwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBUb2FzdC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIuY29uY2F0KGNvbmZpZywgXCJcXFwiXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gVG9hc3Q7XG4gIH0oQmFzZUNvbXBvbmVudCk7XG4gIC8qKlxuICAgKiBEYXRhIEFQSSBpbXBsZW1lbnRhdGlvblxuICAgKi9cbiAgZW5hYmxlRGlzbWlzc1RyaWdnZXIoVG9hc3QpO1xuXG4gIC8qKlxuICAgKiBqUXVlcnlcbiAgICovXG5cbiAgZGVmaW5lSlF1ZXJ5UGx1Z2luKFRvYXN0KTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NS4zLjAtYWxwaGExKTogaW5kZXgudW1kLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgdmFyIGluZGV4X3VtZCA9IHtcbiAgICBBbGVydDogQWxlcnQsXG4gICAgQnV0dG9uOiBCdXR0b24sXG4gICAgQ2Fyb3VzZWw6IENhcm91c2VsLFxuICAgIENvbGxhcHNlOiBDb2xsYXBzZSxcbiAgICBEcm9wZG93bjogRHJvcGRvd24sXG4gICAgTW9kYWw6IE1vZGFsLFxuICAgIE9mZmNhbnZhczogT2ZmY2FudmFzLFxuICAgIFBvcG92ZXI6IFBvcG92ZXIsXG4gICAgU2Nyb2xsU3B5OiBTY3JvbGxTcHksXG4gICAgVGFiOiBUYWIsXG4gICAgVG9hc3Q6IFRvYXN0LFxuICAgIFRvb2x0aXA6IFRvb2x0aXBcbiAgfTtcbiAgcmV0dXJuIGluZGV4X3VtZDtcbn0pO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3Jlc291cmNlcy9jc3MvYXBwLmNzc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3Jlc291cmNlcy9jc3MvYXBwLmNzcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3Jlc291cmNlcy9jc3MvYm9vdHN0cmFwLmNzc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3Jlc291cmNlcy9jc3MvYm9vdHN0cmFwLmNzcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3Jlc291cmNlcy9jc3MvY3VzdG9tLmNzc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3Jlc291cmNlcy9jc3MvY3VzdG9tLmNzcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdHZhciBkZWZlcnJlZCA9IFtdO1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uTyA9IChyZXN1bHQsIGNodW5rSWRzLCBmbiwgcHJpb3JpdHkpID0+IHtcbi8qKioqKiovIFx0XHRcdGlmKGNodW5rSWRzKSB7XG4vKioqKioqLyBcdFx0XHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcbi8qKioqKiovIFx0XHRcdFx0Zm9yKHZhciBpID0gZGVmZXJyZWQubGVuZ3RoOyBpID4gMCAmJiBkZWZlcnJlZFtpIC0gMV1bMl0gPiBwcmlvcml0eTsgaS0tKSBkZWZlcnJlZFtpXSA9IGRlZmVycmVkW2kgLSAxXTtcbi8qKioqKiovIFx0XHRcdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG4vKioqKioqLyBcdFx0XHRcdHJldHVybjtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcbi8qKioqKiovIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIFtjaHVua0lkcywgZm4sIHByaW9yaXR5XSA9IGRlZmVycmVkW2ldO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbi8qKioqKiovIFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmICgocHJpb3JpdHkgJiAxID09PSAwIHx8IG5vdEZ1bGZpbGxlZCA+PSBwcmlvcml0eSkgJiYgT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5PKS5ldmVyeSgoa2V5KSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5PW2tleV0oY2h1bmtJZHNbal0pKSkpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuLyoqKioqKi8gXHRcdFx0XHRcdH0gZWxzZSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRmdWxmaWxsZWQgPSBmYWxzZTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgciA9IGZuKCk7XG4vKioqKioqLyBcdFx0XHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIHJlc3VsdDtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcbi8qKioqKiovIFx0XHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gbm8gYmFzZVVSSVxuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vKioqKioqLyBcdFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vKioqKioqLyBcdFx0Ly8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4vKioqKioqLyBcdFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbi8qKioqKiovIFx0XHRcdFwiL2pzL2FwcFwiOiAwLFxuLyoqKioqKi8gXHRcdFx0XCJjc3MvY3VzdG9tXCI6IDAsXG4vKioqKioqLyBcdFx0XHRcImNzcy9ib290c3RyYXBcIjogMCxcbi8qKioqKiovIFx0XHRcdFwiY3NzL2FwcFwiOiAwXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHQvLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdC8vIG5vIHByZWZldGNoaW5nXG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gcHJlbG9hZGVkXG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gSE1SXG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gbm8gSE1SIG1hbmlmZXN0XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG4vKioqKioqLyBcdFx0XG4vKioqKioqLyBcdFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4vKioqKioqLyBcdFx0dmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG4vKioqKioqLyBcdFx0XHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuLyoqKioqKi8gXHRcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4vKioqKioqLyBcdFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbi8qKioqKiovIFx0XHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG4vKioqKioqLyBcdFx0XHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuLyoqKioqKi8gXHRcdFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG4vKioqKioqLyBcdFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHJlc3VsdCk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdHZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rXCJdID0gc2VsZltcIndlYnBhY2tDaHVua1wiXSB8fCBbXTtcbi8qKioqKiovIFx0XHRjaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbi8qKioqKiovIFx0XHRjaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gc3RhcnR1cFxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0Ly8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFtcImNzcy9jdXN0b21cIixcImNzcy9ib290c3RyYXBcIixcImNzcy9hcHBcIl0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9yZXNvdXJjZXMvanMvYXBwLmpzXCIpKSlcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5PKHVuZGVmaW5lZCwgW1wiY3NzL2N1c3RvbVwiLFwiY3NzL2Jvb3RzdHJhcFwiLFwiY3NzL2FwcFwiXSwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oXCIuL3Jlc291cmNlcy9jc3MvYXBwLmNzc1wiKSkpXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFtcImNzcy9jdXN0b21cIixcImNzcy9ib290c3RyYXBcIixcImNzcy9hcHBcIl0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9yZXNvdXJjZXMvY3NzL2Jvb3RzdHJhcC5jc3NcIikpKVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFtcImNzcy9jdXN0b21cIixcImNzcy9ib290c3RyYXBcIixcImNzcy9hcHBcIl0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9yZXNvdXJjZXMvY3NzL2N1c3RvbS5jc3NcIikpKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIH0pKClcbjsiXSwibmFtZXMiOlsiX193ZWJwYWNrX21vZHVsZXNfXyIsInJlc291cmNlc0pzQXBwSnMiLCJfX3VudXNlZF93ZWJwYWNrX21vZHVsZSIsIl9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCIkIiwiZG9jdW1lbnQiLCJyZWFkeSIsImNvbnNvbGUiLCJsb2ciLCJyZXNvdXJjZXNKc0Jvb3RzdHJhcEpzIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIl9nZXQiLCJSZWZsZWN0IiwiZ2V0IiwiYmluZCIsInRhcmdldCIsInByb3BlcnR5IiwicmVjZWl2ZXIiLCJiYXNlIiwiX3N1cGVyUHJvcEJhc2UiLCJkZXNjIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY2FsbCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInZhbHVlIiwiYXBwbHkiLCJvYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9nZXRQcm90b3R5cGVPZiIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIlR5cGVFcnJvciIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX3R5cGVvZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsImdldFByb3RvdHlwZU9mIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJlbnVtZXJhYmxlIiwicHVzaCIsIl9vYmplY3RTcHJlYWQiLCJpIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiX3RvUHJvcGVydHlLZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfc2xpY2VkVG9BcnJheSIsImFyciIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJfaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl94IiwiX3IiLCJfYXJyIiwiX24iLCJfZCIsIm5leHQiLCJkb25lIiwiZXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiRiIsInMiLCJuIiwiX2UyIiwiZiIsIm5vcm1hbENvbXBsZXRpb24iLCJkaWRFcnIiLCJzdGVwIiwiX2UzIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwidG9TdHJpbmciLCJzbGljZSIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIml0ZXIiLCJsZW4iLCJhcnIyIiwib2JqIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiTnVtYmVyIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIndlYnBhY2tNaXNzaW5nTW9kdWxlIiwiRXJyb3IiLCJjb2RlIiwiUG9wcGVyIiwiX0tFWV9UT19ESVJFQ1RJT04iLCJfaW50ZXJvcE5hbWVzcGFjZURlZmF1bHQiLCJ0b1N0cmluZ1RhZyIsIl9sb29wIiwiayIsImQiLCJmcmVlemUiLCJQb3BwZXJfX25hbWVzcGFjZSIsIk1BWF9VSUQiLCJNSUxMSVNFQ09ORFNfTVVMVElQTElFUiIsIlRSQU5TSVRJT05fRU5EIiwicGFyc2VTZWxlY3RvciIsInNlbGVjdG9yIiwid2luZG93IiwiQ1NTIiwiZXNjYXBlIiwicmVwbGFjZSIsIm1hdGNoIiwiaWQiLCJjb25jYXQiLCJ0b1R5cGUiLCJ0b0xvd2VyQ2FzZSIsImdldFVJRCIsInByZWZpeCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJlbGVtZW50IiwiX3dpbmRvdyRnZXRDb21wdXRlZFN0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uIiwicGFyc2VGbG9hdCIsImZsb2F0VHJhbnNpdGlvbkRlbGF5Iiwic3BsaXQiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImlzRWxlbWVudCIsImpxdWVyeSIsIm5vZGVUeXBlIiwiZ2V0RWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpc1Zpc2libGUiLCJnZXRDbGllbnRSZWN0cyIsImVsZW1lbnRJc1Zpc2libGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY2xvc2VkRGV0YWlscyIsImNsb3Nlc3QiLCJzdW1tYXJ5IiwicGFyZW50Tm9kZSIsImlzRGlzYWJsZWQiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJkaXNhYmxlZCIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsImZpbmRTaGFkb3dSb290IiwiZG9jdW1lbnRFbGVtZW50IiwiYXR0YWNoU2hhZG93IiwiZ2V0Um9vdE5vZGUiLCJyb290IiwiU2hhZG93Um9vdCIsIm5vb3AiLCJyZWZsb3ciLCJvZmZzZXRIZWlnaHQiLCJnZXRqUXVlcnkiLCJqUXVlcnkiLCJib2R5IiwiRE9NQ29udGVudExvYWRlZENhbGxiYWNrcyIsIm9uRE9NQ29udGVudExvYWRlZCIsImNhbGxiYWNrIiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJfRE9NQ29udGVudExvYWRlZENhbGwiLCJfY2FsbGJhY2siLCJpc1JUTCIsImRpciIsImRlZmluZUpRdWVyeVBsdWdpbiIsInBsdWdpbiIsIk5BTUUiLCJKUVVFUllfTk9fQ09ORkxJQ1QiLCJmbiIsImpRdWVyeUludGVyZmFjZSIsIm5vQ29uZmxpY3QiLCJleGVjdXRlIiwicG9zc2libGVDYWxsYmFjayIsImFyZ3MiLCJkZWZhdWx0VmFsdWUiLCJleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uIiwidHJhbnNpdGlvbkVsZW1lbnQiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsImR1cmF0aW9uUGFkZGluZyIsImVtdWxhdGVkRHVyYXRpb24iLCJjYWxsZWQiLCJoYW5kbGVyIiwiX3JlZiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwiZ2V0TmV4dEFjdGl2ZUVsZW1lbnQiLCJsaXN0IiwiYWN0aXZlRWxlbWVudCIsInNob3VsZEdldE5leHQiLCJpc0N5Y2xlQWxsb3dlZCIsImxpc3RMZW5ndGgiLCJpbmRleCIsImluZGV4T2YiLCJtYXgiLCJtaW4iLCJuYW1lc3BhY2VSZWdleCIsInN0cmlwTmFtZVJlZ2V4Iiwic3RyaXBVaWRSZWdleCIsImV2ZW50UmVnaXN0cnkiLCJ1aWRFdmVudCIsImN1c3RvbUV2ZW50cyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwibmF0aXZlRXZlbnRzIiwiU2V0IiwibWFrZUV2ZW50VWlkIiwidWlkIiwiZ2V0RWxlbWVudEV2ZW50cyIsImJvb3RzdHJhcEhhbmRsZXIiLCJldmVudCIsImh5ZHJhdGVPYmoiLCJkZWxlZ2F0ZVRhcmdldCIsIm9uZU9mZiIsIkV2ZW50SGFuZGxlciIsIm9mZiIsInR5cGUiLCJib290c3RyYXBEZWxlZ2F0aW9uSGFuZGxlciIsImRvbUVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIl9pdGVyYXRvciIsIl9zdGVwIiwiZG9tRWxlbWVudCIsImZpbmRIYW5kbGVyIiwiZXZlbnRzIiwiY2FsbGFibGUiLCJkZWxlZ2F0aW9uU2VsZWN0b3IiLCJ2YWx1ZXMiLCJmaW5kIiwibm9ybWFsaXplUGFyYW1ldGVycyIsIm9yaWdpbmFsVHlwZUV2ZW50IiwiZGVsZWdhdGlvbkZ1bmN0aW9uIiwiaXNEZWxlZ2F0ZWQiLCJ0eXBlRXZlbnQiLCJnZXRUeXBlRXZlbnQiLCJoYXMiLCJhZGRIYW5kbGVyIiwiX25vcm1hbGl6ZVBhcmFtZXRlcnMiLCJfbm9ybWFsaXplUGFyYW1ldGVyczIiLCJ3cmFwRnVuY3Rpb24iLCJyZWxhdGVkVGFyZ2V0IiwiaGFuZGxlcnMiLCJwcmV2aW91c0Z1bmN0aW9uIiwicmVtb3ZlSGFuZGxlciIsInJlbW92ZU5hbWVzcGFjZWRIYW5kbGVycyIsIm5hbWVzcGFjZSIsInN0b3JlRWxlbWVudEV2ZW50IiwiX2kyIiwiX09iamVjdCRlbnRyaWVzIiwiZW50cmllcyIsIl9PYmplY3QkZW50cmllcyRfaSIsImhhbmRsZXJLZXkiLCJpbmNsdWRlcyIsIm9uIiwib25lIiwiX25vcm1hbGl6ZVBhcmFtZXRlcnMzIiwiX25vcm1hbGl6ZVBhcmFtZXRlcnM0IiwiaW5OYW1lc3BhY2UiLCJpc05hbWVzcGFjZSIsInN0YXJ0c1dpdGgiLCJfaTMiLCJfT2JqZWN0JGtleXMiLCJlbGVtZW50RXZlbnQiLCJfaTQiLCJfT2JqZWN0JGVudHJpZXMyIiwiX09iamVjdCRlbnRyaWVzMiRfaSIsImtleUhhbmRsZXJzIiwidHJpZ2dlciIsImpRdWVyeUV2ZW50IiwiYnViYmxlcyIsIm5hdGl2ZURpc3BhdGNoIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJldnQiLCJjYW5jZWxhYmxlIiwicHJldmVudERlZmF1bHQiLCJtZXRhIiwiX2xvb3AyIiwiX09iamVjdCRlbnRyaWVzMyRfaSIsIl9PYmplY3QkZW50cmllczMiLCJfaTUiLCJfdW51c2VkIiwiZWxlbWVudE1hcCIsIk1hcCIsIkRhdGEiLCJzZXQiLCJpbnN0YW5jZU1hcCIsInNpemUiLCJlcnJvciIsInJlbW92ZSIsIm5vcm1hbGl6ZURhdGEiLCJKU09OIiwicGFyc2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJub3JtYWxpemVEYXRhS2V5IiwiY2hyIiwiTWFuaXB1bGF0b3IiLCJzZXREYXRhQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlRGF0YUF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImdldERhdGFBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImJzS2V5cyIsImRhdGFzZXQiLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwicHVyZUtleSIsImNoYXJBdCIsImdldERhdGFBdHRyaWJ1dGUiLCJDb25maWciLCJfZ2V0Q29uZmlnIiwiY29uZmlnIiwiX21lcmdlQ29uZmlnT2JqIiwiX2NvbmZpZ0FmdGVyTWVyZ2UiLCJfdHlwZUNoZWNrQ29uZmlnIiwianNvbkNvbmZpZyIsIkRlZmF1bHQiLCJjb25maWdUeXBlcyIsIkRlZmF1bHRUeXBlIiwiX2k2IiwiX09iamVjdCRlbnRyaWVzNCIsIl9PYmplY3QkZW50cmllczQkX2kiLCJleHBlY3RlZFR5cGVzIiwidmFsdWVUeXBlIiwiUmVnRXhwIiwidG9VcHBlckNhc2UiLCJWRVJTSU9OIiwiQmFzZUNvbXBvbmVudCIsIl9Db25maWciLCJfc3VwZXIiLCJfdGhpcyIsIl9lbGVtZW50IiwiX2NvbmZpZyIsIkRBVEFfS0VZIiwiZGlzcG9zZSIsIkVWRU5UX0tFWSIsIl9pdGVyYXRvcjMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX3N0ZXAzIiwicHJvcGVydHlOYW1lIiwiX3F1ZXVlQ2FsbGJhY2siLCJpc0FuaW1hdGVkIiwiZ2V0SW5zdGFuY2UiLCJnZXRPckNyZWF0ZUluc3RhbmNlIiwiZXZlbnROYW1lIiwiZ2V0U2VsZWN0b3IiLCJocmVmQXR0cmlidXRlIiwidHJpbSIsIlNlbGVjdG9yRW5naW5lIiwiX3JlZjIiLCJFbGVtZW50IiwiZmluZE9uZSIsImNoaWxkcmVuIiwiX3JlZjMiLCJjaGlsZCIsIm1hdGNoZXMiLCJwYXJlbnRzIiwiYW5jZXN0b3IiLCJwcmV2IiwicHJldmlvdXMiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZm9jdXNhYmxlQ2hpbGRyZW4iLCJmb2N1c2FibGVzIiwibWFwIiwiam9pbiIsImVsIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEVsZW1lbnRGcm9tU2VsZWN0b3IiLCJnZXRNdWx0aXBsZUVsZW1lbnRzRnJvbVNlbGVjdG9yIiwiZW5hYmxlRGlzbWlzc1RyaWdnZXIiLCJjb21wb25lbnQiLCJtZXRob2QiLCJjbGlja0V2ZW50IiwidGFnTmFtZSIsIk5BTUUkZiIsIkRBVEFfS0VZJGEiLCJFVkVOVF9LRVkkYiIsIkVWRU5UX0NMT1NFIiwiRVZFTlRfQ0xPU0VEIiwiQ0xBU1NfTkFNRV9GQURFJDUiLCJDTEFTU19OQU1FX1NIT1ckOCIsIkFsZXJ0IiwiX0Jhc2VDb21wb25lbnQiLCJfc3VwZXIyIiwiY2xvc2UiLCJfdGhpczIiLCJjbG9zZUV2ZW50IiwiX2Rlc3Ryb3lFbGVtZW50IiwiZWFjaCIsImRhdGEiLCJOQU1FJGUiLCJEQVRBX0tFWSQ5IiwiRVZFTlRfS0VZJGEiLCJEQVRBX0FQSV9LRVkkNiIsIkNMQVNTX05BTUVfQUNUSVZFJDMiLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ1IiwiRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNiIsIkJ1dHRvbiIsIl9CYXNlQ29tcG9uZW50MiIsIl9zdXBlcjMiLCJ0b2dnbGUiLCJidXR0b24iLCJOQU1FJGQiLCJFVkVOVF9LRVkkOSIsIkVWRU5UX1RPVUNIU1RBUlQiLCJFVkVOVF9UT1VDSE1PVkUiLCJFVkVOVF9UT1VDSEVORCIsIkVWRU5UX1BPSU5URVJET1dOIiwiRVZFTlRfUE9JTlRFUlVQIiwiUE9JTlRFUl9UWVBFX1RPVUNIIiwiUE9JTlRFUl9UWVBFX1BFTiIsIkNMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCIsIlNXSVBFX1RIUkVTSE9MRCIsIkRlZmF1bHQkYyIsImVuZENhbGxiYWNrIiwibGVmdENhbGxiYWNrIiwicmlnaHRDYWxsYmFjayIsIkRlZmF1bHRUeXBlJGMiLCJTd2lwZSIsIl9Db25maWcyIiwiX3N1cGVyNCIsIl90aGlzMyIsImlzU3VwcG9ydGVkIiwiX2RlbHRhWCIsIl9zdXBwb3J0UG9pbnRlckV2ZW50cyIsIlBvaW50ZXJFdmVudCIsIl9pbml0RXZlbnRzIiwiX3N0YXJ0IiwidG91Y2hlcyIsImNsaWVudFgiLCJfZXZlbnRJc1BvaW50ZXJQZW5Ub3VjaCIsIl9lbmQiLCJfaGFuZGxlU3dpcGUiLCJfbW92ZSIsImFic0RlbHRhWCIsImFicyIsImRpcmVjdGlvbiIsIl90aGlzNCIsImFkZCIsInBvaW50ZXJUeXBlIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJOQU1FJGMiLCJEQVRBX0tFWSQ4IiwiRVZFTlRfS0VZJDgiLCJEQVRBX0FQSV9LRVkkNSIsIkFSUk9XX0xFRlRfS0VZJDEiLCJBUlJPV19SSUdIVF9LRVkkMSIsIlRPVUNIRVZFTlRfQ09NUEFUX1dBSVQiLCJPUkRFUl9ORVhUIiwiT1JERVJfUFJFViIsIkRJUkVDVElPTl9MRUZUIiwiRElSRUNUSU9OX1JJR0hUIiwiRVZFTlRfU0xJREUiLCJFVkVOVF9TTElEIiwiRVZFTlRfS0VZRE9XTiQxIiwiRVZFTlRfTU9VU0VFTlRFUiQxIiwiRVZFTlRfTU9VU0VMRUFWRSQxIiwiRVZFTlRfRFJBR19TVEFSVCIsIkVWRU5UX0xPQURfREFUQV9BUEkkMyIsIkVWRU5UX0NMSUNLX0RBVEFfQVBJJDUiLCJDTEFTU19OQU1FX0NBUk9VU0VMIiwiQ0xBU1NfTkFNRV9BQ1RJVkUkMiIsIkNMQVNTX05BTUVfU0xJREUiLCJDTEFTU19OQU1FX0VORCIsIkNMQVNTX05BTUVfU1RBUlQiLCJDTEFTU19OQU1FX05FWFQiLCJDTEFTU19OQU1FX1BSRVYiLCJTRUxFQ1RPUl9BQ1RJVkUiLCJTRUxFQ1RPUl9JVEVNIiwiU0VMRUNUT1JfQUNUSVZFX0lURU0iLCJTRUxFQ1RPUl9JVEVNX0lNRyIsIlNFTEVDVE9SX0lORElDQVRPUlMiLCJTRUxFQ1RPUl9EQVRBX1NMSURFIiwiU0VMRUNUT1JfREFUQV9SSURFIiwiS0VZX1RPX0RJUkVDVElPTiIsIkRlZmF1bHQkYiIsImludGVydmFsIiwia2V5Ym9hcmQiLCJwYXVzZSIsInJpZGUiLCJ0b3VjaCIsIndyYXAiLCJEZWZhdWx0VHlwZSRiIiwiQ2Fyb3VzZWwiLCJfQmFzZUNvbXBvbmVudDMiLCJfc3VwZXI1IiwiX3RoaXM1IiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwiX3N3aXBlSGVscGVyIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiY3ljbGUiLCJfc2xpZGUiLCJuZXh0V2hlblZpc2libGUiLCJoaWRkZW4iLCJfY2xlYXJJbnRlcnZhbCIsIl90aGlzNiIsIl91cGRhdGVJbnRlcnZhbCIsInNldEludGVydmFsIiwiX21heWJlRW5hYmxlQ3ljbGUiLCJfdGhpczciLCJ0byIsIl90aGlzOCIsIml0ZW1zIiwiX2dldEl0ZW1zIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiX2dldEFjdGl2ZSIsIm9yZGVyIiwiZGVmYXVsdEludGVydmFsIiwiX3RoaXM5IiwiX2tleWRvd24iLCJfYWRkVG91Y2hFdmVudExpc3RlbmVycyIsIl90aGlzMTAiLCJfaXRlcmF0b3I0IiwiX3N0ZXA0IiwiaW1nIiwiZW5kQ2FsbEJhY2siLCJjbGVhclRpbWVvdXQiLCJzd2lwZUNvbmZpZyIsIl9kaXJlY3Rpb25Ub09yZGVyIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJhY3RpdmVJbmRpY2F0b3IiLCJuZXdBY3RpdmVJbmRpY2F0b3IiLCJlbGVtZW50SW50ZXJ2YWwiLCJwYXJzZUludCIsIl90aGlzMTEiLCJpc05leHQiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJ0cmlnZ2VyRXZlbnQiLCJfb3JkZXJUb0RpcmVjdGlvbiIsInNsaWRlRXZlbnQiLCJpc0N5Y2xpbmciLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsIm9yZGVyQ2xhc3NOYW1lIiwiY29tcGxldGVDYWxsQmFjayIsIl9pc0FuaW1hdGVkIiwiY2xlYXJJbnRlcnZhbCIsImNhcm91c2VsIiwic2xpZGVJbmRleCIsImNhcm91c2VscyIsIl9pdGVyYXRvcjUiLCJfc3RlcDUiLCJOQU1FJGIiLCJEQVRBX0tFWSQ3IiwiRVZFTlRfS0VZJDciLCJEQVRBX0FQSV9LRVkkNCIsIkVWRU5UX1NIT1ckNiIsIkVWRU5UX1NIT1dOJDYiLCJFVkVOVF9ISURFJDYiLCJFVkVOVF9ISURERU4kNiIsIkVWRU5UX0NMSUNLX0RBVEFfQVBJJDQiLCJDTEFTU19OQU1FX1NIT1ckNyIsIkNMQVNTX05BTUVfQ09MTEFQU0UiLCJDTEFTU19OQU1FX0NPTExBUFNJTkciLCJDTEFTU19OQU1FX0NPTExBUFNFRCIsIkNMQVNTX05BTUVfREVFUEVSX0NISUxEUkVOIiwiQ0xBU1NfTkFNRV9IT1JJWk9OVEFMIiwiV0lEVEgiLCJIRUlHSFQiLCJTRUxFQ1RPUl9BQ1RJVkVTIiwiU0VMRUNUT1JfREFUQV9UT0dHTEUkNCIsIkRlZmF1bHQkYSIsInBhcmVudCIsIkRlZmF1bHRUeXBlJGEiLCJDb2xsYXBzZSIsIl9CYXNlQ29tcG9uZW50NCIsIl9zdXBlcjYiLCJfdGhpczEyIiwiX2lzVHJhbnNpdGlvbmluZyIsIl90cmlnZ2VyQXJyYXkiLCJ0b2dnbGVMaXN0IiwiX2l0ZXJhdG9yNiIsIl9zdGVwNiIsImVsZW0iLCJmaWx0ZXJFbGVtZW50IiwiZm91bmRFbGVtZW50IiwiX2luaXRpYWxpemVDaGlsZHJlbiIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJfaXNTaG93biIsImhpZGUiLCJzaG93IiwiX3RoaXMxMyIsImFjdGl2ZUNoaWxkcmVuIiwiX2dldEZpcnN0TGV2ZWxDaGlsZHJlbiIsInN0YXJ0RXZlbnQiLCJfaXRlcmF0b3I3IiwiX3N0ZXA3IiwiYWN0aXZlSW5zdGFuY2UiLCJkaW1lbnNpb24iLCJfZ2V0RGltZW5zaW9uIiwic3R5bGUiLCJjb21wbGV0ZSIsImNhcGl0YWxpemVkRGltZW5zaW9uIiwic2Nyb2xsU2l6ZSIsIl90aGlzMTQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJfaXRlcmF0b3I4IiwiX3N0ZXA4IiwiX2l0ZXJhdG9yOSIsIl9zdGVwOSIsInNlbGVjdGVkIiwidHJpZ2dlckFycmF5IiwiaXNPcGVuIiwiX2l0ZXJhdG9yMTAiLCJfc3RlcDEwIiwiX2l0ZXJhdG9yMTEiLCJfc3RlcDExIiwiTkFNRSRhIiwiREFUQV9LRVkkNiIsIkVWRU5UX0tFWSQ2IiwiREFUQV9BUElfS0VZJDMiLCJFU0NBUEVfS0VZJDIiLCJUQUJfS0VZJDEiLCJBUlJPV19VUF9LRVkkMSIsIkFSUk9XX0RPV05fS0VZJDEiLCJSSUdIVF9NT1VTRV9CVVRUT04iLCJFVkVOVF9ISURFJDUiLCJFVkVOVF9ISURERU4kNSIsIkVWRU5UX1NIT1ckNSIsIkVWRU5UX1NIT1dOJDUiLCJFVkVOVF9DTElDS19EQVRBX0FQSSQzIiwiRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSIsIkVWRU5UX0tFWVVQX0RBVEFfQVBJIiwiQ0xBU1NfTkFNRV9TSE9XJDYiLCJDTEFTU19OQU1FX0RST1BVUCIsIkNMQVNTX05BTUVfRFJPUEVORCIsIkNMQVNTX05BTUVfRFJPUFNUQVJUIiwiQ0xBU1NfTkFNRV9EUk9QVVBfQ0VOVEVSIiwiQ0xBU1NfTkFNRV9EUk9QRE9XTl9DRU5URVIiLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzIiwiU0VMRUNUT1JfREFUQV9UT0dHTEVfU0hPV04iLCJTRUxFQ1RPUl9NRU5VIiwiU0VMRUNUT1JfTkFWQkFSIiwiU0VMRUNUT1JfTkFWQkFSX05BViIsIlNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMiLCJQTEFDRU1FTlRfVE9QIiwiUExBQ0VNRU5UX1RPUEVORCIsIlBMQUNFTUVOVF9CT1RUT00iLCJQTEFDRU1FTlRfQk9UVE9NRU5EIiwiUExBQ0VNRU5UX1JJR0hUIiwiUExBQ0VNRU5UX0xFRlQiLCJQTEFDRU1FTlRfVE9QQ0VOVEVSIiwiUExBQ0VNRU5UX0JPVFRPTUNFTlRFUiIsIkRlZmF1bHQkOSIsImF1dG9DbG9zZSIsImJvdW5kYXJ5IiwiZGlzcGxheSIsIm9mZnNldCIsInBvcHBlckNvbmZpZyIsInJlZmVyZW5jZSIsIkRlZmF1bHRUeXBlJDkiLCJEcm9wZG93biIsIl9CYXNlQ29tcG9uZW50NSIsIl9zdXBlcjciLCJfdGhpczE1IiwiX3BvcHBlciIsIl9wYXJlbnQiLCJfbWVudSIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJzaG93RXZlbnQiLCJfY3JlYXRlUG9wcGVyIiwiX3JlZjQiLCJfaXRlcmF0b3IxMiIsIl9zdGVwMTIiLCJmb2N1cyIsIl9jb21wbGV0ZUhpZGUiLCJkZXN0cm95IiwidXBkYXRlIiwiaGlkZUV2ZW50IiwiX3JlZjUiLCJfaXRlcmF0b3IxMyIsIl9zdGVwMTMiLCJyZWZlcmVuY2VFbGVtZW50IiwiX2dldFBvcHBlckNvbmZpZyIsImNyZWF0ZVBvcHBlciIsIl9nZXRQbGFjZW1lbnQiLCJwYXJlbnREcm9wZG93biIsImlzRW5kIiwiX2dldE9mZnNldCIsIl90aGlzMTYiLCJwb3BwZXJEYXRhIiwiZGVmYXVsdEJzUG9wcGVyQ29uZmlnIiwicGxhY2VtZW50IiwibW9kaWZpZXJzIiwib3B0aW9ucyIsImVuYWJsZWQiLCJfc2VsZWN0TWVudUl0ZW0iLCJfcmVmNiIsImNsZWFyTWVudXMiLCJvcGVuVG9nZ2xlcyIsIl9pdGVyYXRvcjE0IiwiX3N0ZXAxNCIsImNvbnRleHQiLCJjb21wb3NlZFBhdGgiLCJpc01lbnVUYXJnZXQiLCJkYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJpc0lucHV0IiwiaXNFc2NhcGVFdmVudCIsImlzVXBPckRvd25FdmVudCIsImdldFRvZ2dsZUJ1dHRvbiIsInN0b3BQcm9wYWdhdGlvbiIsIlNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQiLCJTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCIsIlBST1BFUlRZX1BBRERJTkciLCJQUk9QRVJUWV9NQVJHSU4iLCJTY3JvbGxCYXJIZWxwZXIiLCJnZXRXaWR0aCIsImRvY3VtZW50V2lkdGgiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJ3aWR0aCIsIl9kaXNhYmxlT3ZlckZsb3ciLCJfc2V0RWxlbWVudEF0dHJpYnV0ZXMiLCJjYWxjdWxhdGVkVmFsdWUiLCJyZXNldCIsIl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzIiwiaXNPdmVyZmxvd2luZyIsIl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSIsIm92ZXJmbG93Iiwic3R5bGVQcm9wZXJ0eSIsIl90aGlzMTciLCJzY3JvbGxiYXJXaWR0aCIsIm1hbmlwdWxhdGlvbkNhbGxCYWNrIiwic2V0UHJvcGVydHkiLCJfYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayIsImFjdHVhbFZhbHVlIiwicmVtb3ZlUHJvcGVydHkiLCJjYWxsQmFjayIsIl9pdGVyYXRvcjE1IiwiX3N0ZXAxNSIsInNlbCIsIk5BTUUkOSIsIkNMQVNTX05BTUVfRkFERSQ0IiwiQ0xBU1NfTkFNRV9TSE9XJDUiLCJFVkVOVF9NT1VTRURPV04iLCJEZWZhdWx0JDgiLCJjbGFzc05hbWUiLCJjbGlja0NhbGxiYWNrIiwicm9vdEVsZW1lbnQiLCJEZWZhdWx0VHlwZSQ4IiwiQmFja2Ryb3AiLCJfQ29uZmlnMyIsIl9zdXBlcjgiLCJfdGhpczE4IiwiX2lzQXBwZW5kZWQiLCJfYXBwZW5kIiwiX2dldEVsZW1lbnQiLCJfZW11bGF0ZUFuaW1hdGlvbiIsIl90aGlzMTkiLCJiYWNrZHJvcCIsImNyZWF0ZUVsZW1lbnQiLCJfdGhpczIwIiwiYXBwZW5kIiwiTkFNRSQ4IiwiREFUQV9LRVkkNSIsIkVWRU5UX0tFWSQ1IiwiRVZFTlRfRk9DVVNJTiQyIiwiRVZFTlRfS0VZRE9XTl9UQUIiLCJUQUJfS0VZIiwiVEFCX05BVl9GT1JXQVJEIiwiVEFCX05BVl9CQUNLV0FSRCIsIkRlZmF1bHQkNyIsImF1dG9mb2N1cyIsInRyYXBFbGVtZW50IiwiRGVmYXVsdFR5cGUkNyIsIkZvY3VzVHJhcCIsIl9Db25maWc0IiwiX3N1cGVyOSIsIl90aGlzMjEiLCJfaXNBY3RpdmUiLCJfbGFzdFRhYk5hdkRpcmVjdGlvbiIsImFjdGl2YXRlIiwiX3RoaXMyMiIsIl9oYW5kbGVGb2N1c2luIiwiX2hhbmRsZUtleWRvd24iLCJkZWFjdGl2YXRlIiwiZWxlbWVudHMiLCJzaGlmdEtleSIsIk5BTUUkNyIsIkRBVEFfS0VZJDQiLCJFVkVOVF9LRVkkNCIsIkRBVEFfQVBJX0tFWSQyIiwiRVNDQVBFX0tFWSQxIiwiRVZFTlRfSElERSQ0IiwiRVZFTlRfSElERV9QUkVWRU5URUQkMSIsIkVWRU5UX0hJRERFTiQ0IiwiRVZFTlRfU0hPVyQ0IiwiRVZFTlRfU0hPV04kNCIsIkVWRU5UX1JFU0laRSQxIiwiRVZFTlRfQ0xJQ0tfRElTTUlTUyIsIkVWRU5UX01PVVNFRE9XTl9ESVNNSVNTIiwiRVZFTlRfS0VZRE9XTl9ESVNNSVNTJDEiLCJFVkVOVF9DTElDS19EQVRBX0FQSSQyIiwiQ0xBU1NfTkFNRV9PUEVOIiwiQ0xBU1NfTkFNRV9GQURFJDMiLCJDTEFTU19OQU1FX1NIT1ckNCIsIkNMQVNTX05BTUVfU1RBVElDIiwiT1BFTl9TRUxFQ1RPUiQxIiwiU0VMRUNUT1JfRElBTE9HIiwiU0VMRUNUT1JfTU9EQUxfQk9EWSIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFJDIiLCJEZWZhdWx0JDYiLCJEZWZhdWx0VHlwZSQ2IiwiTW9kYWwiLCJfQmFzZUNvbXBvbmVudDYiLCJfc3VwZXIxMCIsIl90aGlzMjMiLCJfZGlhbG9nIiwiX2JhY2tkcm9wIiwiX2luaXRpYWxpemVCYWNrRHJvcCIsIl9mb2N1c3RyYXAiLCJfaW5pdGlhbGl6ZUZvY3VzVHJhcCIsIl9zY3JvbGxCYXIiLCJfdGhpczI0IiwiX2FkanVzdERpYWxvZyIsIl9zaG93RWxlbWVudCIsIl90aGlzMjUiLCJfaGlkZU1vZGFsIiwiX2k3IiwiX2FycjIiLCJodG1sRWxlbWVudCIsImhhbmRsZVVwZGF0ZSIsIl90aGlzMjYiLCJzY3JvbGxUb3AiLCJtb2RhbEJvZHkiLCJ0cmFuc2l0aW9uQ29tcGxldGUiLCJfdGhpczI3IiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJldmVudDIiLCJfdGhpczI4IiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfdGhpczI5IiwiaXNNb2RhbE92ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiaW5pdGlhbE92ZXJmbG93WSIsIm92ZXJmbG93WSIsImlzQm9keU92ZXJmbG93aW5nIiwiX3Byb3BlcnR5IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJfdGhpczMwIiwiYWxyZWFkeU9wZW4iLCJOQU1FJDYiLCJEQVRBX0tFWSQzIiwiRVZFTlRfS0VZJDMiLCJEQVRBX0FQSV9LRVkkMSIsIkVWRU5UX0xPQURfREFUQV9BUEkkMiIsIkVTQ0FQRV9LRVkiLCJDTEFTU19OQU1FX1NIT1ckMyIsIkNMQVNTX05BTUVfU0hPV0lORyQxIiwiQ0xBU1NfTkFNRV9ISURJTkciLCJDTEFTU19OQU1FX0JBQ0tEUk9QIiwiT1BFTl9TRUxFQ1RPUiIsIkVWRU5UX1NIT1ckMyIsIkVWRU5UX1NIT1dOJDMiLCJFVkVOVF9ISURFJDMiLCJFVkVOVF9ISURFX1BSRVZFTlRFRCIsIkVWRU5UX0hJRERFTiQzIiwiRVZFTlRfUkVTSVpFIiwiRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMSIsIkVWRU5UX0tFWURPV05fRElTTUlTUyIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFJDEiLCJEZWZhdWx0JDUiLCJzY3JvbGwiLCJEZWZhdWx0VHlwZSQ1IiwiT2ZmY2FudmFzIiwiX0Jhc2VDb21wb25lbnQ3IiwiX3N1cGVyMTEiLCJfdGhpczMxIiwiX3RoaXMzMiIsIl90aGlzMzMiLCJibHVyIiwiY29tcGxldGVDYWxsYmFjayIsIl90aGlzMzQiLCJfdGhpczM1IiwiX3RoaXMzNiIsIl9pdGVyYXRvcjE2IiwiX3N0ZXAxNiIsIl9pdGVyYXRvcjE3IiwiX3N0ZXAxNyIsInBvc2l0aW9uIiwidXJpQXR0cmlidXRlcyIsIkFSSUFfQVRUUklCVVRFX1BBVFRFUk4iLCJTQUZFX1VSTF9QQVRURVJOIiwiREFUQV9VUkxfUEFUVEVSTiIsImFsbG93ZWRBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsImF0dHJpYnV0ZU5hbWUiLCJub2RlTmFtZSIsIm5vZGVWYWx1ZSIsImF0dHJpYnV0ZVJlZ2V4Iiwic29tZSIsInJlZ2V4IiwiRGVmYXVsdEFsbG93bGlzdCIsImEiLCJhcmVhIiwiYiIsImJyIiwiY29sIiwiZGl2IiwiZW0iLCJociIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImxpIiwib2wiLCJwcmUiLCJzbWFsbCIsInNwYW4iLCJzdWIiLCJzdXAiLCJzdHJvbmciLCJ1IiwidWwiLCJzYW5pdGl6ZUh0bWwiLCJ1bnNhZmVIdG1sIiwiYWxsb3dMaXN0Iiwic2FuaXRpemVGdW5jdGlvbiIsIl9yZWY3IiwiZG9tUGFyc2VyIiwiRE9NUGFyc2VyIiwiY3JlYXRlZERvY3VtZW50IiwicGFyc2VGcm9tU3RyaW5nIiwiX2l0ZXJhdG9yMTgiLCJfc3RlcDE4IiwiX3JlZjgiLCJlbGVtZW50TmFtZSIsImF0dHJpYnV0ZUxpc3QiLCJhbGxvd2VkQXR0cmlidXRlcyIsIl9pdGVyYXRvcjE5IiwiX3N0ZXAxOSIsImlubmVySFRNTCIsIk5BTUUkNSIsIkRlZmF1bHQkNCIsImNvbnRlbnQiLCJleHRyYUNsYXNzIiwiaHRtbCIsInNhbml0aXplIiwic2FuaXRpemVGbiIsInRlbXBsYXRlIiwiRGVmYXVsdFR5cGUkNCIsIkRlZmF1bHRDb250ZW50VHlwZSIsImVudHJ5IiwiVGVtcGxhdGVGYWN0b3J5IiwiX0NvbmZpZzUiLCJfc3VwZXIxMiIsIl90aGlzMzciLCJnZXRDb250ZW50IiwiX3RoaXMzOCIsIl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbiIsImhhc0NvbnRlbnQiLCJjaGFuZ2VDb250ZW50IiwiX2NoZWNrQ29udGVudCIsInRvSHRtbCIsInRlbXBsYXRlV3JhcHBlciIsIl9tYXliZVNhbml0aXplIiwiX2k4IiwiX09iamVjdCRlbnRyaWVzNSIsIl9PYmplY3QkZW50cmllczUkX2kiLCJ0ZXh0IiwiX3NldENvbnRlbnQiLCJfdGVtcGxhdGUkY2xhc3NMaXN0IiwiX2k5IiwiX09iamVjdCRlbnRyaWVzNiIsIl9PYmplY3QkZW50cmllczYkX2kiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJfcHV0RWxlbWVudEluVGVtcGxhdGUiLCJ0ZXh0Q29udGVudCIsIk5BTUUkNCIsIkRJU0FMTE9XRURfQVRUUklCVVRFUyIsIkNMQVNTX05BTUVfRkFERSQyIiwiQ0xBU1NfTkFNRV9NT0RBTCIsIkNMQVNTX05BTUVfU0hPVyQyIiwiU0VMRUNUT1JfVE9PTFRJUF9JTk5FUiIsIlNFTEVDVE9SX01PREFMIiwiRVZFTlRfTU9EQUxfSElERSIsIlRSSUdHRVJfSE9WRVIiLCJUUklHR0VSX0ZPQ1VTIiwiVFJJR0dFUl9DTElDSyIsIlRSSUdHRVJfTUFOVUFMIiwiRVZFTlRfSElERSQyIiwiRVZFTlRfSElEREVOJDIiLCJFVkVOVF9TSE9XJDIiLCJFVkVOVF9TSE9XTiQyIiwiRVZFTlRfSU5TRVJURUQiLCJFVkVOVF9DTElDSyQxIiwiRVZFTlRfRk9DVVNJTiQxIiwiRVZFTlRfRk9DVVNPVVQkMSIsIkVWRU5UX01PVVNFRU5URVIiLCJFVkVOVF9NT1VTRUxFQVZFIiwiQXR0YWNobWVudE1hcCIsIkFVVE8iLCJUT1AiLCJSSUdIVCIsIkJPVFRPTSIsIkxFRlQiLCJEZWZhdWx0JDMiLCJhbmltYXRpb24iLCJjb250YWluZXIiLCJjdXN0b21DbGFzcyIsImRlbGF5IiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwidGl0bGUiLCJEZWZhdWx0VHlwZSQzIiwiVG9vbHRpcCIsIl9CYXNlQ29tcG9uZW50OCIsIl9zdXBlcjEzIiwiX3RoaXMzOSIsIl9pc0VuYWJsZWQiLCJfdGltZW91dCIsIl9pc0hvdmVyZWQiLCJfYWN0aXZlVHJpZ2dlciIsIl90ZW1wbGF0ZUZhY3RvcnkiLCJfbmV3Q29udGVudCIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJfZml4VGl0bGUiLCJlbmFibGUiLCJkaXNhYmxlIiwidG9nZ2xlRW5hYmxlZCIsImNsaWNrIiwiX2xlYXZlIiwiX2VudGVyIiwiX2hpZGVNb2RhbEhhbmRsZXIiLCJfZGlzcG9zZVBvcHBlciIsIl90aGlzNDAiLCJfaXNXaXRoQ29udGVudCIsInNoYWRvd1Jvb3QiLCJpc0luVGhlRG9tIiwib3duZXJEb2N1bWVudCIsIl9nZXRUaXBFbGVtZW50IiwiX3JlZjkiLCJfaXRlcmF0b3IyMCIsIl9zdGVwMjAiLCJfdGhpczQxIiwiX3JlZjEwIiwiX2l0ZXJhdG9yMjEiLCJfc3RlcDIxIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZ2V0VGl0bGUiLCJfY3JlYXRlVGlwRWxlbWVudCIsIl9nZXRDb250ZW50Rm9yVGVtcGxhdGUiLCJfZ2V0VGVtcGxhdGVGYWN0b3J5IiwidGlwSWQiLCJzZXRDb250ZW50IiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsImF0dGFjaG1lbnQiLCJfdGhpczQyIiwiX3RoaXM0MyIsInBoYXNlIiwic3RhdGUiLCJfdGhpczQ0IiwidHJpZ2dlcnMiLCJfaXRlcmF0b3IyMiIsIl9zdGVwMjIiLCJldmVudEluIiwiZXZlbnRPdXQiLCJfdGhpczQ1IiwiX3NldFRpbWVvdXQiLCJfdGhpczQ2IiwidGltZW91dCIsImRhdGFBdHRyaWJ1dGVzIiwiX2kxMCIsIl9PYmplY3Qka2V5czIiLCJkYXRhQXR0cmlidXRlIiwiX2kxMSIsIl9PYmplY3QkZW50cmllczciLCJfT2JqZWN0JGVudHJpZXM3JF9pIiwiTkFNRSQzIiwiU0VMRUNUT1JfVElUTEUiLCJTRUxFQ1RPUl9DT05URU5UIiwiRGVmYXVsdCQyIiwiRGVmYXVsdFR5cGUkMiIsIlBvcG92ZXIiLCJfVG9vbHRpcCIsIl9zdXBlcjE0IiwiX2dldENvbnRlbnQiLCJfcmVmMTIiLCJOQU1FJDIiLCJEQVRBX0tFWSQyIiwiRVZFTlRfS0VZJDIiLCJEQVRBX0FQSV9LRVkiLCJFVkVOVF9BQ1RJVkFURSIsIkVWRU5UX0NMSUNLIiwiRVZFTlRfTE9BRF9EQVRBX0FQSSQxIiwiQ0xBU1NfTkFNRV9EUk9QRE9XTl9JVEVNIiwiQ0xBU1NfTkFNRV9BQ1RJVkUkMSIsIlNFTEVDVE9SX0RBVEFfU1BZIiwiU0VMRUNUT1JfVEFSR0VUX0xJTktTIiwiU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAiLCJTRUxFQ1RPUl9OQVZfTElOS1MiLCJTRUxFQ1RPUl9OQVZfSVRFTVMiLCJTRUxFQ1RPUl9MSVNUX0lURU1TIiwiU0VMRUNUT1JfTElOS19JVEVNUyIsIlNFTEVDVE9SX0RST1BET1dOIiwiU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFJDEiLCJEZWZhdWx0JDEiLCJyb290TWFyZ2luIiwic21vb3RoU2Nyb2xsIiwidGhyZXNob2xkIiwiRGVmYXVsdFR5cGUkMSIsIlNjcm9sbFNweSIsIl9CYXNlQ29tcG9uZW50OSIsIl9zdXBlcjE1IiwiX3RoaXM0NyIsIl90YXJnZXRMaW5rcyIsIl9vYnNlcnZhYmxlU2VjdGlvbnMiLCJfcm9vdEVsZW1lbnQiLCJfYWN0aXZlVGFyZ2V0IiwiX29ic2VydmVyIiwiX3ByZXZpb3VzU2Nyb2xsRGF0YSIsInZpc2libGVFbnRyeVRvcCIsInBhcmVudFNjcm9sbFRvcCIsInJlZnJlc2giLCJfaW5pdGlhbGl6ZVRhcmdldHNBbmRPYnNlcnZhYmxlcyIsIl9tYXliZUVuYWJsZVNtb290aFNjcm9sbCIsImRpc2Nvbm5lY3QiLCJfZ2V0TmV3T2JzZXJ2ZXIiLCJfaXRlcmF0b3IyMyIsIl9zdGVwMjMiLCJzZWN0aW9uIiwib2JzZXJ2ZSIsIl90aGlzNDgiLCJvYnNlcnZhYmxlU2VjdGlvbiIsImhhc2giLCJoZWlnaHQiLCJvZmZzZXRUb3AiLCJzY3JvbGxUbyIsInRvcCIsImJlaGF2aW9yIiwiX3RoaXM0OSIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiX29ic2VydmVyQ2FsbGJhY2siLCJfdGhpczUwIiwidGFyZ2V0RWxlbWVudCIsIl9wcm9jZXNzIiwidXNlclNjcm9sbHNEb3duIiwiX2l0ZXJhdG9yMjQiLCJfc3RlcDI0IiwiaXNJbnRlcnNlY3RpbmciLCJfY2xlYXJBY3RpdmVDbGFzcyIsImVudHJ5SXNMb3dlclRoYW5QcmV2aW91cyIsInRhcmdldExpbmtzIiwiX2l0ZXJhdG9yMjUiLCJfc3RlcDI1IiwiYW5jaG9yIiwiX2FjdGl2YXRlUGFyZW50cyIsIl9pdGVyYXRvcjI2IiwiX3N0ZXAyNiIsImxpc3RHcm91cCIsIl9pdGVyYXRvcjI3IiwiX3N0ZXAyNyIsIml0ZW0iLCJhY3RpdmVOb2RlcyIsIl9pdGVyYXRvcjI4IiwiX3N0ZXAyOCIsIm5vZGUiLCJfaXRlcmF0b3IyOSIsIl9zdGVwMjkiLCJzcHkiLCJOQU1FJDEiLCJEQVRBX0tFWSQxIiwiRVZFTlRfS0VZJDEiLCJFVkVOVF9ISURFJDEiLCJFVkVOVF9ISURERU4kMSIsIkVWRU5UX1NIT1ckMSIsIkVWRU5UX1NIT1dOJDEiLCJFVkVOVF9DTElDS19EQVRBX0FQSSIsIkVWRU5UX0tFWURPV04iLCJFVkVOVF9MT0FEX0RBVEFfQVBJIiwiQVJST1dfTEVGVF9LRVkiLCJBUlJPV19SSUdIVF9LRVkiLCJBUlJPV19VUF9LRVkiLCJBUlJPV19ET1dOX0tFWSIsIkNMQVNTX05BTUVfQUNUSVZFIiwiQ0xBU1NfTkFNRV9GQURFJDEiLCJDTEFTU19OQU1FX1NIT1ckMSIsIkNMQVNTX0RST1BET1dOIiwiU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFIiwiU0VMRUNUT1JfRFJPUERPV05fTUVOVSIsIk5PVF9TRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUiLCJTRUxFQ1RPUl9UQUJfUEFORUwiLCJTRUxFQ1RPUl9PVVRFUiIsIlNFTEVDVE9SX0lOTkVSIiwiU0VMRUNUT1JfREFUQV9UT0dHTEUiLCJTRUxFQ1RPUl9JTk5FUl9FTEVNIiwiU0VMRUNUT1JfREFUQV9UT0dHTEVfQUNUSVZFIiwiVGFiIiwiX0Jhc2VDb21wb25lbnQxMCIsIl9zdXBlcjE2IiwiX3RoaXM1MSIsIl9zZXRJbml0aWFsQXR0cmlidXRlcyIsIl9nZXRDaGlsZHJlbiIsImlubmVyRWxlbSIsIl9lbGVtSXNBY3RpdmUiLCJhY3RpdmUiLCJfZ2V0QWN0aXZlRWxlbSIsIl9kZWFjdGl2YXRlIiwiX2FjdGl2YXRlIiwicmVsYXRlZEVsZW0iLCJfdGhpczUyIiwiX3RvZ2dsZURyb3BEb3duIiwiX3RoaXM1MyIsIm5leHRBY3RpdmVFbGVtZW50IiwicHJldmVudFNjcm9sbCIsIl90aGlzNTQiLCJfc2V0QXR0cmlidXRlSWZOb3RFeGlzdHMiLCJfaXRlcmF0b3IzMCIsIl9zdGVwMzAiLCJfc2V0SW5pdGlhbEF0dHJpYnV0ZXNPbkNoaWxkIiwiX2dldElubmVyRWxlbWVudCIsImlzQWN0aXZlIiwib3V0ZXJFbGVtIiwiX2dldE91dGVyRWxlbWVudCIsIl9zZXRJbml0aWFsQXR0cmlidXRlc09uVGFyZ2V0UGFuZWwiLCJvcGVuIiwiX2l0ZXJhdG9yMzEiLCJfc3RlcDMxIiwiRVZFTlRfTU9VU0VPVkVSIiwiRVZFTlRfTU9VU0VPVVQiLCJFVkVOVF9GT0NVU0lOIiwiRVZFTlRfRk9DVVNPVVQiLCJFVkVOVF9ISURFIiwiRVZFTlRfSElEREVOIiwiRVZFTlRfU0hPVyIsIkVWRU5UX1NIT1dOIiwiQ0xBU1NfTkFNRV9GQURFIiwiQ0xBU1NfTkFNRV9ISURFIiwiQ0xBU1NfTkFNRV9TSE9XIiwiQ0xBU1NfTkFNRV9TSE9XSU5HIiwiYXV0b2hpZGUiLCJUb2FzdCIsIl9CYXNlQ29tcG9uZW50MTEiLCJfc3VwZXIxNyIsIl90aGlzNTUiLCJfaGFzTW91c2VJbnRlcmFjdGlvbiIsIl9oYXNLZXlib2FyZEludGVyYWN0aW9uIiwiX3RoaXM1NiIsIl9jbGVhclRpbWVvdXQiLCJfbWF5YmVTY2hlZHVsZUhpZGUiLCJfdGhpczU3IiwiaXNTaG93biIsIl90aGlzNTgiLCJfb25JbnRlcmFjdGlvbiIsImlzSW50ZXJhY3RpbmciLCJfdGhpczU5IiwiaW5kZXhfdW1kIiwicmVzb3VyY2VzQ3NzQXBwQ3NzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInIiLCJyZXNvdXJjZXNDc3NCb290c3RyYXBDc3MiLCJyZXNvdXJjZXNDc3NDdXN0b21Dc3MiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm0iLCJkZWZlcnJlZCIsIk8iLCJjaHVua0lkcyIsInByaW9yaXR5Iiwibm90RnVsZmlsbGVkIiwiSW5maW5pdHkiLCJfZGVmZXJyZWQkaSIsIl9zbGljZWRUb0FycmF5MiIsImZ1bGZpbGxlZCIsImoiLCJldmVyeSIsInNwbGljZSIsInByb3AiLCJpbnN0YWxsZWRDaHVua3MiLCJjaHVua0lkIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsIl9kYXRhIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hODBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./resources/sass/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;